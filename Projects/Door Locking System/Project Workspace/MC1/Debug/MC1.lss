
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c8  00800060  000032b2  00003346  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800128  00800128  0000340e  2**0
                  ALLOC
  3 .stab         00002e08  00000000  00000000  00003410  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000145f  00000000  00000000  00006218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007677  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000077b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007927  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009570  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a45b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b208  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b368  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b5f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bdc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__vector_3>
      10:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__vector_8>
      24:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 32       	cpi	r26, 0x28	; 40
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e2       	ldi	r26, 0x28	; 40
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 33       	cpi	r26, 0x31	; 49
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <main>
      8a:	0c 94 57 19 	jmp	0x32ae	; 0x32ae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e0       	ldi	r26, 0x0E	; 14
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8e e0       	ldi	r24, 0x0E	; 14
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 07 19 	jmp	0x320e	; 0x320e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	/* Setup the pin direction as required */
	switch(port_num)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <GPIO_setupPinDirection+0x2a>
     b6e:	43 c0       	rjmp	.+134    	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	31 05       	cpc	r19, r1
     b78:	2c f4       	brge	.+10     	; 0xb84 <GPIO_setupPinDirection+0x3e>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	71 f0       	breq	.+28     	; 0xb9e <GPIO_setupPinDirection+0x58>
     b82:	bc c0       	rjmp	.+376    	; 0xcfc <GPIO_setupPinDirection+0x1b6>
     b84:	2c 81       	ldd	r18, Y+4	; 0x04
     b86:	3d 81       	ldd	r19, Y+5	; 0x05
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <GPIO_setupPinDirection+0x4a>
     b8e:	5f c0       	rjmp	.+190    	; 0xc4e <GPIO_setupPinDirection+0x108>
     b90:	8c 81       	ldd	r24, Y+4	; 0x04
     b92:	9d 81       	ldd	r25, Y+5	; 0x05
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	91 05       	cpc	r25, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <GPIO_setupPinDirection+0x56>
     b9a:	85 c0       	rjmp	.+266    	; 0xca6 <GPIO_setupPinDirection+0x160>
     b9c:	af c0       	rjmp	.+350    	; 0xcfc <GPIO_setupPinDirection+0x1b6>
	{
	case PORTA_ID:
		if(direction == PIN_OUTPUT)
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	a1 f4       	brne	.+40     	; 0xbcc <GPIO_setupPinDirection+0x86>
		{
			SET_BIT(DDRA,pin_num);
     ba4:	aa e3       	ldi	r26, 0x3A	; 58
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	ea e3       	ldi	r30, 0x3A	; 58
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	48 2f       	mov	r20, r24
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	02 2e       	mov	r0, r18
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <GPIO_setupPinDirection+0x7c>
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	0a 94       	dec	r0
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <GPIO_setupPinDirection+0x78>
     bc6:	84 2b       	or	r24, r20
     bc8:	8c 93       	st	X, r24
     bca:	98 c0       	rjmp	.+304    	; 0xcfc <GPIO_setupPinDirection+0x1b6>
		}
		else
		{
			CLEAR_BIT(DDRA,pin_num);
     bcc:	aa e3       	ldi	r26, 0x3A	; 58
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ea e3       	ldi	r30, 0x3A	; 58
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	48 2f       	mov	r20, r24
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	02 2e       	mov	r0, r18
     be4:	02 c0       	rjmp	.+4      	; 0xbea <GPIO_setupPinDirection+0xa4>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	0a 94       	dec	r0
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <GPIO_setupPinDirection+0xa0>
     bee:	80 95       	com	r24
     bf0:	84 23       	and	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	83 c0       	rjmp	.+262    	; 0xcfc <GPIO_setupPinDirection+0x1b6>
		}
		break;
	case PORTB_ID:
		if(direction == PIN_OUTPUT)
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	a1 f4       	brne	.+40     	; 0xc24 <GPIO_setupPinDirection+0xde>
		{
			SET_BIT(DDRB,pin_num);
     bfc:	a7 e3       	ldi	r26, 0x37	; 55
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e7 e3       	ldi	r30, 0x37	; 55
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	48 2f       	mov	r20, r24
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 2e       	mov	r0, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <GPIO_setupPinDirection+0xd4>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <GPIO_setupPinDirection+0xd0>
     c1e:	84 2b       	or	r24, r20
     c20:	8c 93       	st	X, r24
     c22:	6c c0       	rjmp	.+216    	; 0xcfc <GPIO_setupPinDirection+0x1b6>
		}
		else
		{
			CLEAR_BIT(DDRB,pin_num);
     c24:	a7 e3       	ldi	r26, 0x37	; 55
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e7 e3       	ldi	r30, 0x37	; 55
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	48 2f       	mov	r20, r24
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 2e       	mov	r0, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <GPIO_setupPinDirection+0xfc>
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	0a 94       	dec	r0
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <GPIO_setupPinDirection+0xf8>
     c46:	80 95       	com	r24
     c48:	84 23       	and	r24, r20
     c4a:	8c 93       	st	X, r24
     c4c:	57 c0       	rjmp	.+174    	; 0xcfc <GPIO_setupPinDirection+0x1b6>
		}
		break;
	case PORTC_ID:
		if(direction == PIN_OUTPUT)
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	a1 f4       	brne	.+40     	; 0xc7c <GPIO_setupPinDirection+0x136>
		{
			SET_BIT(DDRC,pin_num);
     c54:	a4 e3       	ldi	r26, 0x34	; 52
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e4 e3       	ldi	r30, 0x34	; 52
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	48 2f       	mov	r20, r24
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 2e       	mov	r0, r18
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <GPIO_setupPinDirection+0x12c>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	0a 94       	dec	r0
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <GPIO_setupPinDirection+0x128>
     c76:	84 2b       	or	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	40 c0       	rjmp	.+128    	; 0xcfc <GPIO_setupPinDirection+0x1b6>
		}
		else
		{
			CLEAR_BIT(DDRC,pin_num);
     c7c:	a4 e3       	ldi	r26, 0x34	; 52
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e4 e3       	ldi	r30, 0x34	; 52
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	48 2f       	mov	r20, r24
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	02 2e       	mov	r0, r18
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <GPIO_setupPinDirection+0x154>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	0a 94       	dec	r0
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <GPIO_setupPinDirection+0x150>
     c9e:	80 95       	com	r24
     ca0:	84 23       	and	r24, r20
     ca2:	8c 93       	st	X, r24
     ca4:	2b c0       	rjmp	.+86     	; 0xcfc <GPIO_setupPinDirection+0x1b6>
		}
		break;
	case PORTD_ID:
		if(direction == PIN_OUTPUT)
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	a1 f4       	brne	.+40     	; 0xcd4 <GPIO_setupPinDirection+0x18e>
		{
			SET_BIT(DDRD,pin_num);
     cac:	a1 e3       	ldi	r26, 0x31	; 49
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e1 e3       	ldi	r30, 0x31	; 49
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <GPIO_setupPinDirection+0x184>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <GPIO_setupPinDirection+0x180>
     cce:	84 2b       	or	r24, r20
     cd0:	8c 93       	st	X, r24
     cd2:	14 c0       	rjmp	.+40     	; 0xcfc <GPIO_setupPinDirection+0x1b6>
		}
		else
		{
			CLEAR_BIT(DDRD,pin_num);
     cd4:	a1 e3       	ldi	r26, 0x31	; 49
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e1 e3       	ldi	r30, 0x31	; 49
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <GPIO_setupPinDirection+0x1ac>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <GPIO_setupPinDirection+0x1a8>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <GPIO_writePin+0x6>
     d12:	00 d0       	rcall	.+0      	; 0xd14 <GPIO_writePin+0x8>
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	89 83       	std	Y+1, r24	; 0x01
     d1c:	6a 83       	std	Y+2, r22	; 0x02
     d1e:	4b 83       	std	Y+3, r20	; 0x03

	/* Setup the pin direction as required */
	switch(port_num)
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	3d 83       	std	Y+5, r19	; 0x05
     d28:	2c 83       	std	Y+4, r18	; 0x04
     d2a:	8c 81       	ldd	r24, Y+4	; 0x04
     d2c:	9d 81       	ldd	r25, Y+5	; 0x05
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	91 05       	cpc	r25, r1
     d32:	09 f4       	brne	.+2      	; 0xd36 <GPIO_writePin+0x2a>
     d34:	43 c0       	rjmp	.+134    	; 0xdbc <GPIO_writePin+0xb0>
     d36:	2c 81       	ldd	r18, Y+4	; 0x04
     d38:	3d 81       	ldd	r19, Y+5	; 0x05
     d3a:	22 30       	cpi	r18, 0x02	; 2
     d3c:	31 05       	cpc	r19, r1
     d3e:	2c f4       	brge	.+10     	; 0xd4a <GPIO_writePin+0x3e>
     d40:	8c 81       	ldd	r24, Y+4	; 0x04
     d42:	9d 81       	ldd	r25, Y+5	; 0x05
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	71 f0       	breq	.+28     	; 0xd64 <GPIO_writePin+0x58>
     d48:	bc c0       	rjmp	.+376    	; 0xec2 <GPIO_writePin+0x1b6>
     d4a:	2c 81       	ldd	r18, Y+4	; 0x04
     d4c:	3d 81       	ldd	r19, Y+5	; 0x05
     d4e:	22 30       	cpi	r18, 0x02	; 2
     d50:	31 05       	cpc	r19, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x4a>
     d54:	5f c0       	rjmp	.+190    	; 0xe14 <GPIO_writePin+0x108>
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	9d 81       	ldd	r25, Y+5	; 0x05
     d5a:	83 30       	cpi	r24, 0x03	; 3
     d5c:	91 05       	cpc	r25, r1
     d5e:	09 f4       	brne	.+2      	; 0xd62 <GPIO_writePin+0x56>
     d60:	85 c0       	rjmp	.+266    	; 0xe6c <GPIO_writePin+0x160>
     d62:	af c0       	rjmp	.+350    	; 0xec2 <GPIO_writePin+0x1b6>
	{
	case PORTA_ID:
		if(value == LOGIC_HIGH)
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	a1 f4       	brne	.+40     	; 0xd92 <GPIO_writePin+0x86>
		{
			SET_BIT(PORTA,pin_num);
     d6a:	ab e3       	ldi	r26, 0x3B	; 59
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	eb e3       	ldi	r30, 0x3B	; 59
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	48 2f       	mov	r20, r24
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 2e       	mov	r0, r18
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <GPIO_writePin+0x7c>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <GPIO_writePin+0x78>
     d8c:	84 2b       	or	r24, r20
     d8e:	8c 93       	st	X, r24
     d90:	98 c0       	rjmp	.+304    	; 0xec2 <GPIO_writePin+0x1b6>
		}
		else
		{
			CLEAR_BIT(PORTA,pin_num);
     d92:	ab e3       	ldi	r26, 0x3B	; 59
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	eb e3       	ldi	r30, 0x3B	; 59
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 2e       	mov	r0, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <GPIO_writePin+0xa4>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <GPIO_writePin+0xa0>
     db4:	80 95       	com	r24
     db6:	84 23       	and	r24, r20
     db8:	8c 93       	st	X, r24
     dba:	83 c0       	rjmp	.+262    	; 0xec2 <GPIO_writePin+0x1b6>
		}
		break;
	case PORTB_ID:
		if(value == LOGIC_HIGH)
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	a1 f4       	brne	.+40     	; 0xdea <GPIO_writePin+0xde>
		{
			SET_BIT(PORTB,pin_num);
     dc2:	a8 e3       	ldi	r26, 0x38	; 56
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e8 e3       	ldi	r30, 0x38	; 56
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 2e       	mov	r0, r18
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <GPIO_writePin+0xd4>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <GPIO_writePin+0xd0>
     de4:	84 2b       	or	r24, r20
     de6:	8c 93       	st	X, r24
     de8:	6c c0       	rjmp	.+216    	; 0xec2 <GPIO_writePin+0x1b6>
		}
		else
		{
			CLEAR_BIT(PORTB,pin_num);
     dea:	a8 e3       	ldi	r26, 0x38	; 56
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e8 e3       	ldi	r30, 0x38	; 56
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <GPIO_writePin+0xfc>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <GPIO_writePin+0xf8>
     e0c:	80 95       	com	r24
     e0e:	84 23       	and	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	57 c0       	rjmp	.+174    	; 0xec2 <GPIO_writePin+0x1b6>
		}
		break;
	case PORTC_ID:
		if(value == LOGIC_HIGH)
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	a1 f4       	brne	.+40     	; 0xe42 <GPIO_writePin+0x136>
		{
			SET_BIT(PORTC,pin_num);
     e1a:	a5 e3       	ldi	r26, 0x35	; 53
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e5 e3       	ldi	r30, 0x35	; 53
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <GPIO_writePin+0x12c>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <GPIO_writePin+0x128>
     e3c:	84 2b       	or	r24, r20
     e3e:	8c 93       	st	X, r24
     e40:	40 c0       	rjmp	.+128    	; 0xec2 <GPIO_writePin+0x1b6>
		}
		else
		{
			CLEAR_BIT(PORTC,pin_num);
     e42:	a5 e3       	ldi	r26, 0x35	; 53
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e5 e3       	ldi	r30, 0x35	; 53
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	48 2f       	mov	r20, r24
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	02 2e       	mov	r0, r18
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <GPIO_writePin+0x154>
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	0a 94       	dec	r0
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <GPIO_writePin+0x150>
     e64:	80 95       	com	r24
     e66:	84 23       	and	r24, r20
     e68:	8c 93       	st	X, r24
     e6a:	2b c0       	rjmp	.+86     	; 0xec2 <GPIO_writePin+0x1b6>
		}
		break;
	case PORTD_ID:
		if(value == LOGIC_HIGH)
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	a1 f4       	brne	.+40     	; 0xe9a <GPIO_writePin+0x18e>
		{
			SET_BIT(PORTD,pin_num);
     e72:	a2 e3       	ldi	r26, 0x32	; 50
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e2 e3       	ldi	r30, 0x32	; 50
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 2e       	mov	r0, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <GPIO_writePin+0x184>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <GPIO_writePin+0x180>
     e94:	84 2b       	or	r24, r20
     e96:	8c 93       	st	X, r24
     e98:	14 c0       	rjmp	.+40     	; 0xec2 <GPIO_writePin+0x1b6>
		}
		else
		{
			CLEAR_BIT(PORTD,pin_num);
     e9a:	a2 e3       	ldi	r26, 0x32	; 50
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e2 e3       	ldi	r30, 0x32	; 50
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <GPIO_writePin+0x1ac>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <GPIO_writePin+0x1a8>
     ebc:	80 95       	com	r24
     ebe:	84 23       	and	r24, r20
     ec0:	8c 93       	st	X, r24
	default:
		break;
	}


}
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <GPIO_readPin+0x6>
     ed8:	00 d0       	rcall	.+0      	; 0xeda <GPIO_readPin+0x8>
     eda:	0f 92       	push	r0
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	8a 83       	std	Y+2, r24	; 0x02
     ee2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 temp;
	/* Setup the pin direction as required */
	switch(port_num)
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	3d 83       	std	Y+5, r19	; 0x05
     eec:	2c 83       	std	Y+4, r18	; 0x04
     eee:	4c 81       	ldd	r20, Y+4	; 0x04
     ef0:	5d 81       	ldd	r21, Y+5	; 0x05
     ef2:	41 30       	cpi	r20, 0x01	; 1
     ef4:	51 05       	cpc	r21, r1
     ef6:	41 f1       	breq	.+80     	; 0xf48 <GPIO_readPin+0x76>
     ef8:	8c 81       	ldd	r24, Y+4	; 0x04
     efa:	9d 81       	ldd	r25, Y+5	; 0x05
     efc:	82 30       	cpi	r24, 0x02	; 2
     efe:	91 05       	cpc	r25, r1
     f00:	34 f4       	brge	.+12     	; 0xf0e <GPIO_readPin+0x3c>
     f02:	2c 81       	ldd	r18, Y+4	; 0x04
     f04:	3d 81       	ldd	r19, Y+5	; 0x05
     f06:	21 15       	cp	r18, r1
     f08:	31 05       	cpc	r19, r1
     f0a:	61 f0       	breq	.+24     	; 0xf24 <GPIO_readPin+0x52>
     f0c:	53 c0       	rjmp	.+166    	; 0xfb4 <GPIO_readPin+0xe2>
     f0e:	4c 81       	ldd	r20, Y+4	; 0x04
     f10:	5d 81       	ldd	r21, Y+5	; 0x05
     f12:	42 30       	cpi	r20, 0x02	; 2
     f14:	51 05       	cpc	r21, r1
     f16:	51 f1       	breq	.+84     	; 0xf6c <GPIO_readPin+0x9a>
     f18:	8c 81       	ldd	r24, Y+4	; 0x04
     f1a:	9d 81       	ldd	r25, Y+5	; 0x05
     f1c:	83 30       	cpi	r24, 0x03	; 3
     f1e:	91 05       	cpc	r25, r1
     f20:	b9 f1       	breq	.+110    	; 0xf90 <GPIO_readPin+0xbe>
     f22:	48 c0       	rjmp	.+144    	; 0xfb4 <GPIO_readPin+0xe2>
	{
	case PORTA_ID:
		temp = CHECK_BIT(PINA,pin_num);
     f24:	e9 e3       	ldi	r30, 0x39	; 57
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	88 2f       	mov	r24, r24
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	a9 01       	movw	r20, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <GPIO_readPin+0x6a>
     f38:	55 95       	asr	r21
     f3a:	47 95       	ror	r20
     f3c:	8a 95       	dec	r24
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <GPIO_readPin+0x66>
     f40:	ca 01       	movw	r24, r20
     f42:	81 70       	andi	r24, 0x01	; 1
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	37 c0       	rjmp	.+110    	; 0xfb6 <GPIO_readPin+0xe4>
		break;
	case PORTB_ID:
		temp = CHECK_BIT(PINB,pin_num);
     f48:	e6 e3       	ldi	r30, 0x36	; 54
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	88 2f       	mov	r24, r24
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a9 01       	movw	r20, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <GPIO_readPin+0x8e>
     f5c:	55 95       	asr	r21
     f5e:	47 95       	ror	r20
     f60:	8a 95       	dec	r24
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <GPIO_readPin+0x8a>
     f64:	ca 01       	movw	r24, r20
     f66:	81 70       	andi	r24, 0x01	; 1
     f68:	89 83       	std	Y+1, r24	; 0x01
     f6a:	25 c0       	rjmp	.+74     	; 0xfb6 <GPIO_readPin+0xe4>
		break;
	case PORTC_ID:
		temp = CHECK_BIT(PINC,pin_num);
     f6c:	e3 e3       	ldi	r30, 0x33	; 51
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	88 2f       	mov	r24, r24
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	a9 01       	movw	r20, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <GPIO_readPin+0xb2>
     f80:	55 95       	asr	r21
     f82:	47 95       	ror	r20
     f84:	8a 95       	dec	r24
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <GPIO_readPin+0xae>
     f88:	ca 01       	movw	r24, r20
     f8a:	81 70       	andi	r24, 0x01	; 1
     f8c:	89 83       	std	Y+1, r24	; 0x01
     f8e:	13 c0       	rjmp	.+38     	; 0xfb6 <GPIO_readPin+0xe4>
		break;
	case PORTD_ID:
		temp = CHECK_BIT(PIND,pin_num);
     f90:	e0 e3       	ldi	r30, 0x30	; 48
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	a9 01       	movw	r20, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <GPIO_readPin+0xd6>
     fa4:	55 95       	asr	r21
     fa6:	47 95       	ror	r20
     fa8:	8a 95       	dec	r24
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <GPIO_readPin+0xd2>
     fac:	ca 01       	movw	r24, r20
     fae:	81 70       	andi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <GPIO_readPin+0xe4>
		break;
	default:
		temp = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return temp;
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	00 d0       	rcall	.+0      	; 0xfce <GPIO_setupPortDirection+0x6>
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <GPIO_setupPortDirection+0x8>
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	/* Setup the port direction as required */
	switch(port_num)
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	3c 83       	std	Y+4, r19	; 0x04
     fe0:	2b 83       	std	Y+3, r18	; 0x03
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	9c 81       	ldd	r25, Y+4	; 0x04
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	91 05       	cpc	r25, r1
     fea:	d1 f0       	breq	.+52     	; 0x1020 <GPIO_setupPortDirection+0x58>
     fec:	2b 81       	ldd	r18, Y+3	; 0x03
     fee:	3c 81       	ldd	r19, Y+4	; 0x04
     ff0:	22 30       	cpi	r18, 0x02	; 2
     ff2:	31 05       	cpc	r19, r1
     ff4:	2c f4       	brge	.+10     	; 0x1000 <GPIO_setupPortDirection+0x38>
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	61 f0       	breq	.+24     	; 0x1016 <GPIO_setupPortDirection+0x4e>
     ffe:	1e c0       	rjmp	.+60     	; 0x103c <GPIO_setupPortDirection+0x74>
    1000:	2b 81       	ldd	r18, Y+3	; 0x03
    1002:	3c 81       	ldd	r19, Y+4	; 0x04
    1004:	22 30       	cpi	r18, 0x02	; 2
    1006:	31 05       	cpc	r19, r1
    1008:	81 f0       	breq	.+32     	; 0x102a <GPIO_setupPortDirection+0x62>
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	9c 81       	ldd	r25, Y+4	; 0x04
    100e:	83 30       	cpi	r24, 0x03	; 3
    1010:	91 05       	cpc	r25, r1
    1012:	81 f0       	breq	.+32     	; 0x1034 <GPIO_setupPortDirection+0x6c>
    1014:	13 c0       	rjmp	.+38     	; 0x103c <GPIO_setupPortDirection+0x74>
	{
	case PORTA_ID:
		DDRA = direction;
    1016:	ea e3       	ldi	r30, 0x3A	; 58
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	80 83       	st	Z, r24
    101e:	0e c0       	rjmp	.+28     	; 0x103c <GPIO_setupPortDirection+0x74>
		break;
	case PORTB_ID:
		DDRB = direction;
    1020:	e7 e3       	ldi	r30, 0x37	; 55
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	80 83       	st	Z, r24
    1028:	09 c0       	rjmp	.+18     	; 0x103c <GPIO_setupPortDirection+0x74>
		break;
	case PORTC_ID:
		DDRC = direction;
    102a:	e4 e3       	ldi	r30, 0x34	; 52
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	80 83       	st	Z, r24
    1032:	04 c0       	rjmp	.+8      	; 0x103c <GPIO_setupPortDirection+0x74>
		break;
	case PORTD_ID:
		DDRD = direction;
    1034:	e1 e3       	ldi	r30, 0x31	; 49
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <GPIO_writePort+0x6>
    1050:	00 d0       	rcall	.+0      	; 0x1052 <GPIO_writePort+0x8>
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	6a 83       	std	Y+2, r22	; 0x02

	/* Setup the port direction as required */
	switch(port_num)
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	3c 83       	std	Y+4, r19	; 0x04
    1062:	2b 83       	std	Y+3, r18	; 0x03
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	91 05       	cpc	r25, r1
    106c:	d1 f0       	breq	.+52     	; 0x10a2 <GPIO_writePort+0x58>
    106e:	2b 81       	ldd	r18, Y+3	; 0x03
    1070:	3c 81       	ldd	r19, Y+4	; 0x04
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	2c f4       	brge	.+10     	; 0x1082 <GPIO_writePort+0x38>
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	61 f0       	breq	.+24     	; 0x1098 <GPIO_writePort+0x4e>
    1080:	1e c0       	rjmp	.+60     	; 0x10be <GPIO_writePort+0x74>
    1082:	2b 81       	ldd	r18, Y+3	; 0x03
    1084:	3c 81       	ldd	r19, Y+4	; 0x04
    1086:	22 30       	cpi	r18, 0x02	; 2
    1088:	31 05       	cpc	r19, r1
    108a:	81 f0       	breq	.+32     	; 0x10ac <GPIO_writePort+0x62>
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	83 30       	cpi	r24, 0x03	; 3
    1092:	91 05       	cpc	r25, r1
    1094:	81 f0       	breq	.+32     	; 0x10b6 <GPIO_writePort+0x6c>
    1096:	13 c0       	rjmp	.+38     	; 0x10be <GPIO_writePort+0x74>
	{
	case PORTA_ID:
		PORTA = value;
    1098:	eb e3       	ldi	r30, 0x3B	; 59
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	80 83       	st	Z, r24
    10a0:	0e c0       	rjmp	.+28     	; 0x10be <GPIO_writePort+0x74>
		break;
	case PORTB_ID:
		PORTB = value;
    10a2:	e8 e3       	ldi	r30, 0x38	; 56
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	80 83       	st	Z, r24
    10aa:	09 c0       	rjmp	.+18     	; 0x10be <GPIO_writePort+0x74>
		break;
	case PORTC_ID:
		PORTC = value;
    10ac:	e5 e3       	ldi	r30, 0x35	; 53
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	80 83       	st	Z, r24
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <GPIO_writePort+0x74>
		break;
	case PORTD_ID:
		PORTD = value;
    10b6:	e2 e3       	ldi	r30, 0x32	; 50
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	80 83       	st	Z, r24
		break;
	}
}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <GPIO_readPort+0x6>
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <GPIO_readPort+0x8>
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 temp;
	/* Setup the port direction as required */
	switch(port_num)
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	3c 83       	std	Y+4, r19	; 0x04
    10e2:	2b 83       	std	Y+3, r18	; 0x03
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	91 05       	cpc	r25, r1
    10ec:	d1 f0       	breq	.+52     	; 0x1122 <GPIO_readPort+0x56>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	2c f4       	brge	.+10     	; 0x1102 <GPIO_readPort+0x36>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	61 f0       	breq	.+24     	; 0x1118 <GPIO_readPort+0x4c>
    1100:	1f c0       	rjmp	.+62     	; 0x1140 <GPIO_readPort+0x74>
    1102:	2b 81       	ldd	r18, Y+3	; 0x03
    1104:	3c 81       	ldd	r19, Y+4	; 0x04
    1106:	22 30       	cpi	r18, 0x02	; 2
    1108:	31 05       	cpc	r19, r1
    110a:	81 f0       	breq	.+32     	; 0x112c <GPIO_readPort+0x60>
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	9c 81       	ldd	r25, Y+4	; 0x04
    1110:	83 30       	cpi	r24, 0x03	; 3
    1112:	91 05       	cpc	r25, r1
    1114:	81 f0       	breq	.+32     	; 0x1136 <GPIO_readPort+0x6a>
    1116:	14 c0       	rjmp	.+40     	; 0x1140 <GPIO_readPort+0x74>
	{
	case PORTA_ID:
		temp = PINA;
    1118:	e9 e3       	ldi	r30, 0x39	; 57
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	89 83       	std	Y+1, r24	; 0x01
    1120:	10 c0       	rjmp	.+32     	; 0x1142 <GPIO_readPort+0x76>
		break;
	case PORTB_ID:
		temp = PINB;
    1122:	e6 e3       	ldi	r30, 0x36	; 54
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	0b c0       	rjmp	.+22     	; 0x1142 <GPIO_readPort+0x76>
		break;
	case PORTC_ID:
		temp = PINC;
    112c:	e3 e3       	ldi	r30, 0x33	; 51
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	06 c0       	rjmp	.+12     	; 0x1142 <GPIO_readPort+0x76>
		break;
	case PORTD_ID:
		temp = PIND;
    1136:	e0 e3       	ldi	r30, 0x30	; 48
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	01 c0       	rjmp	.+2      	; 0x1142 <GPIO_readPort+0x76>
		break;
	default:
		temp = 0x0;
    1140:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return temp;
    1142:	89 81       	ldd	r24, Y+1	; 0x01
}
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <APP_openDoor>:
 * Display "Opening..." for 15 seconds
 * Display "STOPPED" for 3 seconds
 * Display "Closing..." for 15 seconds
 */
void APP_openDoor(void)
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    115a:	80 91 29 01 	lds	r24, 0x0129
    115e:	8f 5f       	subi	r24, 0xFF	; 255
    1160:	80 93 29 01 	sts	0x0129, r24
	if(g_ticks == 1)
    1164:	80 91 29 01 	lds	r24, 0x0129
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	39 f4       	brne	.+14     	; 0x117a <APP_openDoor+0x28>
	{
		LCD_clearScreen();
    116c:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <LCD_clearScreen>
		LCD_displayString("Opening...");
    1170:	80 e6       	ldi	r24, 0x60	; 96
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_displayString>
    1178:	23 c0       	rjmp	.+70     	; 0x11c0 <APP_openDoor+0x6e>
	}
	else if(g_ticks == 15)
    117a:	80 91 29 01 	lds	r24, 0x0129
    117e:	8f 30       	cpi	r24, 0x0F	; 15
    1180:	39 f4       	brne	.+14     	; 0x1190 <APP_openDoor+0x3e>
	{
		LCD_clearScreen();
    1182:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <LCD_clearScreen>
		LCD_displayString("STOPPED");
    1186:	8b e6       	ldi	r24, 0x6B	; 107
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_displayString>
    118e:	18 c0       	rjmp	.+48     	; 0x11c0 <APP_openDoor+0x6e>
	}
	else if(g_ticks == 18)
    1190:	80 91 29 01 	lds	r24, 0x0129
    1194:	82 31       	cpi	r24, 0x12	; 18
    1196:	39 f4       	brne	.+14     	; 0x11a6 <APP_openDoor+0x54>
	{
		LCD_clearScreen();
    1198:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <LCD_clearScreen>
		LCD_displayString("Closing...");
    119c:	83 e7       	ldi	r24, 0x73	; 115
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_displayString>
    11a4:	0d c0       	rjmp	.+26     	; 0x11c0 <APP_openDoor+0x6e>
	}
	else if(g_ticks == 33)
    11a6:	80 91 29 01 	lds	r24, 0x0129
    11aa:	81 32       	cpi	r24, 0x21	; 33
    11ac:	49 f4       	brne	.+18     	; 0x11c0 <APP_openDoor+0x6e>
	{
		/* Reset the ticks when done */
		g_ticks = 0;
    11ae:	10 92 29 01 	sts	0x0129, r1
		/* Clear the flag when done */
		term_flag = 0;
    11b2:	10 92 2a 01 	sts	0x012A, r1
		LCD_clearScreen();
    11b6:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <LCD_clearScreen>
		/* De-initialize the timer when done */
		Timer_deInit(TIMER1_ID);
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <Timer_deInit>
	}
}
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <APP_getThePin>:

/* Function to create a new Pin and verifying it once to
 * send it MC2 to be stored in the EEPROM
 */
void APP_getThePin(void)
{
    11c6:	0f 93       	push	r16
    11c8:	1f 93       	push	r17
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	c2 55       	subi	r28, 0x52	; 82
    11d4:	d0 40       	sbci	r29, 0x00	; 0
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
	uint8 re_pin[5];
	uint8 i;
	/* Flag to indicate whether the pin entered is right or wrong */
	uint8 flag;
	do{
		LCD_displayString("Enter new PIN:");
    11e0:	8e e7       	ldi	r24, 0x7E	; 126
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_displayString>
		/* Get the 5 numbers pin from the user */
		for(i = 0; i < 5; i++)
    11e8:	fe 01       	movw	r30, r28
    11ea:	e8 5b       	subi	r30, 0xB8	; 184
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	10 82       	st	Z, r1
    11f0:	a8 c0       	rjmp	.+336    	; 0x1342 <APP_getThePin+0x17c>
		{
			pin[i] = KEYPAD_getPressedKey();
    11f2:	fe 01       	movw	r30, r28
    11f4:	e8 5b       	subi	r30, 0xB8	; 184
    11f6:	ff 4f       	sbci	r31, 0xFF	; 255
    11f8:	80 81       	ld	r24, Z
    11fa:	08 2f       	mov	r16, r24
    11fc:	10 e0       	ldi	r17, 0x00	; 0
    11fe:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <KEYPAD_getPressedKey>
    1202:	28 2f       	mov	r18, r24
    1204:	ce 01       	movw	r24, r28
    1206:	87 5b       	subi	r24, 0xB7	; 183
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	fc 01       	movw	r30, r24
    120c:	e0 0f       	add	r30, r16
    120e:	f1 1f       	adc	r31, r17
    1210:	20 83       	st	Z, r18
    1212:	fe 01       	movw	r30, r28
    1214:	ed 5b       	subi	r30, 0xBD	; 189
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	aa ef       	ldi	r26, 0xFA	; 250
    121e:	b3 e4       	ldi	r27, 0x43	; 67
    1220:	80 83       	st	Z, r24
    1222:	91 83       	std	Z+1, r25	; 0x01
    1224:	a2 83       	std	Z+2, r26	; 0x02
    1226:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1228:	8e 01       	movw	r16, r28
    122a:	01 5c       	subi	r16, 0xC1	; 193
    122c:	1f 4f       	sbci	r17, 0xFF	; 255
    122e:	fe 01       	movw	r30, r28
    1230:	ed 5b       	subi	r30, 0xBD	; 189
    1232:	ff 4f       	sbci	r31, 0xFF	; 255
    1234:	60 81       	ld	r22, Z
    1236:	71 81       	ldd	r23, Z+1	; 0x01
    1238:	82 81       	ldd	r24, Z+2	; 0x02
    123a:	93 81       	ldd	r25, Z+3	; 0x03
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	4a ef       	ldi	r20, 0xFA	; 250
    1242:	54 e4       	ldi	r21, 0x44	; 68
    1244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	f8 01       	movw	r30, r16
    124e:	80 83       	st	Z, r24
    1250:	91 83       	std	Z+1, r25	; 0x01
    1252:	a2 83       	std	Z+2, r26	; 0x02
    1254:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1256:	fe 01       	movw	r30, r28
    1258:	ff 96       	adiw	r30, 0x3f	; 63
    125a:	60 81       	ld	r22, Z
    125c:	71 81       	ldd	r23, Z+1	; 0x01
    125e:	82 81       	ldd	r24, Z+2	; 0x02
    1260:	93 81       	ldd	r25, Z+3	; 0x03
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e8       	ldi	r20, 0x80	; 128
    1268:	5f e3       	ldi	r21, 0x3F	; 63
    126a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    126e:	88 23       	and	r24, r24
    1270:	2c f4       	brge	.+10     	; 0x127c <APP_getThePin+0xb6>
		__ticks = 1;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	9e af       	std	Y+62, r25	; 0x3e
    1278:	8d af       	std	Y+61, r24	; 0x3d
    127a:	46 c0       	rjmp	.+140    	; 0x1308 <APP_getThePin+0x142>
	else if (__tmp > 65535)
    127c:	fe 01       	movw	r30, r28
    127e:	ff 96       	adiw	r30, 0x3f	; 63
    1280:	60 81       	ld	r22, Z
    1282:	71 81       	ldd	r23, Z+1	; 0x01
    1284:	82 81       	ldd	r24, Z+2	; 0x02
    1286:	93 81       	ldd	r25, Z+3	; 0x03
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	3f ef       	ldi	r19, 0xFF	; 255
    128c:	4f e7       	ldi	r20, 0x7F	; 127
    128e:	57 e4       	ldi	r21, 0x47	; 71
    1290:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1294:	18 16       	cp	r1, r24
    1296:	64 f5       	brge	.+88     	; 0x12f0 <APP_getThePin+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1298:	fe 01       	movw	r30, r28
    129a:	ed 5b       	subi	r30, 0xBD	; 189
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	60 81       	ld	r22, Z
    12a0:	71 81       	ldd	r23, Z+1	; 0x01
    12a2:	82 81       	ldd	r24, Z+2	; 0x02
    12a4:	93 81       	ldd	r25, Z+3	; 0x03
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e2       	ldi	r20, 0x20	; 32
    12ac:	51 e4       	ldi	r21, 0x41	; 65
    12ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	bc 01       	movw	r22, r24
    12b8:	cd 01       	movw	r24, r26
    12ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	9e af       	std	Y+62, r25	; 0x3e
    12c4:	8d af       	std	Y+61, r24	; 0x3d
    12c6:	0f c0       	rjmp	.+30     	; 0x12e6 <APP_getThePin+0x120>
    12c8:	88 ec       	ldi	r24, 0xC8	; 200
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9c af       	std	Y+60, r25	; 0x3c
    12ce:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12d0:	8b ad       	ldd	r24, Y+59	; 0x3b
    12d2:	9c ad       	ldd	r25, Y+60	; 0x3c
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <APP_getThePin+0x10e>
    12d8:	9c af       	std	Y+60, r25	; 0x3c
    12da:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    12de:	9e ad       	ldd	r25, Y+62	; 0x3e
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	9e af       	std	Y+62, r25	; 0x3e
    12e4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    12e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	69 f7       	brne	.-38     	; 0x12c8 <APP_getThePin+0x102>
    12ee:	16 c0       	rjmp	.+44     	; 0x131c <APP_getThePin+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f0:	fe 01       	movw	r30, r28
    12f2:	ff 96       	adiw	r30, 0x3f	; 63
    12f4:	60 81       	ld	r22, Z
    12f6:	71 81       	ldd	r23, Z+1	; 0x01
    12f8:	82 81       	ldd	r24, Z+2	; 0x02
    12fa:	93 81       	ldd	r25, Z+3	; 0x03
    12fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	9e af       	std	Y+62, r25	; 0x3e
    1306:	8d af       	std	Y+61, r24	; 0x3d
    1308:	8d ad       	ldd	r24, Y+61	; 0x3d
    130a:	9e ad       	ldd	r25, Y+62	; 0x3e
    130c:	9a af       	std	Y+58, r25	; 0x3a
    130e:	89 af       	std	Y+57, r24	; 0x39
    1310:	89 ad       	ldd	r24, Y+57	; 0x39
    1312:	9a ad       	ldd	r25, Y+58	; 0x3a
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <APP_getThePin+0x14e>
    1318:	9a af       	std	Y+58, r25	; 0x3a
    131a:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(500);
			LCD_moveCursor(1, i);
    131c:	fe 01       	movw	r30, r28
    131e:	e8 5b       	subi	r30, 0xB8	; 184
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	60 81       	ld	r22, Z
    1326:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_moveCursor>
			LCD_displayCharacter('*');
    132a:	8a e2       	ldi	r24, 0x2A	; 42
    132c:	0e 94 48 12 	call	0x2490	; 0x2490 <LCD_displayCharacter>
	/* Flag to indicate whether the pin entered is right or wrong */
	uint8 flag;
	do{
		LCD_displayString("Enter new PIN:");
		/* Get the 5 numbers pin from the user */
		for(i = 0; i < 5; i++)
    1330:	de 01       	movw	r26, r28
    1332:	a8 5b       	subi	r26, 0xB8	; 184
    1334:	bf 4f       	sbci	r27, 0xFF	; 255
    1336:	fe 01       	movw	r30, r28
    1338:	e8 5b       	subi	r30, 0xB8	; 184
    133a:	ff 4f       	sbci	r31, 0xFF	; 255
    133c:	80 81       	ld	r24, Z
    133e:	8f 5f       	subi	r24, 0xFF	; 255
    1340:	8c 93       	st	X, r24
    1342:	fe 01       	movw	r30, r28
    1344:	e8 5b       	subi	r30, 0xB8	; 184
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	80 81       	ld	r24, Z
    134a:	85 30       	cpi	r24, 0x05	; 5
    134c:	08 f4       	brcc	.+2      	; 0x1350 <APP_getThePin+0x18a>
    134e:	51 cf       	rjmp	.-350    	; 0x11f2 <APP_getThePin+0x2c>
			_delay_ms(500);
			LCD_moveCursor(1, i);
			LCD_displayCharacter('*');
		}
		/* Wait until the user presses Enter */
		while(KEYPAD_getPressedKey() != 13) {}
    1350:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <KEYPAD_getPressedKey>
    1354:	8d 30       	cpi	r24, 0x0D	; 13
    1356:	e1 f7       	brne	.-8      	; 0x1350 <APP_getThePin+0x18a>
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	aa ef       	ldi	r26, 0xFA	; 250
    135e:	b3 e4       	ldi	r27, 0x43	; 67
    1360:	8d ab       	std	Y+53, r24	; 0x35
    1362:	9e ab       	std	Y+54, r25	; 0x36
    1364:	af ab       	std	Y+55, r26	; 0x37
    1366:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1368:	6d a9       	ldd	r22, Y+53	; 0x35
    136a:	7e a9       	ldd	r23, Y+54	; 0x36
    136c:	8f a9       	ldd	r24, Y+55	; 0x37
    136e:	98 ad       	ldd	r25, Y+56	; 0x38
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	4a ef       	ldi	r20, 0xFA	; 250
    1376:	54 e4       	ldi	r21, 0x44	; 68
    1378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	89 ab       	std	Y+49, r24	; 0x31
    1382:	9a ab       	std	Y+50, r25	; 0x32
    1384:	ab ab       	std	Y+51, r26	; 0x33
    1386:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1388:	69 a9       	ldd	r22, Y+49	; 0x31
    138a:	7a a9       	ldd	r23, Y+50	; 0x32
    138c:	8b a9       	ldd	r24, Y+51	; 0x33
    138e:	9c a9       	ldd	r25, Y+52	; 0x34
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	40 e8       	ldi	r20, 0x80	; 128
    1396:	5f e3       	ldi	r21, 0x3F	; 63
    1398:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    139c:	88 23       	and	r24, r24
    139e:	2c f4       	brge	.+10     	; 0x13aa <APP_getThePin+0x1e4>
		__ticks = 1;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	98 ab       	std	Y+48, r25	; 0x30
    13a6:	8f a7       	std	Y+47, r24	; 0x2f
    13a8:	3f c0       	rjmp	.+126    	; 0x1428 <APP_getThePin+0x262>
	else if (__tmp > 65535)
    13aa:	69 a9       	ldd	r22, Y+49	; 0x31
    13ac:	7a a9       	ldd	r23, Y+50	; 0x32
    13ae:	8b a9       	ldd	r24, Y+51	; 0x33
    13b0:	9c a9       	ldd	r25, Y+52	; 0x34
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	3f ef       	ldi	r19, 0xFF	; 255
    13b6:	4f e7       	ldi	r20, 0x7F	; 127
    13b8:	57 e4       	ldi	r21, 0x47	; 71
    13ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13be:	18 16       	cp	r1, r24
    13c0:	4c f5       	brge	.+82     	; 0x1414 <APP_getThePin+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c2:	6d a9       	ldd	r22, Y+53	; 0x35
    13c4:	7e a9       	ldd	r23, Y+54	; 0x36
    13c6:	8f a9       	ldd	r24, Y+55	; 0x37
    13c8:	98 ad       	ldd	r25, Y+56	; 0x38
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e2       	ldi	r20, 0x20	; 32
    13d0:	51 e4       	ldi	r21, 0x41	; 65
    13d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	bc 01       	movw	r22, r24
    13dc:	cd 01       	movw	r24, r26
    13de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	98 ab       	std	Y+48, r25	; 0x30
    13e8:	8f a7       	std	Y+47, r24	; 0x2f
    13ea:	0f c0       	rjmp	.+30     	; 0x140a <APP_getThePin+0x244>
    13ec:	88 ec       	ldi	r24, 0xC8	; 200
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	9e a7       	std	Y+46, r25	; 0x2e
    13f2:	8d a7       	std	Y+45, r24	; 0x2d
    13f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    13f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	f1 f7       	brne	.-4      	; 0x13f8 <APP_getThePin+0x232>
    13fc:	9e a7       	std	Y+46, r25	; 0x2e
    13fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1400:	8f a5       	ldd	r24, Y+47	; 0x2f
    1402:	98 a9       	ldd	r25, Y+48	; 0x30
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	98 ab       	std	Y+48, r25	; 0x30
    1408:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140a:	8f a5       	ldd	r24, Y+47	; 0x2f
    140c:	98 a9       	ldd	r25, Y+48	; 0x30
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	69 f7       	brne	.-38     	; 0x13ec <APP_getThePin+0x226>
    1412:	14 c0       	rjmp	.+40     	; 0x143c <APP_getThePin+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1414:	69 a9       	ldd	r22, Y+49	; 0x31
    1416:	7a a9       	ldd	r23, Y+50	; 0x32
    1418:	8b a9       	ldd	r24, Y+51	; 0x33
    141a:	9c a9       	ldd	r25, Y+52	; 0x34
    141c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	98 ab       	std	Y+48, r25	; 0x30
    1426:	8f a7       	std	Y+47, r24	; 0x2f
    1428:	8f a5       	ldd	r24, Y+47	; 0x2f
    142a:	98 a9       	ldd	r25, Y+48	; 0x30
    142c:	9c a7       	std	Y+44, r25	; 0x2c
    142e:	8b a7       	std	Y+43, r24	; 0x2b
    1430:	8b a5       	ldd	r24, Y+43	; 0x2b
    1432:	9c a5       	ldd	r25, Y+44	; 0x2c
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	f1 f7       	brne	.-4      	; 0x1434 <APP_getThePin+0x26e>
    1438:	9c a7       	std	Y+44, r25	; 0x2c
    143a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);
		LCD_clearScreen();
    143c:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <LCD_clearScreen>
		LCD_displayString("Re-enter the PIN:");
    1440:	8d e8       	ldi	r24, 0x8D	; 141
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_displayString>
		/* Re-take the pin from the user to verify it */
		for(i = 0; i < 5; i++)
    1448:	fe 01       	movw	r30, r28
    144a:	e8 5b       	subi	r30, 0xB8	; 184
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	10 82       	st	Z, r1
    1450:	95 c0       	rjmp	.+298    	; 0x157c <APP_getThePin+0x3b6>
		{
			re_pin[i] = KEYPAD_getPressedKey();
    1452:	fe 01       	movw	r30, r28
    1454:	e8 5b       	subi	r30, 0xB8	; 184
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	80 81       	ld	r24, Z
    145a:	08 2f       	mov	r16, r24
    145c:	10 e0       	ldi	r17, 0x00	; 0
    145e:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <KEYPAD_getPressedKey>
    1462:	28 2f       	mov	r18, r24
    1464:	ce 01       	movw	r24, r28
    1466:	82 5b       	subi	r24, 0xB2	; 178
    1468:	9f 4f       	sbci	r25, 0xFF	; 255
    146a:	fc 01       	movw	r30, r24
    146c:	e0 0f       	add	r30, r16
    146e:	f1 1f       	adc	r31, r17
    1470:	20 83       	st	Z, r18
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	aa ef       	ldi	r26, 0xFA	; 250
    1478:	b3 e4       	ldi	r27, 0x43	; 67
    147a:	8f a3       	std	Y+39, r24	; 0x27
    147c:	98 a7       	std	Y+40, r25	; 0x28
    147e:	a9 a7       	std	Y+41, r26	; 0x29
    1480:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1482:	6f a1       	ldd	r22, Y+39	; 0x27
    1484:	78 a5       	ldd	r23, Y+40	; 0x28
    1486:	89 a5       	ldd	r24, Y+41	; 0x29
    1488:	9a a5       	ldd	r25, Y+42	; 0x2a
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	4a ef       	ldi	r20, 0xFA	; 250
    1490:	54 e4       	ldi	r21, 0x44	; 68
    1492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	8b a3       	std	Y+35, r24	; 0x23
    149c:	9c a3       	std	Y+36, r25	; 0x24
    149e:	ad a3       	std	Y+37, r26	; 0x25
    14a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14a2:	6b a1       	ldd	r22, Y+35	; 0x23
    14a4:	7c a1       	ldd	r23, Y+36	; 0x24
    14a6:	8d a1       	ldd	r24, Y+37	; 0x25
    14a8:	9e a1       	ldd	r25, Y+38	; 0x26
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e8       	ldi	r20, 0x80	; 128
    14b0:	5f e3       	ldi	r21, 0x3F	; 63
    14b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b6:	88 23       	and	r24, r24
    14b8:	2c f4       	brge	.+10     	; 0x14c4 <APP_getThePin+0x2fe>
		__ticks = 1;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	9a a3       	std	Y+34, r25	; 0x22
    14c0:	89 a3       	std	Y+33, r24	; 0x21
    14c2:	3f c0       	rjmp	.+126    	; 0x1542 <APP_getThePin+0x37c>
	else if (__tmp > 65535)
    14c4:	6b a1       	ldd	r22, Y+35	; 0x23
    14c6:	7c a1       	ldd	r23, Y+36	; 0x24
    14c8:	8d a1       	ldd	r24, Y+37	; 0x25
    14ca:	9e a1       	ldd	r25, Y+38	; 0x26
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	3f ef       	ldi	r19, 0xFF	; 255
    14d0:	4f e7       	ldi	r20, 0x7F	; 127
    14d2:	57 e4       	ldi	r21, 0x47	; 71
    14d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d8:	18 16       	cp	r1, r24
    14da:	4c f5       	brge	.+82     	; 0x152e <APP_getThePin+0x368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14dc:	6f a1       	ldd	r22, Y+39	; 0x27
    14de:	78 a5       	ldd	r23, Y+40	; 0x28
    14e0:	89 a5       	ldd	r24, Y+41	; 0x29
    14e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e2       	ldi	r20, 0x20	; 32
    14ea:	51 e4       	ldi	r21, 0x41	; 65
    14ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	9a a3       	std	Y+34, r25	; 0x22
    1502:	89 a3       	std	Y+33, r24	; 0x21
    1504:	0f c0       	rjmp	.+30     	; 0x1524 <APP_getThePin+0x35e>
    1506:	88 ec       	ldi	r24, 0xC8	; 200
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	98 a3       	std	Y+32, r25	; 0x20
    150c:	8f 8f       	std	Y+31, r24	; 0x1f
    150e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1510:	98 a1       	ldd	r25, Y+32	; 0x20
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	f1 f7       	brne	.-4      	; 0x1512 <APP_getThePin+0x34c>
    1516:	98 a3       	std	Y+32, r25	; 0x20
    1518:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151a:	89 a1       	ldd	r24, Y+33	; 0x21
    151c:	9a a1       	ldd	r25, Y+34	; 0x22
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	9a a3       	std	Y+34, r25	; 0x22
    1522:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1524:	89 a1       	ldd	r24, Y+33	; 0x21
    1526:	9a a1       	ldd	r25, Y+34	; 0x22
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	69 f7       	brne	.-38     	; 0x1506 <APP_getThePin+0x340>
    152c:	14 c0       	rjmp	.+40     	; 0x1556 <APP_getThePin+0x390>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152e:	6b a1       	ldd	r22, Y+35	; 0x23
    1530:	7c a1       	ldd	r23, Y+36	; 0x24
    1532:	8d a1       	ldd	r24, Y+37	; 0x25
    1534:	9e a1       	ldd	r25, Y+38	; 0x26
    1536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	9a a3       	std	Y+34, r25	; 0x22
    1540:	89 a3       	std	Y+33, r24	; 0x21
    1542:	89 a1       	ldd	r24, Y+33	; 0x21
    1544:	9a a1       	ldd	r25, Y+34	; 0x22
    1546:	9e 8f       	std	Y+30, r25	; 0x1e
    1548:	8d 8f       	std	Y+29, r24	; 0x1d
    154a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    154c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	f1 f7       	brne	.-4      	; 0x154e <APP_getThePin+0x388>
    1552:	9e 8f       	std	Y+30, r25	; 0x1e
    1554:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			LCD_moveCursor(1, i);
    1556:	fe 01       	movw	r30, r28
    1558:	e8 5b       	subi	r30, 0xB8	; 184
    155a:	ff 4f       	sbci	r31, 0xFF	; 255
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	60 81       	ld	r22, Z
    1560:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_moveCursor>
			LCD_displayCharacter('*');
    1564:	8a e2       	ldi	r24, 0x2A	; 42
    1566:	0e 94 48 12 	call	0x2490	; 0x2490 <LCD_displayCharacter>
		while(KEYPAD_getPressedKey() != 13) {}
		_delay_ms(500);
		LCD_clearScreen();
		LCD_displayString("Re-enter the PIN:");
		/* Re-take the pin from the user to verify it */
		for(i = 0; i < 5; i++)
    156a:	de 01       	movw	r26, r28
    156c:	a8 5b       	subi	r26, 0xB8	; 184
    156e:	bf 4f       	sbci	r27, 0xFF	; 255
    1570:	fe 01       	movw	r30, r28
    1572:	e8 5b       	subi	r30, 0xB8	; 184
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	80 81       	ld	r24, Z
    1578:	8f 5f       	subi	r24, 0xFF	; 255
    157a:	8c 93       	st	X, r24
    157c:	fe 01       	movw	r30, r28
    157e:	e8 5b       	subi	r30, 0xB8	; 184
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	80 81       	ld	r24, Z
    1584:	85 30       	cpi	r24, 0x05	; 5
    1586:	08 f4       	brcc	.+2      	; 0x158a <APP_getThePin+0x3c4>
    1588:	64 cf       	rjmp	.-312    	; 0x1452 <APP_getThePin+0x28c>
			re_pin[i] = KEYPAD_getPressedKey();
			_delay_ms(500);
			LCD_moveCursor(1, i);
			LCD_displayCharacter('*');
		}
		while(KEYPAD_getPressedKey() != 13) {}
    158a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <KEYPAD_getPressedKey>
    158e:	8d 30       	cpi	r24, 0x0D	; 13
    1590:	e1 f7       	brne	.-8      	; 0x158a <APP_getThePin+0x3c4>
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	aa ef       	ldi	r26, 0xFA	; 250
    1598:	b3 e4       	ldi	r27, 0x43	; 67
    159a:	89 8f       	std	Y+25, r24	; 0x19
    159c:	9a 8f       	std	Y+26, r25	; 0x1a
    159e:	ab 8f       	std	Y+27, r26	; 0x1b
    15a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a2:	69 8d       	ldd	r22, Y+25	; 0x19
    15a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	4a ef       	ldi	r20, 0xFA	; 250
    15b0:	54 e4       	ldi	r21, 0x44	; 68
    15b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	8d 8b       	std	Y+21, r24	; 0x15
    15bc:	9e 8b       	std	Y+22, r25	; 0x16
    15be:	af 8b       	std	Y+23, r26	; 0x17
    15c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15c2:	6d 89       	ldd	r22, Y+21	; 0x15
    15c4:	7e 89       	ldd	r23, Y+22	; 0x16
    15c6:	8f 89       	ldd	r24, Y+23	; 0x17
    15c8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e8       	ldi	r20, 0x80	; 128
    15d0:	5f e3       	ldi	r21, 0x3F	; 63
    15d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15d6:	88 23       	and	r24, r24
    15d8:	2c f4       	brge	.+10     	; 0x15e4 <APP_getThePin+0x41e>
		__ticks = 1;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	9c 8b       	std	Y+20, r25	; 0x14
    15e0:	8b 8b       	std	Y+19, r24	; 0x13
    15e2:	3f c0       	rjmp	.+126    	; 0x1662 <APP_getThePin+0x49c>
	else if (__tmp > 65535)
    15e4:	6d 89       	ldd	r22, Y+21	; 0x15
    15e6:	7e 89       	ldd	r23, Y+22	; 0x16
    15e8:	8f 89       	ldd	r24, Y+23	; 0x17
    15ea:	98 8d       	ldd	r25, Y+24	; 0x18
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	3f ef       	ldi	r19, 0xFF	; 255
    15f0:	4f e7       	ldi	r20, 0x7F	; 127
    15f2:	57 e4       	ldi	r21, 0x47	; 71
    15f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15f8:	18 16       	cp	r1, r24
    15fa:	4c f5       	brge	.+82     	; 0x164e <APP_getThePin+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fc:	69 8d       	ldd	r22, Y+25	; 0x19
    15fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1600:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1602:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e2       	ldi	r20, 0x20	; 32
    160a:	51 e4       	ldi	r21, 0x41	; 65
    160c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	9c 8b       	std	Y+20, r25	; 0x14
    1622:	8b 8b       	std	Y+19, r24	; 0x13
    1624:	0f c0       	rjmp	.+30     	; 0x1644 <APP_getThePin+0x47e>
    1626:	88 ec       	ldi	r24, 0xC8	; 200
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	9a 8b       	std	Y+18, r25	; 0x12
    162c:	89 8b       	std	Y+17, r24	; 0x11
    162e:	89 89       	ldd	r24, Y+17	; 0x11
    1630:	9a 89       	ldd	r25, Y+18	; 0x12
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <APP_getThePin+0x46c>
    1636:	9a 8b       	std	Y+18, r25	; 0x12
    1638:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163a:	8b 89       	ldd	r24, Y+19	; 0x13
    163c:	9c 89       	ldd	r25, Y+20	; 0x14
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	9c 8b       	std	Y+20, r25	; 0x14
    1642:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1644:	8b 89       	ldd	r24, Y+19	; 0x13
    1646:	9c 89       	ldd	r25, Y+20	; 0x14
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	69 f7       	brne	.-38     	; 0x1626 <APP_getThePin+0x460>
    164c:	14 c0       	rjmp	.+40     	; 0x1676 <APP_getThePin+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164e:	6d 89       	ldd	r22, Y+21	; 0x15
    1650:	7e 89       	ldd	r23, Y+22	; 0x16
    1652:	8f 89       	ldd	r24, Y+23	; 0x17
    1654:	98 8d       	ldd	r25, Y+24	; 0x18
    1656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	9c 8b       	std	Y+20, r25	; 0x14
    1660:	8b 8b       	std	Y+19, r24	; 0x13
    1662:	8b 89       	ldd	r24, Y+19	; 0x13
    1664:	9c 89       	ldd	r25, Y+20	; 0x14
    1666:	98 8b       	std	Y+16, r25	; 0x10
    1668:	8f 87       	std	Y+15, r24	; 0x0f
    166a:	8f 85       	ldd	r24, Y+15	; 0x0f
    166c:	98 89       	ldd	r25, Y+16	; 0x10
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <APP_getThePin+0x4a8>
    1672:	98 8b       	std	Y+16, r25	; 0x10
    1674:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		LCD_clearScreen();
    1676:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <LCD_clearScreen>
		/* Compare the entered pin in the two times */
		for(i = 0; i < 5; i++)
    167a:	fe 01       	movw	r30, r28
    167c:	e8 5b       	subi	r30, 0xB8	; 184
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	10 82       	st	Z, r1
    1682:	2f c0       	rjmp	.+94     	; 0x16e2 <APP_getThePin+0x51c>
		{
			if(pin[i] != re_pin[i])
    1684:	fe 01       	movw	r30, r28
    1686:	e8 5b       	subi	r30, 0xB8	; 184
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	80 81       	ld	r24, Z
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	ce 01       	movw	r24, r28
    1692:	87 5b       	subi	r24, 0xB7	; 183
    1694:	9f 4f       	sbci	r25, 0xFF	; 255
    1696:	fc 01       	movw	r30, r24
    1698:	e2 0f       	add	r30, r18
    169a:	f3 1f       	adc	r31, r19
    169c:	40 81       	ld	r20, Z
    169e:	fe 01       	movw	r30, r28
    16a0:	e8 5b       	subi	r30, 0xB8	; 184
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	80 81       	ld	r24, Z
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	ce 01       	movw	r24, r28
    16ac:	82 5b       	subi	r24, 0xB2	; 178
    16ae:	9f 4f       	sbci	r25, 0xFF	; 255
    16b0:	fc 01       	movw	r30, r24
    16b2:	e2 0f       	add	r30, r18
    16b4:	f3 1f       	adc	r31, r19
    16b6:	80 81       	ld	r24, Z
    16b8:	48 17       	cp	r20, r24
    16ba:	31 f0       	breq	.+12     	; 0x16c8 <APP_getThePin+0x502>
			{
				/* Break the loop when u find a mismatch in the pin */
				flag = 1;
    16bc:	fe 01       	movw	r30, r28
    16be:	e9 5b       	subi	r30, 0xB9	; 185
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	80 83       	st	Z, r24
    16c6:	13 c0       	rjmp	.+38     	; 0x16ee <APP_getThePin+0x528>
				break;
			}
			else
			{
				flag = 0;
    16c8:	fe 01       	movw	r30, r28
    16ca:	e9 5b       	subi	r30, 0xB9	; 185
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	10 82       	st	Z, r1
		}
		while(KEYPAD_getPressedKey() != 13) {}
		_delay_ms(500);
		LCD_clearScreen();
		/* Compare the entered pin in the two times */
		for(i = 0; i < 5; i++)
    16d0:	de 01       	movw	r26, r28
    16d2:	a8 5b       	subi	r26, 0xB8	; 184
    16d4:	bf 4f       	sbci	r27, 0xFF	; 255
    16d6:	fe 01       	movw	r30, r28
    16d8:	e8 5b       	subi	r30, 0xB8	; 184
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	80 81       	ld	r24, Z
    16de:	8f 5f       	subi	r24, 0xFF	; 255
    16e0:	8c 93       	st	X, r24
    16e2:	fe 01       	movw	r30, r28
    16e4:	e8 5b       	subi	r30, 0xB8	; 184
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	80 81       	ld	r24, Z
    16ea:	85 30       	cpi	r24, 0x05	; 5
    16ec:	58 f2       	brcs	.-106    	; 0x1684 <APP_getThePin+0x4be>
			else
			{
				flag = 0;
			}
		}
		if(flag == 1)
    16ee:	fe 01       	movw	r30, r28
    16f0:	e9 5b       	subi	r30, 0xB9	; 185
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	80 81       	ld	r24, Z
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	09 f0       	breq	.+2      	; 0x16fc <APP_getThePin+0x536>
    16fa:	7f c0       	rjmp	.+254    	; 0x17fa <APP_getThePin+0x634>
		{
			LCD_displayString("PIN not matched");
    16fc:	8f e9       	ldi	r24, 0x9F	; 159
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_displayString>
			LCD_moveCursor(1, 0);
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_moveCursor>
			LCD_displayString("Try again !");
    170c:	8f ea       	ldi	r24, 0xAF	; 175
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_displayString>
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	aa e7       	ldi	r26, 0x7A	; 122
    171a:	b4 e4       	ldi	r27, 0x44	; 68
    171c:	8b 87       	std	Y+11, r24	; 0x0b
    171e:	9c 87       	std	Y+12, r25	; 0x0c
    1720:	ad 87       	std	Y+13, r26	; 0x0d
    1722:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1724:	6b 85       	ldd	r22, Y+11	; 0x0b
    1726:	7c 85       	ldd	r23, Y+12	; 0x0c
    1728:	8d 85       	ldd	r24, Y+13	; 0x0d
    172a:	9e 85       	ldd	r25, Y+14	; 0x0e
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	4a ef       	ldi	r20, 0xFA	; 250
    1732:	54 e4       	ldi	r21, 0x44	; 68
    1734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	8f 83       	std	Y+7, r24	; 0x07
    173e:	98 87       	std	Y+8, r25	; 0x08
    1740:	a9 87       	std	Y+9, r26	; 0x09
    1742:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1744:	6f 81       	ldd	r22, Y+7	; 0x07
    1746:	78 85       	ldd	r23, Y+8	; 0x08
    1748:	89 85       	ldd	r24, Y+9	; 0x09
    174a:	9a 85       	ldd	r25, Y+10	; 0x0a
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e8       	ldi	r20, 0x80	; 128
    1752:	5f e3       	ldi	r21, 0x3F	; 63
    1754:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1758:	88 23       	and	r24, r24
    175a:	2c f4       	brge	.+10     	; 0x1766 <APP_getThePin+0x5a0>
		__ticks = 1;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	9e 83       	std	Y+6, r25	; 0x06
    1762:	8d 83       	std	Y+5, r24	; 0x05
    1764:	3f c0       	rjmp	.+126    	; 0x17e4 <APP_getThePin+0x61e>
	else if (__tmp > 65535)
    1766:	6f 81       	ldd	r22, Y+7	; 0x07
    1768:	78 85       	ldd	r23, Y+8	; 0x08
    176a:	89 85       	ldd	r24, Y+9	; 0x09
    176c:	9a 85       	ldd	r25, Y+10	; 0x0a
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	3f ef       	ldi	r19, 0xFF	; 255
    1772:	4f e7       	ldi	r20, 0x7F	; 127
    1774:	57 e4       	ldi	r21, 0x47	; 71
    1776:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    177a:	18 16       	cp	r1, r24
    177c:	4c f5       	brge	.+82     	; 0x17d0 <APP_getThePin+0x60a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1780:	7c 85       	ldd	r23, Y+12	; 0x0c
    1782:	8d 85       	ldd	r24, Y+13	; 0x0d
    1784:	9e 85       	ldd	r25, Y+14	; 0x0e
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e2       	ldi	r20, 0x20	; 32
    178c:	51 e4       	ldi	r21, 0x41	; 65
    178e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	bc 01       	movw	r22, r24
    1798:	cd 01       	movw	r24, r26
    179a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9e 83       	std	Y+6, r25	; 0x06
    17a4:	8d 83       	std	Y+5, r24	; 0x05
    17a6:	0f c0       	rjmp	.+30     	; 0x17c6 <APP_getThePin+0x600>
    17a8:	88 ec       	ldi	r24, 0xC8	; 200
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9c 83       	std	Y+4, r25	; 0x04
    17ae:	8b 83       	std	Y+3, r24	; 0x03
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <APP_getThePin+0x5ee>
    17b8:	9c 83       	std	Y+4, r25	; 0x04
    17ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17bc:	8d 81       	ldd	r24, Y+5	; 0x05
    17be:	9e 81       	ldd	r25, Y+6	; 0x06
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	9e 83       	std	Y+6, r25	; 0x06
    17c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c6:	8d 81       	ldd	r24, Y+5	; 0x05
    17c8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	69 f7       	brne	.-38     	; 0x17a8 <APP_getThePin+0x5e2>
    17ce:	46 c0       	rjmp	.+140    	; 0x185c <APP_getThePin+0x696>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d0:	6f 81       	ldd	r22, Y+7	; 0x07
    17d2:	78 85       	ldd	r23, Y+8	; 0x08
    17d4:	89 85       	ldd	r24, Y+9	; 0x09
    17d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	9e 83       	std	Y+6, r25	; 0x06
    17e2:	8d 83       	std	Y+5, r24	; 0x05
    17e4:	8d 81       	ldd	r24, Y+5	; 0x05
    17e6:	9e 81       	ldd	r25, Y+6	; 0x06
    17e8:	9a 83       	std	Y+2, r25	; 0x02
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	9a 81       	ldd	r25, Y+2	; 0x02
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <APP_getThePin+0x62a>
    17f4:	9a 83       	std	Y+2, r25	; 0x02
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	31 c0       	rjmp	.+98     	; 0x185c <APP_getThePin+0x696>
		}
		/* If the flag = 0, this means that the user entered the pin correctly
		 * and that means that we have to sent the pin to MC2 to store it in
		 * the EEPROM
		 */
		else if(flag == 0)
    17fa:	fe 01       	movw	r30, r28
    17fc:	e9 5b       	subi	r30, 0xB9	; 185
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	80 81       	ld	r24, Z
    1802:	88 23       	and	r24, r24
    1804:	59 f5       	brne	.+86     	; 0x185c <APP_getThePin+0x696>
		{
			while(UART_receiveByte() != CONTROL_READY) {}
    1806:	0e 94 3e 18 	call	0x307c	; 0x307c <UART_receiveByte>
    180a:	81 33       	cpi	r24, 0x31	; 49
    180c:	e1 f7       	brne	.-8      	; 0x1806 <APP_getThePin+0x640>
			for(i = 0; i < 5; i++)
    180e:	fe 01       	movw	r30, r28
    1810:	e8 5b       	subi	r30, 0xB8	; 184
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	10 82       	st	Z, r1
    1816:	18 c0       	rjmp	.+48     	; 0x1848 <APP_getThePin+0x682>
			{
				UART_sendByte(pin[i]);
    1818:	fe 01       	movw	r30, r28
    181a:	e8 5b       	subi	r30, 0xB8	; 184
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 81       	ld	r24, Z
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	ce 01       	movw	r24, r28
    1826:	87 5b       	subi	r24, 0xB7	; 183
    1828:	9f 4f       	sbci	r25, 0xFF	; 255
    182a:	fc 01       	movw	r30, r24
    182c:	e2 0f       	add	r30, r18
    182e:	f3 1f       	adc	r31, r19
    1830:	80 81       	ld	r24, Z
    1832:	0e 94 27 18 	call	0x304e	; 0x304e <UART_sendByte>
		 * the EEPROM
		 */
		else if(flag == 0)
		{
			while(UART_receiveByte() != CONTROL_READY) {}
			for(i = 0; i < 5; i++)
    1836:	de 01       	movw	r26, r28
    1838:	a8 5b       	subi	r26, 0xB8	; 184
    183a:	bf 4f       	sbci	r27, 0xFF	; 255
    183c:	fe 01       	movw	r30, r28
    183e:	e8 5b       	subi	r30, 0xB8	; 184
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	80 81       	ld	r24, Z
    1844:	8f 5f       	subi	r24, 0xFF	; 255
    1846:	8c 93       	st	X, r24
    1848:	fe 01       	movw	r30, r28
    184a:	e8 5b       	subi	r30, 0xB8	; 184
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	80 81       	ld	r24, Z
    1850:	85 30       	cpi	r24, 0x05	; 5
    1852:	10 f3       	brcs	.-60     	; 0x1818 <APP_getThePin+0x652>
			{
				UART_sendByte(pin[i]);
			}
			LCD_displayString("Success");
    1854:	8b eb       	ldi	r24, 0xBB	; 187
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_displayString>
		}

		LCD_clearScreen();
    185c:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <LCD_clearScreen>
	/* Stay in the do while loop until the pin is entered correctly */
	}while(flag == 1);
    1860:	fe 01       	movw	r30, r28
    1862:	e9 5b       	subi	r30, 0xB9	; 185
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	80 81       	ld	r24, Z
    1868:	81 30       	cpi	r24, 0x01	; 1
    186a:	09 f4       	brne	.+2      	; 0x186e <APP_getThePin+0x6a8>
    186c:	b9 cc       	rjmp	.-1678   	; 0x11e0 <APP_getThePin+0x1a>

}
    186e:	ce 5a       	subi	r28, 0xAE	; 174
    1870:	df 4f       	sbci	r29, 0xFF	; 255
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	08 95       	ret

00001886 <APP_errorMsg>:

/* Callback function to display ERROR message for 1 minute
 * when the user attempts to write the pin wrong for 3 times
 */
void APP_errorMsg(void)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    188e:	80 91 29 01 	lds	r24, 0x0129
    1892:	8f 5f       	subi	r24, 0xFF	; 255
    1894:	80 93 29 01 	sts	0x0129, r24
	if(g_ticks == 1)
    1898:	80 91 29 01 	lds	r24, 0x0129
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	39 f4       	brne	.+14     	; 0x18ae <APP_errorMsg+0x28>
	{
		LCD_clearScreen();
    18a0:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <LCD_clearScreen>
		LCD_displayString("ERROR");
    18a4:	83 ec       	ldi	r24, 0xC3	; 195
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_displayString>
    18ac:	0d c0       	rjmp	.+26     	; 0x18c8 <APP_errorMsg+0x42>
	}
	else if(g_ticks == 60)
    18ae:	80 91 29 01 	lds	r24, 0x0129
    18b2:	8c 33       	cpi	r24, 0x3C	; 60
    18b4:	49 f4       	brne	.+18     	; 0x18c8 <APP_errorMsg+0x42>
	{
		/* Reset the ticks when done */
		g_ticks = 0;
    18b6:	10 92 29 01 	sts	0x0129, r1
		/* Clear the flag when done */
		term_flag = 0;
    18ba:	10 92 2a 01 	sts	0x012A, r1
		LCD_clearScreen();
    18be:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <LCD_clearScreen>
		/* De-initialize the timer when done */
		Timer_deInit(TIMER1_ID);
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <Timer_deInit>
	}
}
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <APP_verifyPin>:
/* Function to verify the pin taken from the user
 * It takes the pin array and address of the flag
 * as arguments
 */
void APP_verifyPin(uint8* pin, uint8* flag)
{
    18ce:	0f 93       	push	r16
    18d0:	1f 93       	push	r17
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	a1 97       	sbiw	r28, 0x21	; 33
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	9f 8f       	std	Y+31, r25	; 0x1f
    18e8:	8e 8f       	std	Y+30, r24	; 0x1e
    18ea:	79 a3       	std	Y+33, r23	; 0x21
    18ec:	68 a3       	std	Y+32, r22	; 0x20
	uint8 i;
	do{
		count++;
    18ee:	80 91 28 01 	lds	r24, 0x0128
    18f2:	8f 5f       	subi	r24, 0xFF	; 255
    18f4:	80 93 28 01 	sts	0x0128, r24
		/* if the user entered the pin 3 times wrong
		 * display error message for 1 minute
		 */
		if(count == 4)
    18f8:	80 91 28 01 	lds	r24, 0x0128
    18fc:	84 30       	cpi	r24, 0x04	; 4
    18fe:	61 f4       	brne	.+24     	; 0x1918 <APP_verifyPin+0x4a>
		{
			/* Take the flag to prevent the processor from going through
			 * the while(1) until the error message disappears
			 */
			term_flag = 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	80 93 2a 01 	sts	0x012A, r24
			Timer_init(&s_TimerConfigData);
    1906:	86 e1       	ldi	r24, 0x16	; 22
    1908:	91 e0       	ldi	r25, 0x01	; 1
    190a:	0e 94 ed 14 	call	0x29da	; 0x29da <Timer_init>
			Timer_setCallBack1(APP_errorMsg);
    190e:	83 e4       	ldi	r24, 0x43	; 67
    1910:	9c e0       	ldi	r25, 0x0C	; 12
    1912:	0e 94 19 16 	call	0x2c32	; 0x2c32 <Timer_setCallBack1>
    1916:	28 c1       	rjmp	.+592    	; 0x1b68 <APP_verifyPin+0x29a>
			break;
		}
		LCD_clearScreen();
    1918:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <LCD_clearScreen>
		LCD_displayString("Enter the PIN:");
    191c:	89 ec       	ldi	r24, 0xC9	; 201
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_displayString>
		/* Get the pin from the user */
		for(i = 0; i < 5; i++)
    1924:	1d 8e       	std	Y+29, r1	; 0x1d
    1926:	88 c0       	rjmp	.+272    	; 0x1a38 <APP_verifyPin+0x16a>
		{
			pin[i] = KEYPAD_getPressedKey();
    1928:	8d 8d       	ldd	r24, Y+29	; 0x1d
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1930:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1932:	8c 01       	movw	r16, r24
    1934:	02 0f       	add	r16, r18
    1936:	13 1f       	adc	r17, r19
    1938:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <KEYPAD_getPressedKey>
    193c:	f8 01       	movw	r30, r16
    193e:	80 83       	st	Z, r24
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	aa ef       	ldi	r26, 0xFA	; 250
    1946:	b3 e4       	ldi	r27, 0x43	; 67
    1948:	89 8f       	std	Y+25, r24	; 0x19
    194a:	9a 8f       	std	Y+26, r25	; 0x1a
    194c:	ab 8f       	std	Y+27, r26	; 0x1b
    194e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1950:	69 8d       	ldd	r22, Y+25	; 0x19
    1952:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1954:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1956:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	4a ef       	ldi	r20, 0xFA	; 250
    195e:	54 e4       	ldi	r21, 0x44	; 68
    1960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	8d 8b       	std	Y+21, r24	; 0x15
    196a:	9e 8b       	std	Y+22, r25	; 0x16
    196c:	af 8b       	std	Y+23, r26	; 0x17
    196e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1970:	6d 89       	ldd	r22, Y+21	; 0x15
    1972:	7e 89       	ldd	r23, Y+22	; 0x16
    1974:	8f 89       	ldd	r24, Y+23	; 0x17
    1976:	98 8d       	ldd	r25, Y+24	; 0x18
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e8       	ldi	r20, 0x80	; 128
    197e:	5f e3       	ldi	r21, 0x3F	; 63
    1980:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1984:	88 23       	and	r24, r24
    1986:	2c f4       	brge	.+10     	; 0x1992 <APP_verifyPin+0xc4>
		__ticks = 1;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9c 8b       	std	Y+20, r25	; 0x14
    198e:	8b 8b       	std	Y+19, r24	; 0x13
    1990:	3f c0       	rjmp	.+126    	; 0x1a10 <APP_verifyPin+0x142>
	else if (__tmp > 65535)
    1992:	6d 89       	ldd	r22, Y+21	; 0x15
    1994:	7e 89       	ldd	r23, Y+22	; 0x16
    1996:	8f 89       	ldd	r24, Y+23	; 0x17
    1998:	98 8d       	ldd	r25, Y+24	; 0x18
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	3f ef       	ldi	r19, 0xFF	; 255
    199e:	4f e7       	ldi	r20, 0x7F	; 127
    19a0:	57 e4       	ldi	r21, 0x47	; 71
    19a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19a6:	18 16       	cp	r1, r24
    19a8:	4c f5       	brge	.+82     	; 0x19fc <APP_verifyPin+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19aa:	69 8d       	ldd	r22, Y+25	; 0x19
    19ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e2       	ldi	r20, 0x20	; 32
    19b8:	51 e4       	ldi	r21, 0x41	; 65
    19ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	9c 8b       	std	Y+20, r25	; 0x14
    19d0:	8b 8b       	std	Y+19, r24	; 0x13
    19d2:	0f c0       	rjmp	.+30     	; 0x19f2 <APP_verifyPin+0x124>
    19d4:	88 ec       	ldi	r24, 0xC8	; 200
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9a 8b       	std	Y+18, r25	; 0x12
    19da:	89 8b       	std	Y+17, r24	; 0x11
    19dc:	89 89       	ldd	r24, Y+17	; 0x11
    19de:	9a 89       	ldd	r25, Y+18	; 0x12
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <APP_verifyPin+0x112>
    19e4:	9a 8b       	std	Y+18, r25	; 0x12
    19e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ea:	9c 89       	ldd	r25, Y+20	; 0x14
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	9c 8b       	std	Y+20, r25	; 0x14
    19f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f2:	8b 89       	ldd	r24, Y+19	; 0x13
    19f4:	9c 89       	ldd	r25, Y+20	; 0x14
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	69 f7       	brne	.-38     	; 0x19d4 <APP_verifyPin+0x106>
    19fa:	14 c0       	rjmp	.+40     	; 0x1a24 <APP_verifyPin+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fc:	6d 89       	ldd	r22, Y+21	; 0x15
    19fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1a00:	8f 89       	ldd	r24, Y+23	; 0x17
    1a02:	98 8d       	ldd	r25, Y+24	; 0x18
    1a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9c 8b       	std	Y+20, r25	; 0x14
    1a0e:	8b 8b       	std	Y+19, r24	; 0x13
    1a10:	8b 89       	ldd	r24, Y+19	; 0x13
    1a12:	9c 89       	ldd	r25, Y+20	; 0x14
    1a14:	98 8b       	std	Y+16, r25	; 0x10
    1a16:	8f 87       	std	Y+15, r24	; 0x0f
    1a18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a1a:	98 89       	ldd	r25, Y+16	; 0x10
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <APP_verifyPin+0x14e>
    1a20:	98 8b       	std	Y+16, r25	; 0x10
    1a22:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			LCD_moveCursor(1, i);
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a28:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_moveCursor>
			LCD_displayCharacter('*');
    1a2c:	8a e2       	ldi	r24, 0x2A	; 42
    1a2e:	0e 94 48 12 	call	0x2490	; 0x2490 <LCD_displayCharacter>
			break;
		}
		LCD_clearScreen();
		LCD_displayString("Enter the PIN:");
		/* Get the pin from the user */
		for(i = 0; i < 5; i++)
    1a32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a34:	8f 5f       	subi	r24, 0xFF	; 255
    1a36:	8d 8f       	std	Y+29, r24	; 0x1d
    1a38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a3a:	85 30       	cpi	r24, 0x05	; 5
    1a3c:	08 f4       	brcc	.+2      	; 0x1a40 <APP_verifyPin+0x172>
    1a3e:	74 cf       	rjmp	.-280    	; 0x1928 <APP_verifyPin+0x5a>
			_delay_ms(500);
			LCD_moveCursor(1, i);
			LCD_displayCharacter('*');
		}
		/* Wait until user presses Enter key */
		while(KEYPAD_getPressedKey() != 13) {}
    1a40:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <KEYPAD_getPressedKey>
    1a44:	8d 30       	cpi	r24, 0x0D	; 13
    1a46:	e1 f7       	brne	.-8      	; 0x1a40 <APP_verifyPin+0x172>
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	aa ef       	ldi	r26, 0xFA	; 250
    1a4e:	b3 e4       	ldi	r27, 0x43	; 67
    1a50:	8b 87       	std	Y+11, r24	; 0x0b
    1a52:	9c 87       	std	Y+12, r25	; 0x0c
    1a54:	ad 87       	std	Y+13, r26	; 0x0d
    1a56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	4a ef       	ldi	r20, 0xFA	; 250
    1a66:	54 e4       	ldi	r21, 0x44	; 68
    1a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	8f 83       	std	Y+7, r24	; 0x07
    1a72:	98 87       	std	Y+8, r25	; 0x08
    1a74:	a9 87       	std	Y+9, r26	; 0x09
    1a76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a78:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7a:	78 85       	ldd	r23, Y+8	; 0x08
    1a7c:	89 85       	ldd	r24, Y+9	; 0x09
    1a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e8       	ldi	r20, 0x80	; 128
    1a86:	5f e3       	ldi	r21, 0x3F	; 63
    1a88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a8c:	88 23       	and	r24, r24
    1a8e:	2c f4       	brge	.+10     	; 0x1a9a <APP_verifyPin+0x1cc>
		__ticks = 1;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    1a98:	3f c0       	rjmp	.+126    	; 0x1b18 <APP_verifyPin+0x24a>
	else if (__tmp > 65535)
    1a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9c:	78 85       	ldd	r23, Y+8	; 0x08
    1a9e:	89 85       	ldd	r24, Y+9	; 0x09
    1aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	3f ef       	ldi	r19, 0xFF	; 255
    1aa6:	4f e7       	ldi	r20, 0x7F	; 127
    1aa8:	57 e4       	ldi	r21, 0x47	; 71
    1aaa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aae:	18 16       	cp	r1, r24
    1ab0:	4c f5       	brge	.+82     	; 0x1b04 <APP_verifyPin+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 e2       	ldi	r20, 0x20	; 32
    1ac0:	51 e4       	ldi	r21, 0x41	; 65
    1ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	bc 01       	movw	r22, r24
    1acc:	cd 01       	movw	r24, r26
    1ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
    1ada:	0f c0       	rjmp	.+30     	; 0x1afa <APP_verifyPin+0x22c>
    1adc:	88 ec       	ldi	r24, 0xC8	; 200
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	9c 83       	std	Y+4, r25	; 0x04
    1ae2:	8b 83       	std	Y+3, r24	; 0x03
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <APP_verifyPin+0x21a>
    1aec:	9c 83       	std	Y+4, r25	; 0x04
    1aee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af0:	8d 81       	ldd	r24, Y+5	; 0x05
    1af2:	9e 81       	ldd	r25, Y+6	; 0x06
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	69 f7       	brne	.-38     	; 0x1adc <APP_verifyPin+0x20e>
    1b02:	14 c0       	rjmp	.+40     	; 0x1b2c <APP_verifyPin+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b04:	6f 81       	ldd	r22, Y+7	; 0x07
    1b06:	78 85       	ldd	r23, Y+8	; 0x08
    1b08:	89 85       	ldd	r24, Y+9	; 0x09
    1b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9e 83       	std	Y+6, r25	; 0x06
    1b16:	8d 83       	std	Y+5, r24	; 0x05
    1b18:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	9a 81       	ldd	r25, Y+2	; 0x02
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <APP_verifyPin+0x256>
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		/* Send the Pin to MC2 */
		for(i = 0; i < 5; i++)
    1b2c:	1d 8e       	std	Y+29, r1	; 0x1d
    1b2e:	0e c0       	rjmp	.+28     	; 0x1b4c <APP_verifyPin+0x27e>
		{
			UART_sendByte(pin[i]);
    1b30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b38:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	e2 0f       	add	r30, r18
    1b3e:	f3 1f       	adc	r31, r19
    1b40:	80 81       	ld	r24, Z
    1b42:	0e 94 27 18 	call	0x304e	; 0x304e <UART_sendByte>
		}
		/* Wait until user presses Enter key */
		while(KEYPAD_getPressedKey() != 13) {}
		_delay_ms(500);
		/* Send the Pin to MC2 */
		for(i = 0; i < 5; i++)
    1b46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b48:	8f 5f       	subi	r24, 0xFF	; 255
    1b4a:	8d 8f       	std	Y+29, r24	; 0x1d
    1b4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b4e:	85 30       	cpi	r24, 0x05	; 5
    1b50:	78 f3       	brcs	.-34     	; 0x1b30 <APP_verifyPin+0x262>
			UART_sendByte(pin[i]);
		}
		/* Receive the flag from MC2 which indicates whether the
		 * sent pin is correct or no
		 */
		*flag = UART_receiveByte();
    1b52:	0e 94 3e 18 	call	0x307c	; 0x307c <UART_receiveByte>
    1b56:	e8 a1       	ldd	r30, Y+32	; 0x20
    1b58:	f9 a1       	ldd	r31, Y+33	; 0x21
    1b5a:	80 83       	st	Z, r24
	/* Stay in the do while until the user enters the pin correctly */
	}while(*flag == 1);
    1b5c:	e8 a1       	ldd	r30, Y+32	; 0x20
    1b5e:	f9 a1       	ldd	r31, Y+33	; 0x21
    1b60:	80 81       	ld	r24, Z
    1b62:	81 30       	cpi	r24, 0x01	; 1
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <APP_verifyPin+0x29a>
    1b66:	c3 ce       	rjmp	.-634    	; 0x18ee <APP_verifyPin+0x20>
}
    1b68:	a1 96       	adiw	r28, 0x21	; 33
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	1f 91       	pop	r17
    1b7a:	0f 91       	pop	r16
    1b7c:	08 95       	ret

00001b7e <main>:

/*******************************************************************************
 *                                Main Function                                *
 *******************************************************************************/
int main(void)
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	af 97       	sbiw	r28, 0x2f	; 47
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
	/* To indicate which operation to be performed */
	uint8 option;
	/* Flag to indicate whether the pin is entered correctly
	 * or not
	 */
	uint8 flag = 0;
    1b92:	1b a2       	std	Y+35, r1	; 0x23
	/* Enable the I-bit to enable Interrupts */
	SREG |= (1<<7);
    1b94:	af e5       	ldi	r26, 0x5F	; 95
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	ef e5       	ldi	r30, 0x5F	; 95
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	80 68       	ori	r24, 0x80	; 128
    1ba0:	8c 93       	st	X, r24
	 * ONE STOP BIT
	 * EIGHT BIT MODE
	 * NO PARITY
	 * BAUD RATE 9600
	 */
	UART_Config s_UARTConfigData = {ONE_BIT_STOP, EIGHT_BIT_MODE, PARITY_OFF, 9600};
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	84 96       	adiw	r24, 0x24	; 36
    1ba6:	9c a7       	std	Y+44, r25	; 0x2c
    1ba8:	8b a7       	std	Y+43, r24	; 0x2b
    1baa:	e1 e2       	ldi	r30, 0x21	; 33
    1bac:	f1 e0       	ldi	r31, 0x01	; 1
    1bae:	fe a7       	std	Y+46, r31	; 0x2e
    1bb0:	ed a7       	std	Y+45, r30	; 0x2d
    1bb2:	f7 e0       	ldi	r31, 0x07	; 7
    1bb4:	ff a7       	std	Y+47, r31	; 0x2f
    1bb6:	ed a5       	ldd	r30, Y+45	; 0x2d
    1bb8:	fe a5       	ldd	r31, Y+46	; 0x2e
    1bba:	00 80       	ld	r0, Z
    1bbc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bbe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bc0:	01 96       	adiw	r24, 0x01	; 1
    1bc2:	9e a7       	std	Y+46, r25	; 0x2e
    1bc4:	8d a7       	std	Y+45, r24	; 0x2d
    1bc6:	eb a5       	ldd	r30, Y+43	; 0x2b
    1bc8:	fc a5       	ldd	r31, Y+44	; 0x2c
    1bca:	00 82       	st	Z, r0
    1bcc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bce:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bd0:	01 96       	adiw	r24, 0x01	; 1
    1bd2:	9c a7       	std	Y+44, r25	; 0x2c
    1bd4:	8b a7       	std	Y+43, r24	; 0x2b
    1bd6:	9f a5       	ldd	r25, Y+47	; 0x2f
    1bd8:	91 50       	subi	r25, 0x01	; 1
    1bda:	9f a7       	std	Y+47, r25	; 0x2f
    1bdc:	ef a5       	ldd	r30, Y+47	; 0x2f
    1bde:	ee 23       	and	r30, r30
    1be0:	51 f7       	brne	.-44     	; 0x1bb6 <main+0x38>
	/* Initialize the UART driver with the given structure */
	UART_init(&s_UARTConfigData);
    1be2:	ce 01       	movw	r24, r28
    1be4:	84 96       	adiw	r24, 0x24	; 36
    1be6:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <UART_init>
	/* Initialize the LCD driver */
	LCD_init();
    1bea:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_init>
	/* Request from the user to enter the Pin and check for it only once
	 * to be stored in the EEPROM
	 */
	APP_getThePin();
    1bee:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <APP_getThePin>
	while(1)
	{
		/* The interface displayed to the user */
		LCD_displayString("+: Open Door");
    1bf2:	88 ed       	ldi	r24, 0xD8	; 216
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_displayString>
		LCD_moveCursor(1, 0);
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_moveCursor>
		LCD_displayString("-: Change PIN");
    1c02:	85 ee       	ldi	r24, 0xE5	; 229
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_displayString>
		/* The pin from the user */
		option = KEYPAD_getPressedKey();
    1c0a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <KEYPAD_getPressedKey>
    1c0e:	8d 8f       	std	Y+29, r24	; 0x1d
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	aa ef       	ldi	r26, 0xFA	; 250
    1c16:	b3 e4       	ldi	r27, 0x43	; 67
    1c18:	89 8f       	std	Y+25, r24	; 0x19
    1c1a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c1c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c20:	69 8d       	ldd	r22, Y+25	; 0x19
    1c22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4a ef       	ldi	r20, 0xFA	; 250
    1c2e:	54 e4       	ldi	r21, 0x44	; 68
    1c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	8d 8b       	std	Y+21, r24	; 0x15
    1c3a:	9e 8b       	std	Y+22, r25	; 0x16
    1c3c:	af 8b       	std	Y+23, r26	; 0x17
    1c3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c40:	6d 89       	ldd	r22, Y+21	; 0x15
    1c42:	7e 89       	ldd	r23, Y+22	; 0x16
    1c44:	8f 89       	ldd	r24, Y+23	; 0x17
    1c46:	98 8d       	ldd	r25, Y+24	; 0x18
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e8       	ldi	r20, 0x80	; 128
    1c4e:	5f e3       	ldi	r21, 0x3F	; 63
    1c50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c54:	88 23       	and	r24, r24
    1c56:	2c f4       	brge	.+10     	; 0x1c62 <main+0xe4>
		__ticks = 1;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9c 8b       	std	Y+20, r25	; 0x14
    1c5e:	8b 8b       	std	Y+19, r24	; 0x13
    1c60:	3f c0       	rjmp	.+126    	; 0x1ce0 <main+0x162>
	else if (__tmp > 65535)
    1c62:	6d 89       	ldd	r22, Y+21	; 0x15
    1c64:	7e 89       	ldd	r23, Y+22	; 0x16
    1c66:	8f 89       	ldd	r24, Y+23	; 0x17
    1c68:	98 8d       	ldd	r25, Y+24	; 0x18
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	3f ef       	ldi	r19, 0xFF	; 255
    1c6e:	4f e7       	ldi	r20, 0x7F	; 127
    1c70:	57 e4       	ldi	r21, 0x47	; 71
    1c72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c76:	18 16       	cp	r1, r24
    1c78:	4c f5       	brge	.+82     	; 0x1ccc <main+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e2       	ldi	r20, 0x20	; 32
    1c88:	51 e4       	ldi	r21, 0x41	; 65
    1c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ca0:	8b 8b       	std	Y+19, r24	; 0x13
    1ca2:	0f c0       	rjmp	.+30     	; 0x1cc2 <main+0x144>
    1ca4:	88 ec       	ldi	r24, 0xC8	; 200
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9a 8b       	std	Y+18, r25	; 0x12
    1caa:	89 8b       	std	Y+17, r24	; 0x11
    1cac:	89 89       	ldd	r24, Y+17	; 0x11
    1cae:	9a 89       	ldd	r25, Y+18	; 0x12
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <main+0x132>
    1cb4:	9a 8b       	std	Y+18, r25	; 0x12
    1cb6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cba:	9c 89       	ldd	r25, Y+20	; 0x14
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	9c 8b       	std	Y+20, r25	; 0x14
    1cc0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	69 f7       	brne	.-38     	; 0x1ca4 <main+0x126>
    1cca:	14 c0       	rjmp	.+40     	; 0x1cf4 <main+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ccc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cce:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9c 8b       	std	Y+20, r25	; 0x14
    1cde:	8b 8b       	std	Y+19, r24	; 0x13
    1ce0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce4:	98 8b       	std	Y+16, r25	; 0x10
    1ce6:	8f 87       	std	Y+15, r24	; 0x0f
    1ce8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cea:	98 89       	ldd	r25, Y+16	; 0x10
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <main+0x16e>
    1cf0:	98 8b       	std	Y+16, r25	; 0x10
    1cf2:	8f 87       	std	Y+15, r24	; 0x0f
		/* Delay 500ms which is enough to take the pressed key from the user */
		_delay_ms(500);
		LCD_clearScreen();
    1cf4:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <LCD_clearScreen>
		/* Send the option chosen by the user to MC2 */
		UART_sendByte(option);
    1cf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cfa:	0e 94 27 18 	call	0x304e	; 0x304e <UART_sendByte>
		/* '+' indicates that user wants to Rotate the door */
		if(option == '+')
    1cfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d00:	8b 32       	cpi	r24, 0x2B	; 43
    1d02:	d1 f4       	brne	.+52     	; 0x1d38 <main+0x1ba>
		{
			/* Attempt to take the pin from the user and verify it */
			APP_verifyPin(pin, &flag);
    1d04:	ce 01       	movw	r24, r28
    1d06:	4e 96       	adiw	r24, 0x1e	; 30
    1d08:	9e 01       	movw	r18, r28
    1d0a:	2d 5d       	subi	r18, 0xDD	; 221
    1d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0e:	b9 01       	movw	r22, r18
    1d10:	0e 94 67 0c 	call	0x18ce	; 0x18ce <APP_verifyPin>
			/* if flag = 0, this means that the entered pin is correct */
			if(flag == 0)
    1d14:	8b a1       	ldd	r24, Y+35	; 0x23
    1d16:	88 23       	and	r24, r24
    1d18:	09 f0       	breq	.+2      	; 0x1d1c <main+0x19e>
    1d1a:	a4 c0       	rjmp	.+328    	; 0x1e64 <main+0x2e6>
			{
				count = 0;
    1d1c:	10 92 28 01 	sts	0x0128, r1
				term_flag = 1;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	80 93 2a 01 	sts	0x012A, r24
				Timer_init(&s_TimerConfigData);
    1d26:	86 e1       	ldi	r24, 0x16	; 22
    1d28:	91 e0       	ldi	r25, 0x01	; 1
    1d2a:	0e 94 ed 14 	call	0x29da	; 0x29da <Timer_init>
				Timer_setCallBack1(APP_openDoor);
    1d2e:	89 ea       	ldi	r24, 0xA9	; 169
    1d30:	98 e0       	ldi	r25, 0x08	; 8
    1d32:	0e 94 19 16 	call	0x2c32	; 0x2c32 <Timer_setCallBack1>
    1d36:	96 c0       	rjmp	.+300    	; 0x1e64 <main+0x2e6>
			}
		}
		/* '-' indicates that the user wants to change the pin */
		else if(option == '-')
    1d38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d3a:	8d 32       	cpi	r24, 0x2D	; 45
    1d3c:	09 f0       	breq	.+2      	; 0x1d40 <main+0x1c2>
    1d3e:	92 c0       	rjmp	.+292    	; 0x1e64 <main+0x2e6>
		{
			/* Attempt to take the pin from the user and verify it */
			APP_verifyPin(pin, &flag);
    1d40:	ce 01       	movw	r24, r28
    1d42:	4e 96       	adiw	r24, 0x1e	; 30
    1d44:	9e 01       	movw	r18, r28
    1d46:	2d 5d       	subi	r18, 0xDD	; 221
    1d48:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4a:	b9 01       	movw	r22, r18
    1d4c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <APP_verifyPin>
			/* flag = 0 means that the user entered the pin correctly */
			if(flag == 0)
    1d50:	8b a1       	ldd	r24, Y+35	; 0x23
    1d52:	88 23       	and	r24, r24
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <main+0x1da>
    1d56:	86 c0       	rjmp	.+268    	; 0x1e64 <main+0x2e6>
			{
				count = 0;
    1d58:	10 92 28 01 	sts	0x0128, r1
				LCD_clearScreen();
    1d5c:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <LCD_clearScreen>
				APP_getThePin();
    1d60:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <APP_getThePin>
				LCD_displayString("PIN Changed");
    1d64:	83 ef       	ldi	r24, 0xF3	; 243
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_displayString>
				LCD_moveCursor(1, 0);
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
    1d70:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_moveCursor>
				LCD_displayString("Successfully !");
    1d74:	8f ef       	ldi	r24, 0xFF	; 255
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_displayString>
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	aa e7       	ldi	r26, 0x7A	; 122
    1d82:	b4 e4       	ldi	r27, 0x44	; 68
    1d84:	8b 87       	std	Y+11, r24	; 0x0b
    1d86:	9c 87       	std	Y+12, r25	; 0x0c
    1d88:	ad 87       	std	Y+13, r26	; 0x0d
    1d8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	4a ef       	ldi	r20, 0xFA	; 250
    1d9a:	54 e4       	ldi	r21, 0x44	; 68
    1d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	8f 83       	std	Y+7, r24	; 0x07
    1da6:	98 87       	std	Y+8, r25	; 0x08
    1da8:	a9 87       	std	Y+9, r26	; 0x09
    1daa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dac:	6f 81       	ldd	r22, Y+7	; 0x07
    1dae:	78 85       	ldd	r23, Y+8	; 0x08
    1db0:	89 85       	ldd	r24, Y+9	; 0x09
    1db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e8       	ldi	r20, 0x80	; 128
    1dba:	5f e3       	ldi	r21, 0x3F	; 63
    1dbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dc0:	88 23       	and	r24, r24
    1dc2:	2c f4       	brge	.+10     	; 0x1dce <main+0x250>
		__ticks = 1;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9e 83       	std	Y+6, r25	; 0x06
    1dca:	8d 83       	std	Y+5, r24	; 0x05
    1dcc:	3f c0       	rjmp	.+126    	; 0x1e4c <main+0x2ce>
	else if (__tmp > 65535)
    1dce:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd0:	78 85       	ldd	r23, Y+8	; 0x08
    1dd2:	89 85       	ldd	r24, Y+9	; 0x09
    1dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	3f ef       	ldi	r19, 0xFF	; 255
    1dda:	4f e7       	ldi	r20, 0x7F	; 127
    1ddc:	57 e4       	ldi	r21, 0x47	; 71
    1dde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de2:	18 16       	cp	r1, r24
    1de4:	4c f5       	brge	.+82     	; 0x1e38 <main+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	40 e2       	ldi	r20, 0x20	; 32
    1df4:	51 e4       	ldi	r21, 0x41	; 65
    1df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	bc 01       	movw	r22, r24
    1e00:	cd 01       	movw	r24, r26
    1e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9e 83       	std	Y+6, r25	; 0x06
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
    1e0e:	0f c0       	rjmp	.+30     	; 0x1e2e <main+0x2b0>
    1e10:	88 ec       	ldi	r24, 0xC8	; 200
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	9c 83       	std	Y+4, r25	; 0x04
    1e16:	8b 83       	std	Y+3, r24	; 0x03
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <main+0x29e>
    1e20:	9c 83       	std	Y+4, r25	; 0x04
    1e22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	9e 81       	ldd	r25, Y+6	; 0x06
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	9e 83       	std	Y+6, r25	; 0x06
    1e2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	69 f7       	brne	.-38     	; 0x1e10 <main+0x292>
    1e36:	14 c0       	rjmp	.+40     	; 0x1e60 <main+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e38:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3a:	78 85       	ldd	r23, Y+8	; 0x08
    1e3c:	89 85       	ldd	r24, Y+9	; 0x09
    1e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	9e 83       	std	Y+6, r25	; 0x06
    1e4a:	8d 83       	std	Y+5, r24	; 0x05
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e50:	9a 83       	std	Y+2, r25	; 0x02
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	9a 81       	ldd	r25, Y+2	; 0x02
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <main+0x2da>
    1e5c:	9a 83       	std	Y+2, r25	; 0x02
    1e5e:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				LCD_clearScreen();
    1e60:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <LCD_clearScreen>
			}
		}
		LCD_clearScreen();
    1e64:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <LCD_clearScreen>
		/* Do nothing when the door is opening or closing and when the Buzzer goes off */
		while(term_flag == 1) {}
    1e68:	80 91 2a 01 	lds	r24, 0x012A
    1e6c:	81 30       	cpi	r24, 0x01	; 1
    1e6e:	e1 f3       	breq	.-8      	; 0x1e68 <main+0x2ea>
    1e70:	c0 ce       	rjmp	.-640    	; 0x1bf2 <main+0x74>

00001e72 <KEYPAD_getPressedKey>:
/*
 * Function to return the actual value of the pressed key after
 * being processed by the adjust function
 */
uint8 KEYPAD_getPressedKey(void)
{
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <KEYPAD_getPressedKey+0x6>
    1e78:	0f 92       	push	r0
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	uint8 key_port_value = 0; /* Variable to hold the value of register to be written into */
    1e7e:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
	for(col = 0; col < KEYPAD_NUM_COLS; col++)
    1e80:	1a 82       	std	Y+2, r1	; 0x02
    1e82:	43 c0       	rjmp	.+134    	; 0x1f0a <KEYPAD_getPressedKey+0x98>
	{
		/*
		 * Each time setup the direction for all keypad port as input pins,
		 * except this column will be output pin
		 */
		GPIO_setupPortDirection(KEYPAD_PORT_ID, PORT_INPUT);
    1e84:	82 e0       	ldi	r24, 0x02	; 2
    1e86:	60 e0       	ldi	r22, 0x00	; 0
    1e88:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <GPIO_setupPortDirection>
		GPIO_setupPinDirection(KEYPAD_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + col, PIN_OUTPUT);
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	98 2f       	mov	r25, r24
    1e90:	9c 5f       	subi	r25, 0xFC	; 252
    1e92:	82 e0       	ldi	r24, 0x02	; 2
    1e94:	69 2f       	mov	r22, r25
    1e96:	41 e0       	ldi	r20, 0x01	; 1
    1e98:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
		key_port_value = ~(1<<(KEYPAD_FIRST_COL_PIN_ID + col));
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	88 2f       	mov	r24, r24
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	9c 01       	movw	r18, r24
    1ea4:	2c 5f       	subi	r18, 0xFC	; 252
    1ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <KEYPAD_getPressedKey+0x40>
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	2a 95       	dec	r18
    1eb4:	e2 f7       	brpl	.-8      	; 0x1eae <KEYPAD_getPressedKey+0x3c>
    1eb6:	80 95       	com	r24
    1eb8:	89 83       	std	Y+1, r24	; 0x01
#else
		key_port_value = (1<<(KEYPAD_FIRST_COL_PIN_ID + col));
#endif
		GPIO_writePort(KEYPAD_PORT_ID, key_port_value);
    1eba:	82 e0       	ldi	r24, 0x02	; 2
    1ebc:	69 81       	ldd	r22, Y+1	; 0x01
    1ebe:	0e 94 25 08 	call	0x104a	; 0x104a <GPIO_writePort>
		for(row = 0; row < KEYPAD_NUM_ROWS; row++)
    1ec2:	1b 82       	std	Y+3, r1	; 0x03
    1ec4:	1c c0       	rjmp	.+56     	; 0x1efe <KEYPAD_getPressedKey+0x8c>
		{
			/* Check if the switch is pressed in this row */
			if(GPIO_readPin(KEYPAD_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row) == KEYPAD_BUTTON_PRESSED)
    1ec6:	82 e0       	ldi	r24, 0x02	; 2
    1ec8:	6b 81       	ldd	r22, Y+3	; 0x03
    1eca:	0e 94 69 07 	call	0xed2	; 0xed2 <GPIO_readPin>
    1ece:	88 23       	and	r24, r24
    1ed0:	99 f4       	brne	.+38     	; 0x1ef8 <KEYPAD_getPressedKey+0x86>
			{
#if (KEYPAD_NUM_COLS == 3)
				return KEYPAD_4x3_adjustKeyNumber((row * KEYPAD_NUM_COLS) + col + 1);
#elif (KEYPAD_NUM_COLS == 4)
				return KEYPAD_4x4_adjustKeyNumber((row * KEYPAD_NUM_COLS) + col + 1);
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	88 2f       	mov	r24, r24
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	98 2f       	mov	r25, r24
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	89 0f       	add	r24, r25
    1ee6:	8f 5f       	subi	r24, 0xFF	; 255
    1ee8:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <KEYPAD_4x4_adjustKeyNumber>
#endif
			}
		}
	}
	}
}
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret
		key_port_value = ~(1<<(KEYPAD_FIRST_COL_PIN_ID + col));
#else
		key_port_value = (1<<(KEYPAD_FIRST_COL_PIN_ID + col));
#endif
		GPIO_writePort(KEYPAD_PORT_ID, key_port_value);
		for(row = 0; row < KEYPAD_NUM_ROWS; row++)
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	8f 5f       	subi	r24, 0xFF	; 255
    1efc:	8b 83       	std	Y+3, r24	; 0x03
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	84 30       	cpi	r24, 0x04	; 4
    1f02:	08 f3       	brcs	.-62     	; 0x1ec6 <KEYPAD_getPressedKey+0x54>
{
	uint8 row, col;
	uint8 key_port_value = 0; /* Variable to hold the value of register to be written into */
	while(1)
	{
	for(col = 0; col < KEYPAD_NUM_COLS; col++)
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	8f 5f       	subi	r24, 0xFF	; 255
    1f08:	8a 83       	std	Y+2, r24	; 0x02
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	84 30       	cpi	r24, 0x04	; 4
    1f0e:	08 f4       	brcc	.+2      	; 0x1f12 <KEYPAD_getPressedKey+0xa0>
    1f10:	b9 cf       	rjmp	.-142    	; 0x1e84 <KEYPAD_getPressedKey+0x12>
    1f12:	b6 cf       	rjmp	.-148    	; 0x1e80 <KEYPAD_getPressedKey+0xe>

00001f14 <KEYPAD_4x4_adjustKeyNumber>:
	}
	return keypad_button;
}
#else
uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <KEYPAD_4x4_adjustKeyNumber+0x6>
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <KEYPAD_4x4_adjustKeyNumber+0x8>
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1f22:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	3c 83       	std	Y+4, r19	; 0x04
    1f2c:	2b 83       	std	Y+3, r18	; 0x03
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	9c 81       	ldd	r25, Y+4	; 0x04
    1f32:	88 30       	cpi	r24, 0x08	; 8
    1f34:	91 05       	cpc	r25, r1
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <KEYPAD_4x4_adjustKeyNumber+0x26>
    1f38:	70 c0       	rjmp	.+224    	; 0x201a <KEYPAD_4x4_adjustKeyNumber+0x106>
    1f3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3e:	29 30       	cpi	r18, 0x09	; 9
    1f40:	31 05       	cpc	r19, r1
    1f42:	5c f5       	brge	.+86     	; 0x1f9a <KEYPAD_4x4_adjustKeyNumber+0x86>
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	84 30       	cpi	r24, 0x04	; 4
    1f4a:	91 05       	cpc	r25, r1
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1f4e:	59 c0       	rjmp	.+178    	; 0x2002 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1f50:	2b 81       	ldd	r18, Y+3	; 0x03
    1f52:	3c 81       	ldd	r19, Y+4	; 0x04
    1f54:	25 30       	cpi	r18, 0x05	; 5
    1f56:	31 05       	cpc	r19, r1
    1f58:	9c f4       	brge	.+38     	; 0x1f80 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	82 30       	cpi	r24, 0x02	; 2
    1f60:	91 05       	cpc	r25, r1
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1f64:	48 c0       	rjmp	.+144    	; 0x1ff6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1f66:	2b 81       	ldd	r18, Y+3	; 0x03
    1f68:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6a:	23 30       	cpi	r18, 0x03	; 3
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	0c f0       	brlt	.+2      	; 0x1f72 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1f70:	45 c0       	rjmp	.+138    	; 0x1ffc <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	9c 81       	ldd	r25, Y+4	; 0x04
    1f76:	81 30       	cpi	r24, 0x01	; 1
    1f78:	91 05       	cpc	r25, r1
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1f7c:	39 c0       	rjmp	.+114    	; 0x1ff0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1f7e:	67 c0       	rjmp	.+206    	; 0x204e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1f80:	2b 81       	ldd	r18, Y+3	; 0x03
    1f82:	3c 81       	ldd	r19, Y+4	; 0x04
    1f84:	26 30       	cpi	r18, 0x06	; 6
    1f86:	31 05       	cpc	r19, r1
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <KEYPAD_4x4_adjustKeyNumber+0x78>
    1f8a:	41 c0       	rjmp	.+130    	; 0x200e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f90:	87 30       	cpi	r24, 0x07	; 7
    1f92:	91 05       	cpc	r25, r1
    1f94:	0c f0       	brlt	.+2      	; 0x1f98 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1f96:	3e c0       	rjmp	.+124    	; 0x2014 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1f98:	37 c0       	rjmp	.+110    	; 0x2008 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1f9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f9e:	2c 30       	cpi	r18, 0x0C	; 12
    1fa0:	31 05       	cpc	r19, r1
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1fa4:	46 c0       	rjmp	.+140    	; 0x2032 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1faa:	8d 30       	cpi	r24, 0x0D	; 13
    1fac:	91 05       	cpc	r25, r1
    1fae:	5c f4       	brge	.+22     	; 0x1fc6 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1fb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb4:	2a 30       	cpi	r18, 0x0A	; 10
    1fb6:	31 05       	cpc	r19, r1
    1fb8:	b1 f1       	breq	.+108    	; 0x2026 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbe:	8b 30       	cpi	r24, 0x0B	; 11
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	a4 f5       	brge	.+104    	; 0x202c <KEYPAD_4x4_adjustKeyNumber+0x118>
    1fc4:	2d c0       	rjmp	.+90     	; 0x2020 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1fc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fca:	2e 30       	cpi	r18, 0x0E	; 14
    1fcc:	31 05       	cpc	r19, r1
    1fce:	b9 f1       	breq	.+110    	; 0x203e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd4:	8e 30       	cpi	r24, 0x0E	; 14
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	7c f1       	brlt	.+94     	; 0x2038 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1fda:	2b 81       	ldd	r18, Y+3	; 0x03
    1fdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1fde:	2f 30       	cpi	r18, 0x0F	; 15
    1fe0:	31 05       	cpc	r19, r1
    1fe2:	79 f1       	breq	.+94     	; 0x2042 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe8:	80 31       	cpi	r24, 0x10	; 16
    1fea:	91 05       	cpc	r25, r1
    1fec:	69 f1       	breq	.+90     	; 0x2048 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1fee:	2f c0       	rjmp	.+94     	; 0x204e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1:
		keypad_button = 7;
    1ff0:	87 e0       	ldi	r24, 0x07	; 7
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	2e c0       	rjmp	.+92     	; 0x2052 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button = 8;
    1ff6:	88 e0       	ldi	r24, 0x08	; 8
    1ff8:	89 83       	std	Y+1, r24	; 0x01
    1ffa:	2b c0       	rjmp	.+86     	; 0x2052 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button = 9;
    1ffc:	89 e0       	ldi	r24, 0x09	; 9
    1ffe:	89 83       	std	Y+1, r24	; 0x01
    2000:	28 c0       	rjmp	.+80     	; 0x2052 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button = '%';
    2002:	85 e2       	ldi	r24, 0x25	; 37
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	25 c0       	rjmp	.+74     	; 0x2052 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button = 4;
    2008:	84 e0       	ldi	r24, 0x04	; 4
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	22 c0       	rjmp	.+68     	; 0x2052 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button = 5;
    200e:	85 e0       	ldi	r24, 0x05	; 5
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	1f c0       	rjmp	.+62     	; 0x2052 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button = 6;
    2014:	86 e0       	ldi	r24, 0x06	; 6
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	1c c0       	rjmp	.+56     	; 0x2052 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button = '*';
    201a:	8a e2       	ldi	r24, 0x2A	; 42
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	19 c0       	rjmp	.+50     	; 0x2052 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button = 1;
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	16 c0       	rjmp	.+44     	; 0x2052 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button = 2;
    2026:	82 e0       	ldi	r24, 0x02	; 2
    2028:	89 83       	std	Y+1, r24	; 0x01
    202a:	13 c0       	rjmp	.+38     	; 0x2052 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button = 3;
    202c:	83 e0       	ldi	r24, 0x03	; 3
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	10 c0       	rjmp	.+32     	; 0x2052 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button = '-';
    2032:	8d e2       	ldi	r24, 0x2D	; 45
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	0d c0       	rjmp	.+26     	; 0x2052 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button = 13;
    2038:	8d e0       	ldi	r24, 0x0D	; 13
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	0a c0       	rjmp	.+20     	; 0x2052 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button = 0;
    203e:	19 82       	std	Y+1, r1	; 0x01
    2040:	08 c0       	rjmp	.+16     	; 0x2052 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button = '=';
    2042:	8d e3       	ldi	r24, 0x3D	; 61
    2044:	89 83       	std	Y+1, r24	; 0x01
    2046:	05 c0       	rjmp	.+10     	; 0x2052 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button = '+';
    2048:	8b e2       	ldi	r24, 0x2B	; 43
    204a:	89 83       	std	Y+1, r24	; 0x01
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button = button_number;
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    2052:	89 81       	ldd	r24, Y+1	; 0x01
}
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	60 e0       	ldi	r22, 0x00	; 0
    206e:	41 e0       	ldi	r20, 0x01	; 1
    2070:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	61 e0       	ldi	r22, 0x01	; 1
    2078:	41 e0       	ldi	r20, 0x01	; 1
    207a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	62 e0       	ldi	r22, 0x02	; 2
    2082:	41 e0       	ldi	r20, 0x01	; 1
    2084:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	6f ef       	ldi	r22, 0xFF	; 255
    208c:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2090:	88 e3       	ldi	r24, 0x38	; 56
    2092:	0e 94 54 10 	call	0x20a8	; 0x20a8 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2096:	8c e0       	ldi	r24, 0x0C	; 12
    2098:	0e 94 54 10 	call	0x20a8	; 0x20a8 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	0e 94 54 10 	call	0x20a8	; 0x20a8 <LCD_sendCommand>
}
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
    20b0:	e9 97       	sbiw	r28, 0x39	; 57
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	60 e0       	ldi	r22, 0x00	; 0
    20c2:	40 e0       	ldi	r20, 0x00	; 0
    20c4:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	61 e0       	ldi	r22, 0x01	; 1
    20cc:	40 e0       	ldi	r20, 0x00	; 0
    20ce:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	a0 e8       	ldi	r26, 0x80	; 128
    20d8:	bf e3       	ldi	r27, 0x3F	; 63
    20da:	8d ab       	std	Y+53, r24	; 0x35
    20dc:	9e ab       	std	Y+54, r25	; 0x36
    20de:	af ab       	std	Y+55, r26	; 0x37
    20e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e2:	6d a9       	ldd	r22, Y+53	; 0x35
    20e4:	7e a9       	ldd	r23, Y+54	; 0x36
    20e6:	8f a9       	ldd	r24, Y+55	; 0x37
    20e8:	98 ad       	ldd	r25, Y+56	; 0x38
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	4a e7       	ldi	r20, 0x7A	; 122
    20f0:	53 e4       	ldi	r21, 0x43	; 67
    20f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	89 ab       	std	Y+49, r24	; 0x31
    20fc:	9a ab       	std	Y+50, r25	; 0x32
    20fe:	ab ab       	std	Y+51, r26	; 0x33
    2100:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2102:	69 a9       	ldd	r22, Y+49	; 0x31
    2104:	7a a9       	ldd	r23, Y+50	; 0x32
    2106:	8b a9       	ldd	r24, Y+51	; 0x33
    2108:	9c a9       	ldd	r25, Y+52	; 0x34
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	40 e8       	ldi	r20, 0x80	; 128
    2110:	5f e3       	ldi	r21, 0x3F	; 63
    2112:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2116:	88 23       	and	r24, r24
    2118:	2c f4       	brge	.+10     	; 0x2124 <LCD_sendCommand+0x7c>
		__ticks = 1;
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	98 ab       	std	Y+48, r25	; 0x30
    2120:	8f a7       	std	Y+47, r24	; 0x2f
    2122:	3f c0       	rjmp	.+126    	; 0x21a2 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    2124:	69 a9       	ldd	r22, Y+49	; 0x31
    2126:	7a a9       	ldd	r23, Y+50	; 0x32
    2128:	8b a9       	ldd	r24, Y+51	; 0x33
    212a:	9c a9       	ldd	r25, Y+52	; 0x34
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	3f ef       	ldi	r19, 0xFF	; 255
    2130:	4f e7       	ldi	r20, 0x7F	; 127
    2132:	57 e4       	ldi	r21, 0x47	; 71
    2134:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2138:	18 16       	cp	r1, r24
    213a:	4c f5       	brge	.+82     	; 0x218e <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213c:	6d a9       	ldd	r22, Y+53	; 0x35
    213e:	7e a9       	ldd	r23, Y+54	; 0x36
    2140:	8f a9       	ldd	r24, Y+55	; 0x37
    2142:	98 ad       	ldd	r25, Y+56	; 0x38
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	40 e2       	ldi	r20, 0x20	; 32
    214a:	51 e4       	ldi	r21, 0x41	; 65
    214c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	bc 01       	movw	r22, r24
    2156:	cd 01       	movw	r24, r26
    2158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	98 ab       	std	Y+48, r25	; 0x30
    2162:	8f a7       	std	Y+47, r24	; 0x2f
    2164:	0f c0       	rjmp	.+30     	; 0x2184 <LCD_sendCommand+0xdc>
    2166:	89 e1       	ldi	r24, 0x19	; 25
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	9e a7       	std	Y+46, r25	; 0x2e
    216c:	8d a7       	std	Y+45, r24	; 0x2d
    216e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2170:	9e a5       	ldd	r25, Y+46	; 0x2e
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	f1 f7       	brne	.-4      	; 0x2172 <LCD_sendCommand+0xca>
    2176:	9e a7       	std	Y+46, r25	; 0x2e
    2178:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217a:	8f a5       	ldd	r24, Y+47	; 0x2f
    217c:	98 a9       	ldd	r25, Y+48	; 0x30
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	98 ab       	std	Y+48, r25	; 0x30
    2182:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2184:	8f a5       	ldd	r24, Y+47	; 0x2f
    2186:	98 a9       	ldd	r25, Y+48	; 0x30
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	69 f7       	brne	.-38     	; 0x2166 <LCD_sendCommand+0xbe>
    218c:	14 c0       	rjmp	.+40     	; 0x21b6 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218e:	69 a9       	ldd	r22, Y+49	; 0x31
    2190:	7a a9       	ldd	r23, Y+50	; 0x32
    2192:	8b a9       	ldd	r24, Y+51	; 0x33
    2194:	9c a9       	ldd	r25, Y+52	; 0x34
    2196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	98 ab       	std	Y+48, r25	; 0x30
    21a0:	8f a7       	std	Y+47, r24	; 0x2f
    21a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21a4:	98 a9       	ldd	r25, Y+48	; 0x30
    21a6:	9c a7       	std	Y+44, r25	; 0x2c
    21a8:	8b a7       	std	Y+43, r24	; 0x2b
    21aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	f1 f7       	brne	.-4      	; 0x21ae <LCD_sendCommand+0x106>
    21b2:	9c a7       	std	Y+44, r25	; 0x2c
    21b4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	62 e0       	ldi	r22, 0x02	; 2
    21ba:	41 e0       	ldi	r20, 0x01	; 1
    21bc:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	a0 e8       	ldi	r26, 0x80	; 128
    21c6:	bf e3       	ldi	r27, 0x3F	; 63
    21c8:	8f a3       	std	Y+39, r24	; 0x27
    21ca:	98 a7       	std	Y+40, r25	; 0x28
    21cc:	a9 a7       	std	Y+41, r26	; 0x29
    21ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d0:	6f a1       	ldd	r22, Y+39	; 0x27
    21d2:	78 a5       	ldd	r23, Y+40	; 0x28
    21d4:	89 a5       	ldd	r24, Y+41	; 0x29
    21d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	4a e7       	ldi	r20, 0x7A	; 122
    21de:	53 e4       	ldi	r21, 0x43	; 67
    21e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	8b a3       	std	Y+35, r24	; 0x23
    21ea:	9c a3       	std	Y+36, r25	; 0x24
    21ec:	ad a3       	std	Y+37, r26	; 0x25
    21ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21f0:	6b a1       	ldd	r22, Y+35	; 0x23
    21f2:	7c a1       	ldd	r23, Y+36	; 0x24
    21f4:	8d a1       	ldd	r24, Y+37	; 0x25
    21f6:	9e a1       	ldd	r25, Y+38	; 0x26
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e8       	ldi	r20, 0x80	; 128
    21fe:	5f e3       	ldi	r21, 0x3F	; 63
    2200:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2204:	88 23       	and	r24, r24
    2206:	2c f4       	brge	.+10     	; 0x2212 <LCD_sendCommand+0x16a>
		__ticks = 1;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	9a a3       	std	Y+34, r25	; 0x22
    220e:	89 a3       	std	Y+33, r24	; 0x21
    2210:	3f c0       	rjmp	.+126    	; 0x2290 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2212:	6b a1       	ldd	r22, Y+35	; 0x23
    2214:	7c a1       	ldd	r23, Y+36	; 0x24
    2216:	8d a1       	ldd	r24, Y+37	; 0x25
    2218:	9e a1       	ldd	r25, Y+38	; 0x26
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	3f ef       	ldi	r19, 0xFF	; 255
    221e:	4f e7       	ldi	r20, 0x7F	; 127
    2220:	57 e4       	ldi	r21, 0x47	; 71
    2222:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2226:	18 16       	cp	r1, r24
    2228:	4c f5       	brge	.+82     	; 0x227c <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222a:	6f a1       	ldd	r22, Y+39	; 0x27
    222c:	78 a5       	ldd	r23, Y+40	; 0x28
    222e:	89 a5       	ldd	r24, Y+41	; 0x29
    2230:	9a a5       	ldd	r25, Y+42	; 0x2a
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e2       	ldi	r20, 0x20	; 32
    2238:	51 e4       	ldi	r21, 0x41	; 65
    223a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	bc 01       	movw	r22, r24
    2244:	cd 01       	movw	r24, r26
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	9a a3       	std	Y+34, r25	; 0x22
    2250:	89 a3       	std	Y+33, r24	; 0x21
    2252:	0f c0       	rjmp	.+30     	; 0x2272 <LCD_sendCommand+0x1ca>
    2254:	89 e1       	ldi	r24, 0x19	; 25
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	98 a3       	std	Y+32, r25	; 0x20
    225a:	8f 8f       	std	Y+31, r24	; 0x1f
    225c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    225e:	98 a1       	ldd	r25, Y+32	; 0x20
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	f1 f7       	brne	.-4      	; 0x2260 <LCD_sendCommand+0x1b8>
    2264:	98 a3       	std	Y+32, r25	; 0x20
    2266:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2268:	89 a1       	ldd	r24, Y+33	; 0x21
    226a:	9a a1       	ldd	r25, Y+34	; 0x22
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	9a a3       	std	Y+34, r25	; 0x22
    2270:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2272:	89 a1       	ldd	r24, Y+33	; 0x21
    2274:	9a a1       	ldd	r25, Y+34	; 0x22
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	69 f7       	brne	.-38     	; 0x2254 <LCD_sendCommand+0x1ac>
    227a:	14 c0       	rjmp	.+40     	; 0x22a4 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227c:	6b a1       	ldd	r22, Y+35	; 0x23
    227e:	7c a1       	ldd	r23, Y+36	; 0x24
    2280:	8d a1       	ldd	r24, Y+37	; 0x25
    2282:	9e a1       	ldd	r25, Y+38	; 0x26
    2284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	9a a3       	std	Y+34, r25	; 0x22
    228e:	89 a3       	std	Y+33, r24	; 0x21
    2290:	89 a1       	ldd	r24, Y+33	; 0x21
    2292:	9a a1       	ldd	r25, Y+34	; 0x22
    2294:	9e 8f       	std	Y+30, r25	; 0x1e
    2296:	8d 8f       	std	Y+29, r24	; 0x1d
    2298:	8d 8d       	ldd	r24, Y+29	; 0x1d
    229a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <LCD_sendCommand+0x1f4>
    22a0:	9e 8f       	std	Y+30, r25	; 0x1e
    22a2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	69 ad       	ldd	r22, Y+57	; 0x39
    22a8:	0e 94 25 08 	call	0x104a	; 0x104a <GPIO_writePort>
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	a0 e8       	ldi	r26, 0x80	; 128
    22b2:	bf e3       	ldi	r27, 0x3F	; 63
    22b4:	89 8f       	std	Y+25, r24	; 0x19
    22b6:	9a 8f       	std	Y+26, r25	; 0x1a
    22b8:	ab 8f       	std	Y+27, r26	; 0x1b
    22ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22bc:	69 8d       	ldd	r22, Y+25	; 0x19
    22be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	4a e7       	ldi	r20, 0x7A	; 122
    22ca:	53 e4       	ldi	r21, 0x43	; 67
    22cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	8d 8b       	std	Y+21, r24	; 0x15
    22d6:	9e 8b       	std	Y+22, r25	; 0x16
    22d8:	af 8b       	std	Y+23, r26	; 0x17
    22da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22dc:	6d 89       	ldd	r22, Y+21	; 0x15
    22de:	7e 89       	ldd	r23, Y+22	; 0x16
    22e0:	8f 89       	ldd	r24, Y+23	; 0x17
    22e2:	98 8d       	ldd	r25, Y+24	; 0x18
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e8       	ldi	r20, 0x80	; 128
    22ea:	5f e3       	ldi	r21, 0x3F	; 63
    22ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f0:	88 23       	and	r24, r24
    22f2:	2c f4       	brge	.+10     	; 0x22fe <LCD_sendCommand+0x256>
		__ticks = 1;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	9c 8b       	std	Y+20, r25	; 0x14
    22fa:	8b 8b       	std	Y+19, r24	; 0x13
    22fc:	3f c0       	rjmp	.+126    	; 0x237c <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    22fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2300:	7e 89       	ldd	r23, Y+22	; 0x16
    2302:	8f 89       	ldd	r24, Y+23	; 0x17
    2304:	98 8d       	ldd	r25, Y+24	; 0x18
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	3f ef       	ldi	r19, 0xFF	; 255
    230a:	4f e7       	ldi	r20, 0x7F	; 127
    230c:	57 e4       	ldi	r21, 0x47	; 71
    230e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2312:	18 16       	cp	r1, r24
    2314:	4c f5       	brge	.+82     	; 0x2368 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2316:	69 8d       	ldd	r22, Y+25	; 0x19
    2318:	7a 8d       	ldd	r23, Y+26	; 0x1a
    231a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    231c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e2       	ldi	r20, 0x20	; 32
    2324:	51 e4       	ldi	r21, 0x41	; 65
    2326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	bc 01       	movw	r22, r24
    2330:	cd 01       	movw	r24, r26
    2332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	9c 8b       	std	Y+20, r25	; 0x14
    233c:	8b 8b       	std	Y+19, r24	; 0x13
    233e:	0f c0       	rjmp	.+30     	; 0x235e <LCD_sendCommand+0x2b6>
    2340:	89 e1       	ldi	r24, 0x19	; 25
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	9a 8b       	std	Y+18, r25	; 0x12
    2346:	89 8b       	std	Y+17, r24	; 0x11
    2348:	89 89       	ldd	r24, Y+17	; 0x11
    234a:	9a 89       	ldd	r25, Y+18	; 0x12
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <LCD_sendCommand+0x2a4>
    2350:	9a 8b       	std	Y+18, r25	; 0x12
    2352:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2354:	8b 89       	ldd	r24, Y+19	; 0x13
    2356:	9c 89       	ldd	r25, Y+20	; 0x14
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	9c 8b       	std	Y+20, r25	; 0x14
    235c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235e:	8b 89       	ldd	r24, Y+19	; 0x13
    2360:	9c 89       	ldd	r25, Y+20	; 0x14
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	69 f7       	brne	.-38     	; 0x2340 <LCD_sendCommand+0x298>
    2366:	14 c0       	rjmp	.+40     	; 0x2390 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2368:	6d 89       	ldd	r22, Y+21	; 0x15
    236a:	7e 89       	ldd	r23, Y+22	; 0x16
    236c:	8f 89       	ldd	r24, Y+23	; 0x17
    236e:	98 8d       	ldd	r25, Y+24	; 0x18
    2370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	9c 8b       	std	Y+20, r25	; 0x14
    237a:	8b 8b       	std	Y+19, r24	; 0x13
    237c:	8b 89       	ldd	r24, Y+19	; 0x13
    237e:	9c 89       	ldd	r25, Y+20	; 0x14
    2380:	98 8b       	std	Y+16, r25	; 0x10
    2382:	8f 87       	std	Y+15, r24	; 0x0f
    2384:	8f 85       	ldd	r24, Y+15	; 0x0f
    2386:	98 89       	ldd	r25, Y+16	; 0x10
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <LCD_sendCommand+0x2e0>
    238c:	98 8b       	std	Y+16, r25	; 0x10
    238e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	62 e0       	ldi	r22, 0x02	; 2
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	a0 e8       	ldi	r26, 0x80	; 128
    23a0:	bf e3       	ldi	r27, 0x3F	; 63
    23a2:	8b 87       	std	Y+11, r24	; 0x0b
    23a4:	9c 87       	std	Y+12, r25	; 0x0c
    23a6:	ad 87       	std	Y+13, r26	; 0x0d
    23a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	4a e7       	ldi	r20, 0x7A	; 122
    23b8:	53 e4       	ldi	r21, 0x43	; 67
    23ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	8f 83       	std	Y+7, r24	; 0x07
    23c4:	98 87       	std	Y+8, r25	; 0x08
    23c6:	a9 87       	std	Y+9, r26	; 0x09
    23c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ca:	6f 81       	ldd	r22, Y+7	; 0x07
    23cc:	78 85       	ldd	r23, Y+8	; 0x08
    23ce:	89 85       	ldd	r24, Y+9	; 0x09
    23d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e8       	ldi	r20, 0x80	; 128
    23d8:	5f e3       	ldi	r21, 0x3F	; 63
    23da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23de:	88 23       	and	r24, r24
    23e0:	2c f4       	brge	.+10     	; 0x23ec <LCD_sendCommand+0x344>
		__ticks = 1;
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9e 83       	std	Y+6, r25	; 0x06
    23e8:	8d 83       	std	Y+5, r24	; 0x05
    23ea:	3f c0       	rjmp	.+126    	; 0x246a <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    23ec:	6f 81       	ldd	r22, Y+7	; 0x07
    23ee:	78 85       	ldd	r23, Y+8	; 0x08
    23f0:	89 85       	ldd	r24, Y+9	; 0x09
    23f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	3f ef       	ldi	r19, 0xFF	; 255
    23f8:	4f e7       	ldi	r20, 0x7F	; 127
    23fa:	57 e4       	ldi	r21, 0x47	; 71
    23fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2400:	18 16       	cp	r1, r24
    2402:	4c f5       	brge	.+82     	; 0x2456 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2404:	6b 85       	ldd	r22, Y+11	; 0x0b
    2406:	7c 85       	ldd	r23, Y+12	; 0x0c
    2408:	8d 85       	ldd	r24, Y+13	; 0x0d
    240a:	9e 85       	ldd	r25, Y+14	; 0x0e
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e2       	ldi	r20, 0x20	; 32
    2412:	51 e4       	ldi	r21, 0x41	; 65
    2414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	bc 01       	movw	r22, r24
    241e:	cd 01       	movw	r24, r26
    2420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	8d 83       	std	Y+5, r24	; 0x05
    242c:	0f c0       	rjmp	.+30     	; 0x244c <LCD_sendCommand+0x3a4>
    242e:	89 e1       	ldi	r24, 0x19	; 25
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9c 83       	std	Y+4, r25	; 0x04
    2434:	8b 83       	std	Y+3, r24	; 0x03
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	9c 81       	ldd	r25, Y+4	; 0x04
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <LCD_sendCommand+0x392>
    243e:	9c 83       	std	Y+4, r25	; 0x04
    2440:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2442:	8d 81       	ldd	r24, Y+5	; 0x05
    2444:	9e 81       	ldd	r25, Y+6	; 0x06
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	9e 83       	std	Y+6, r25	; 0x06
    244a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244c:	8d 81       	ldd	r24, Y+5	; 0x05
    244e:	9e 81       	ldd	r25, Y+6	; 0x06
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	69 f7       	brne	.-38     	; 0x242e <LCD_sendCommand+0x386>
    2454:	14 c0       	rjmp	.+40     	; 0x247e <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2456:	6f 81       	ldd	r22, Y+7	; 0x07
    2458:	78 85       	ldd	r23, Y+8	; 0x08
    245a:	89 85       	ldd	r24, Y+9	; 0x09
    245c:	9a 85       	ldd	r25, Y+10	; 0x0a
    245e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	9e 83       	std	Y+6, r25	; 0x06
    2468:	8d 83       	std	Y+5, r24	; 0x05
    246a:	8d 81       	ldd	r24, Y+5	; 0x05
    246c:	9e 81       	ldd	r25, Y+6	; 0x06
    246e:	9a 83       	std	Y+2, r25	; 0x02
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	9a 81       	ldd	r25, Y+2	; 0x02
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	f1 f7       	brne	.-4      	; 0x2476 <LCD_sendCommand+0x3ce>
    247a:	9a 83       	std	Y+2, r25	; 0x02
    247c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    247e:	e9 96       	adiw	r28, 0x39	; 57
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	de bf       	out	0x3e, r29	; 62
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	cd bf       	out	0x3d, r28	; 61
    248a:	cf 91       	pop	r28
    248c:	df 91       	pop	r29
    248e:	08 95       	ret

00002490 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    2498:	e9 97       	sbiw	r28, 0x39	; 57
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	de bf       	out	0x3e, r29	; 62
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	cd bf       	out	0x3d, r28	; 61
    24a4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	60 e0       	ldi	r22, 0x00	; 0
    24aa:	41 e0       	ldi	r20, 0x01	; 1
    24ac:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	61 e0       	ldi	r22, 0x01	; 1
    24b4:	40 e0       	ldi	r20, 0x00	; 0
    24b6:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	a0 e8       	ldi	r26, 0x80	; 128
    24c0:	bf e3       	ldi	r27, 0x3F	; 63
    24c2:	8d ab       	std	Y+53, r24	; 0x35
    24c4:	9e ab       	std	Y+54, r25	; 0x36
    24c6:	af ab       	std	Y+55, r26	; 0x37
    24c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ca:	6d a9       	ldd	r22, Y+53	; 0x35
    24cc:	7e a9       	ldd	r23, Y+54	; 0x36
    24ce:	8f a9       	ldd	r24, Y+55	; 0x37
    24d0:	98 ad       	ldd	r25, Y+56	; 0x38
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	4a e7       	ldi	r20, 0x7A	; 122
    24d8:	53 e4       	ldi	r21, 0x43	; 67
    24da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	89 ab       	std	Y+49, r24	; 0x31
    24e4:	9a ab       	std	Y+50, r25	; 0x32
    24e6:	ab ab       	std	Y+51, r26	; 0x33
    24e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24ea:	69 a9       	ldd	r22, Y+49	; 0x31
    24ec:	7a a9       	ldd	r23, Y+50	; 0x32
    24ee:	8b a9       	ldd	r24, Y+51	; 0x33
    24f0:	9c a9       	ldd	r25, Y+52	; 0x34
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e8       	ldi	r20, 0x80	; 128
    24f8:	5f e3       	ldi	r21, 0x3F	; 63
    24fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24fe:	88 23       	and	r24, r24
    2500:	2c f4       	brge	.+10     	; 0x250c <LCD_displayCharacter+0x7c>
		__ticks = 1;
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	98 ab       	std	Y+48, r25	; 0x30
    2508:	8f a7       	std	Y+47, r24	; 0x2f
    250a:	3f c0       	rjmp	.+126    	; 0x258a <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    250c:	69 a9       	ldd	r22, Y+49	; 0x31
    250e:	7a a9       	ldd	r23, Y+50	; 0x32
    2510:	8b a9       	ldd	r24, Y+51	; 0x33
    2512:	9c a9       	ldd	r25, Y+52	; 0x34
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	3f ef       	ldi	r19, 0xFF	; 255
    2518:	4f e7       	ldi	r20, 0x7F	; 127
    251a:	57 e4       	ldi	r21, 0x47	; 71
    251c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2520:	18 16       	cp	r1, r24
    2522:	4c f5       	brge	.+82     	; 0x2576 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2524:	6d a9       	ldd	r22, Y+53	; 0x35
    2526:	7e a9       	ldd	r23, Y+54	; 0x36
    2528:	8f a9       	ldd	r24, Y+55	; 0x37
    252a:	98 ad       	ldd	r25, Y+56	; 0x38
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	40 e2       	ldi	r20, 0x20	; 32
    2532:	51 e4       	ldi	r21, 0x41	; 65
    2534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	bc 01       	movw	r22, r24
    253e:	cd 01       	movw	r24, r26
    2540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	98 ab       	std	Y+48, r25	; 0x30
    254a:	8f a7       	std	Y+47, r24	; 0x2f
    254c:	0f c0       	rjmp	.+30     	; 0x256c <LCD_displayCharacter+0xdc>
    254e:	89 e1       	ldi	r24, 0x19	; 25
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	9e a7       	std	Y+46, r25	; 0x2e
    2554:	8d a7       	std	Y+45, r24	; 0x2d
    2556:	8d a5       	ldd	r24, Y+45	; 0x2d
    2558:	9e a5       	ldd	r25, Y+46	; 0x2e
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	f1 f7       	brne	.-4      	; 0x255a <LCD_displayCharacter+0xca>
    255e:	9e a7       	std	Y+46, r25	; 0x2e
    2560:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2562:	8f a5       	ldd	r24, Y+47	; 0x2f
    2564:	98 a9       	ldd	r25, Y+48	; 0x30
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	98 ab       	std	Y+48, r25	; 0x30
    256a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    256c:	8f a5       	ldd	r24, Y+47	; 0x2f
    256e:	98 a9       	ldd	r25, Y+48	; 0x30
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	69 f7       	brne	.-38     	; 0x254e <LCD_displayCharacter+0xbe>
    2574:	14 c0       	rjmp	.+40     	; 0x259e <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2576:	69 a9       	ldd	r22, Y+49	; 0x31
    2578:	7a a9       	ldd	r23, Y+50	; 0x32
    257a:	8b a9       	ldd	r24, Y+51	; 0x33
    257c:	9c a9       	ldd	r25, Y+52	; 0x34
    257e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	98 ab       	std	Y+48, r25	; 0x30
    2588:	8f a7       	std	Y+47, r24	; 0x2f
    258a:	8f a5       	ldd	r24, Y+47	; 0x2f
    258c:	98 a9       	ldd	r25, Y+48	; 0x30
    258e:	9c a7       	std	Y+44, r25	; 0x2c
    2590:	8b a7       	std	Y+43, r24	; 0x2b
    2592:	8b a5       	ldd	r24, Y+43	; 0x2b
    2594:	9c a5       	ldd	r25, Y+44	; 0x2c
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <LCD_displayCharacter+0x106>
    259a:	9c a7       	std	Y+44, r25	; 0x2c
    259c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	62 e0       	ldi	r22, 0x02	; 2
    25a2:	41 e0       	ldi	r20, 0x01	; 1
    25a4:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	a0 e8       	ldi	r26, 0x80	; 128
    25ae:	bf e3       	ldi	r27, 0x3F	; 63
    25b0:	8f a3       	std	Y+39, r24	; 0x27
    25b2:	98 a7       	std	Y+40, r25	; 0x28
    25b4:	a9 a7       	std	Y+41, r26	; 0x29
    25b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b8:	6f a1       	ldd	r22, Y+39	; 0x27
    25ba:	78 a5       	ldd	r23, Y+40	; 0x28
    25bc:	89 a5       	ldd	r24, Y+41	; 0x29
    25be:	9a a5       	ldd	r25, Y+42	; 0x2a
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	4a e7       	ldi	r20, 0x7A	; 122
    25c6:	53 e4       	ldi	r21, 0x43	; 67
    25c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	8b a3       	std	Y+35, r24	; 0x23
    25d2:	9c a3       	std	Y+36, r25	; 0x24
    25d4:	ad a3       	std	Y+37, r26	; 0x25
    25d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25d8:	6b a1       	ldd	r22, Y+35	; 0x23
    25da:	7c a1       	ldd	r23, Y+36	; 0x24
    25dc:	8d a1       	ldd	r24, Y+37	; 0x25
    25de:	9e a1       	ldd	r25, Y+38	; 0x26
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 e8       	ldi	r20, 0x80	; 128
    25e6:	5f e3       	ldi	r21, 0x3F	; 63
    25e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ec:	88 23       	and	r24, r24
    25ee:	2c f4       	brge	.+10     	; 0x25fa <LCD_displayCharacter+0x16a>
		__ticks = 1;
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	9a a3       	std	Y+34, r25	; 0x22
    25f6:	89 a3       	std	Y+33, r24	; 0x21
    25f8:	3f c0       	rjmp	.+126    	; 0x2678 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    25fa:	6b a1       	ldd	r22, Y+35	; 0x23
    25fc:	7c a1       	ldd	r23, Y+36	; 0x24
    25fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2600:	9e a1       	ldd	r25, Y+38	; 0x26
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	3f ef       	ldi	r19, 0xFF	; 255
    2606:	4f e7       	ldi	r20, 0x7F	; 127
    2608:	57 e4       	ldi	r21, 0x47	; 71
    260a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    260e:	18 16       	cp	r1, r24
    2610:	4c f5       	brge	.+82     	; 0x2664 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2612:	6f a1       	ldd	r22, Y+39	; 0x27
    2614:	78 a5       	ldd	r23, Y+40	; 0x28
    2616:	89 a5       	ldd	r24, Y+41	; 0x29
    2618:	9a a5       	ldd	r25, Y+42	; 0x2a
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	40 e2       	ldi	r20, 0x20	; 32
    2620:	51 e4       	ldi	r21, 0x41	; 65
    2622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	bc 01       	movw	r22, r24
    262c:	cd 01       	movw	r24, r26
    262e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	9a a3       	std	Y+34, r25	; 0x22
    2638:	89 a3       	std	Y+33, r24	; 0x21
    263a:	0f c0       	rjmp	.+30     	; 0x265a <LCD_displayCharacter+0x1ca>
    263c:	89 e1       	ldi	r24, 0x19	; 25
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	98 a3       	std	Y+32, r25	; 0x20
    2642:	8f 8f       	std	Y+31, r24	; 0x1f
    2644:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2646:	98 a1       	ldd	r25, Y+32	; 0x20
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	f1 f7       	brne	.-4      	; 0x2648 <LCD_displayCharacter+0x1b8>
    264c:	98 a3       	std	Y+32, r25	; 0x20
    264e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2650:	89 a1       	ldd	r24, Y+33	; 0x21
    2652:	9a a1       	ldd	r25, Y+34	; 0x22
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	9a a3       	std	Y+34, r25	; 0x22
    2658:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    265a:	89 a1       	ldd	r24, Y+33	; 0x21
    265c:	9a a1       	ldd	r25, Y+34	; 0x22
    265e:	00 97       	sbiw	r24, 0x00	; 0
    2660:	69 f7       	brne	.-38     	; 0x263c <LCD_displayCharacter+0x1ac>
    2662:	14 c0       	rjmp	.+40     	; 0x268c <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2664:	6b a1       	ldd	r22, Y+35	; 0x23
    2666:	7c a1       	ldd	r23, Y+36	; 0x24
    2668:	8d a1       	ldd	r24, Y+37	; 0x25
    266a:	9e a1       	ldd	r25, Y+38	; 0x26
    266c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	9a a3       	std	Y+34, r25	; 0x22
    2676:	89 a3       	std	Y+33, r24	; 0x21
    2678:	89 a1       	ldd	r24, Y+33	; 0x21
    267a:	9a a1       	ldd	r25, Y+34	; 0x22
    267c:	9e 8f       	std	Y+30, r25	; 0x1e
    267e:	8d 8f       	std	Y+29, r24	; 0x1d
    2680:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2682:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	f1 f7       	brne	.-4      	; 0x2684 <LCD_displayCharacter+0x1f4>
    2688:	9e 8f       	std	Y+30, r25	; 0x1e
    268a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	69 ad       	ldd	r22, Y+57	; 0x39
    2690:	0e 94 25 08 	call	0x104a	; 0x104a <GPIO_writePort>
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	a0 e8       	ldi	r26, 0x80	; 128
    269a:	bf e3       	ldi	r27, 0x3F	; 63
    269c:	89 8f       	std	Y+25, r24	; 0x19
    269e:	9a 8f       	std	Y+26, r25	; 0x1a
    26a0:	ab 8f       	std	Y+27, r26	; 0x1b
    26a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a4:	69 8d       	ldd	r22, Y+25	; 0x19
    26a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	4a e7       	ldi	r20, 0x7A	; 122
    26b2:	53 e4       	ldi	r21, 0x43	; 67
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	8d 8b       	std	Y+21, r24	; 0x15
    26be:	9e 8b       	std	Y+22, r25	; 0x16
    26c0:	af 8b       	std	Y+23, r26	; 0x17
    26c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26c4:	6d 89       	ldd	r22, Y+21	; 0x15
    26c6:	7e 89       	ldd	r23, Y+22	; 0x16
    26c8:	8f 89       	ldd	r24, Y+23	; 0x17
    26ca:	98 8d       	ldd	r25, Y+24	; 0x18
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e8       	ldi	r20, 0x80	; 128
    26d2:	5f e3       	ldi	r21, 0x3F	; 63
    26d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26d8:	88 23       	and	r24, r24
    26da:	2c f4       	brge	.+10     	; 0x26e6 <LCD_displayCharacter+0x256>
		__ticks = 1;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	9c 8b       	std	Y+20, r25	; 0x14
    26e2:	8b 8b       	std	Y+19, r24	; 0x13
    26e4:	3f c0       	rjmp	.+126    	; 0x2764 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    26e6:	6d 89       	ldd	r22, Y+21	; 0x15
    26e8:	7e 89       	ldd	r23, Y+22	; 0x16
    26ea:	8f 89       	ldd	r24, Y+23	; 0x17
    26ec:	98 8d       	ldd	r25, Y+24	; 0x18
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	3f ef       	ldi	r19, 0xFF	; 255
    26f2:	4f e7       	ldi	r20, 0x7F	; 127
    26f4:	57 e4       	ldi	r21, 0x47	; 71
    26f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26fa:	18 16       	cp	r1, r24
    26fc:	4c f5       	brge	.+82     	; 0x2750 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2700:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2702:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2704:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e2       	ldi	r20, 0x20	; 32
    270c:	51 e4       	ldi	r21, 0x41	; 65
    270e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	bc 01       	movw	r22, r24
    2718:	cd 01       	movw	r24, r26
    271a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	9c 8b       	std	Y+20, r25	; 0x14
    2724:	8b 8b       	std	Y+19, r24	; 0x13
    2726:	0f c0       	rjmp	.+30     	; 0x2746 <LCD_displayCharacter+0x2b6>
    2728:	89 e1       	ldi	r24, 0x19	; 25
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	9a 8b       	std	Y+18, r25	; 0x12
    272e:	89 8b       	std	Y+17, r24	; 0x11
    2730:	89 89       	ldd	r24, Y+17	; 0x11
    2732:	9a 89       	ldd	r25, Y+18	; 0x12
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <LCD_displayCharacter+0x2a4>
    2738:	9a 8b       	std	Y+18, r25	; 0x12
    273a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273c:	8b 89       	ldd	r24, Y+19	; 0x13
    273e:	9c 89       	ldd	r25, Y+20	; 0x14
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	9c 8b       	std	Y+20, r25	; 0x14
    2744:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2746:	8b 89       	ldd	r24, Y+19	; 0x13
    2748:	9c 89       	ldd	r25, Y+20	; 0x14
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	69 f7       	brne	.-38     	; 0x2728 <LCD_displayCharacter+0x298>
    274e:	14 c0       	rjmp	.+40     	; 0x2778 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2750:	6d 89       	ldd	r22, Y+21	; 0x15
    2752:	7e 89       	ldd	r23, Y+22	; 0x16
    2754:	8f 89       	ldd	r24, Y+23	; 0x17
    2756:	98 8d       	ldd	r25, Y+24	; 0x18
    2758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	9c 8b       	std	Y+20, r25	; 0x14
    2762:	8b 8b       	std	Y+19, r24	; 0x13
    2764:	8b 89       	ldd	r24, Y+19	; 0x13
    2766:	9c 89       	ldd	r25, Y+20	; 0x14
    2768:	98 8b       	std	Y+16, r25	; 0x10
    276a:	8f 87       	std	Y+15, r24	; 0x0f
    276c:	8f 85       	ldd	r24, Y+15	; 0x0f
    276e:	98 89       	ldd	r25, Y+16	; 0x10
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	f1 f7       	brne	.-4      	; 0x2770 <LCD_displayCharacter+0x2e0>
    2774:	98 8b       	std	Y+16, r25	; 0x10
    2776:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	62 e0       	ldi	r22, 0x02	; 2
    277c:	40 e0       	ldi	r20, 0x00	; 0
    277e:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	a0 e8       	ldi	r26, 0x80	; 128
    2788:	bf e3       	ldi	r27, 0x3F	; 63
    278a:	8b 87       	std	Y+11, r24	; 0x0b
    278c:	9c 87       	std	Y+12, r25	; 0x0c
    278e:	ad 87       	std	Y+13, r26	; 0x0d
    2790:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2792:	6b 85       	ldd	r22, Y+11	; 0x0b
    2794:	7c 85       	ldd	r23, Y+12	; 0x0c
    2796:	8d 85       	ldd	r24, Y+13	; 0x0d
    2798:	9e 85       	ldd	r25, Y+14	; 0x0e
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	4a e7       	ldi	r20, 0x7A	; 122
    27a0:	53 e4       	ldi	r21, 0x43	; 67
    27a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	8f 83       	std	Y+7, r24	; 0x07
    27ac:	98 87       	std	Y+8, r25	; 0x08
    27ae:	a9 87       	std	Y+9, r26	; 0x09
    27b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27b2:	6f 81       	ldd	r22, Y+7	; 0x07
    27b4:	78 85       	ldd	r23, Y+8	; 0x08
    27b6:	89 85       	ldd	r24, Y+9	; 0x09
    27b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e8       	ldi	r20, 0x80	; 128
    27c0:	5f e3       	ldi	r21, 0x3F	; 63
    27c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27c6:	88 23       	and	r24, r24
    27c8:	2c f4       	brge	.+10     	; 0x27d4 <LCD_displayCharacter+0x344>
		__ticks = 1;
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	9e 83       	std	Y+6, r25	; 0x06
    27d0:	8d 83       	std	Y+5, r24	; 0x05
    27d2:	3f c0       	rjmp	.+126    	; 0x2852 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    27d4:	6f 81       	ldd	r22, Y+7	; 0x07
    27d6:	78 85       	ldd	r23, Y+8	; 0x08
    27d8:	89 85       	ldd	r24, Y+9	; 0x09
    27da:	9a 85       	ldd	r25, Y+10	; 0x0a
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	3f ef       	ldi	r19, 0xFF	; 255
    27e0:	4f e7       	ldi	r20, 0x7F	; 127
    27e2:	57 e4       	ldi	r21, 0x47	; 71
    27e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e8:	18 16       	cp	r1, r24
    27ea:	4c f5       	brge	.+82     	; 0x283e <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e2       	ldi	r20, 0x20	; 32
    27fa:	51 e4       	ldi	r21, 0x41	; 65
    27fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	bc 01       	movw	r22, r24
    2806:	cd 01       	movw	r24, r26
    2808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	9e 83       	std	Y+6, r25	; 0x06
    2812:	8d 83       	std	Y+5, r24	; 0x05
    2814:	0f c0       	rjmp	.+30     	; 0x2834 <LCD_displayCharacter+0x3a4>
    2816:	89 e1       	ldi	r24, 0x19	; 25
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	9c 83       	std	Y+4, r25	; 0x04
    281c:	8b 83       	std	Y+3, r24	; 0x03
    281e:	8b 81       	ldd	r24, Y+3	; 0x03
    2820:	9c 81       	ldd	r25, Y+4	; 0x04
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <LCD_displayCharacter+0x392>
    2826:	9c 83       	std	Y+4, r25	; 0x04
    2828:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282a:	8d 81       	ldd	r24, Y+5	; 0x05
    282c:	9e 81       	ldd	r25, Y+6	; 0x06
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	9e 83       	std	Y+6, r25	; 0x06
    2832:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2834:	8d 81       	ldd	r24, Y+5	; 0x05
    2836:	9e 81       	ldd	r25, Y+6	; 0x06
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	69 f7       	brne	.-38     	; 0x2816 <LCD_displayCharacter+0x386>
    283c:	14 c0       	rjmp	.+40     	; 0x2866 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283e:	6f 81       	ldd	r22, Y+7	; 0x07
    2840:	78 85       	ldd	r23, Y+8	; 0x08
    2842:	89 85       	ldd	r24, Y+9	; 0x09
    2844:	9a 85       	ldd	r25, Y+10	; 0x0a
    2846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	9e 83       	std	Y+6, r25	; 0x06
    2850:	8d 83       	std	Y+5, r24	; 0x05
    2852:	8d 81       	ldd	r24, Y+5	; 0x05
    2854:	9e 81       	ldd	r25, Y+6	; 0x06
    2856:	9a 83       	std	Y+2, r25	; 0x02
    2858:	89 83       	std	Y+1, r24	; 0x01
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	9a 81       	ldd	r25, Y+2	; 0x02
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	f1 f7       	brne	.-4      	; 0x285e <LCD_displayCharacter+0x3ce>
    2862:	9a 83       	std	Y+2, r25	; 0x02
    2864:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2866:	e9 96       	adiw	r28, 0x39	; 57
    2868:	0f b6       	in	r0, 0x3f	; 63
    286a:	f8 94       	cli
    286c:	de bf       	out	0x3e, r29	; 62
    286e:	0f be       	out	0x3f, r0	; 63
    2870:	cd bf       	out	0x3d, r28	; 61
    2872:	cf 91       	pop	r28
    2874:	df 91       	pop	r29
    2876:	08 95       	ret

00002878 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	00 d0       	rcall	.+0      	; 0x287e <LCD_displayString+0x6>
    287e:	0f 92       	push	r0
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
    2884:	9b 83       	std	Y+3, r25	; 0x03
    2886:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2888:	19 82       	std	Y+1, r1	; 0x01
    288a:	0e c0       	rjmp	.+28     	; 0x28a8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    288c:	89 81       	ldd	r24, Y+1	; 0x01
    288e:	28 2f       	mov	r18, r24
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	8a 81       	ldd	r24, Y+2	; 0x02
    2894:	9b 81       	ldd	r25, Y+3	; 0x03
    2896:	fc 01       	movw	r30, r24
    2898:	e2 0f       	add	r30, r18
    289a:	f3 1f       	adc	r31, r19
    289c:	80 81       	ld	r24, Z
    289e:	0e 94 48 12 	call	0x2490	; 0x2490 <LCD_displayCharacter>
		i++;
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	8f 5f       	subi	r24, 0xFF	; 255
    28a6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	28 2f       	mov	r18, r24
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	8a 81       	ldd	r24, Y+2	; 0x02
    28b0:	9b 81       	ldd	r25, Y+3	; 0x03
    28b2:	fc 01       	movw	r30, r24
    28b4:	e2 0f       	add	r30, r18
    28b6:	f3 1f       	adc	r31, r19
    28b8:	80 81       	ld	r24, Z
    28ba:	88 23       	and	r24, r24
    28bc:	39 f7       	brne	.-50     	; 0x288c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	cf 91       	pop	r28
    28c6:	df 91       	pop	r29
    28c8:	08 95       	ret

000028ca <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    28ca:	df 93       	push	r29
    28cc:	cf 93       	push	r28
    28ce:	00 d0       	rcall	.+0      	; 0x28d0 <LCD_moveCursor+0x6>
    28d0:	00 d0       	rcall	.+0      	; 0x28d2 <LCD_moveCursor+0x8>
    28d2:	0f 92       	push	r0
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	8a 83       	std	Y+2, r24	; 0x02
    28da:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    28dc:	8a 81       	ldd	r24, Y+2	; 0x02
    28de:	28 2f       	mov	r18, r24
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	3d 83       	std	Y+5, r19	; 0x05
    28e4:	2c 83       	std	Y+4, r18	; 0x04
    28e6:	8c 81       	ldd	r24, Y+4	; 0x04
    28e8:	9d 81       	ldd	r25, Y+5	; 0x05
    28ea:	81 30       	cpi	r24, 0x01	; 1
    28ec:	91 05       	cpc	r25, r1
    28ee:	c1 f0       	breq	.+48     	; 0x2920 <LCD_moveCursor+0x56>
    28f0:	2c 81       	ldd	r18, Y+4	; 0x04
    28f2:	3d 81       	ldd	r19, Y+5	; 0x05
    28f4:	22 30       	cpi	r18, 0x02	; 2
    28f6:	31 05       	cpc	r19, r1
    28f8:	2c f4       	brge	.+10     	; 0x2904 <LCD_moveCursor+0x3a>
    28fa:	8c 81       	ldd	r24, Y+4	; 0x04
    28fc:	9d 81       	ldd	r25, Y+5	; 0x05
    28fe:	00 97       	sbiw	r24, 0x00	; 0
    2900:	61 f0       	breq	.+24     	; 0x291a <LCD_moveCursor+0x50>
    2902:	19 c0       	rjmp	.+50     	; 0x2936 <LCD_moveCursor+0x6c>
    2904:	2c 81       	ldd	r18, Y+4	; 0x04
    2906:	3d 81       	ldd	r19, Y+5	; 0x05
    2908:	22 30       	cpi	r18, 0x02	; 2
    290a:	31 05       	cpc	r19, r1
    290c:	69 f0       	breq	.+26     	; 0x2928 <LCD_moveCursor+0x5e>
    290e:	8c 81       	ldd	r24, Y+4	; 0x04
    2910:	9d 81       	ldd	r25, Y+5	; 0x05
    2912:	83 30       	cpi	r24, 0x03	; 3
    2914:	91 05       	cpc	r25, r1
    2916:	61 f0       	breq	.+24     	; 0x2930 <LCD_moveCursor+0x66>
    2918:	0e c0       	rjmp	.+28     	; 0x2936 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    291a:	8b 81       	ldd	r24, Y+3	; 0x03
    291c:	89 83       	std	Y+1, r24	; 0x01
    291e:	0b c0       	rjmp	.+22     	; 0x2936 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	80 5c       	subi	r24, 0xC0	; 192
    2924:	89 83       	std	Y+1, r24	; 0x01
    2926:	07 c0       	rjmp	.+14     	; 0x2936 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2928:	8b 81       	ldd	r24, Y+3	; 0x03
    292a:	80 5f       	subi	r24, 0xF0	; 240
    292c:	89 83       	std	Y+1, r24	; 0x01
    292e:	03 c0       	rjmp	.+6      	; 0x2936 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2930:	8b 81       	ldd	r24, Y+3	; 0x03
    2932:	80 5b       	subi	r24, 0xB0	; 176
    2934:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	80 68       	ori	r24, 0x80	; 128
    293a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <LCD_sendCommand>
}
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	00 d0       	rcall	.+0      	; 0x2954 <LCD_displayStringRowColumn+0x6>
    2954:	00 d0       	rcall	.+0      	; 0x2956 <LCD_displayStringRowColumn+0x8>
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
    295a:	89 83       	std	Y+1, r24	; 0x01
    295c:	6a 83       	std	Y+2, r22	; 0x02
    295e:	5c 83       	std	Y+4, r21	; 0x04
    2960:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	6a 81       	ldd	r22, Y+2	; 0x02
    2966:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	9c 81       	ldd	r25, Y+4	; 0x04
    296e:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_displayString>
}
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	cf 91       	pop	r28
    297c:	df 91       	pop	r29
    297e:	08 95       	ret

00002980 <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    2980:	df 93       	push	r29
    2982:	cf 93       	push	r28
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
    2988:	62 97       	sbiw	r28, 0x12	; 18
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	f8 94       	cli
    298e:	de bf       	out	0x3e, r29	; 62
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	cd bf       	out	0x3d, r28	; 61
    2994:	9a 8b       	std	Y+18, r25	; 0x12
    2996:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2998:	89 89       	ldd	r24, Y+17	; 0x11
    299a:	9a 89       	ldd	r25, Y+18	; 0x12
    299c:	9e 01       	movw	r18, r28
    299e:	2f 5f       	subi	r18, 0xFF	; 255
    29a0:	3f 4f       	sbci	r19, 0xFF	; 255
    29a2:	b9 01       	movw	r22, r18
    29a4:	4a e0       	ldi	r20, 0x0A	; 10
    29a6:	50 e0       	ldi	r21, 0x00	; 0
    29a8:	0e 94 12 19 	call	0x3224	; 0x3224 <itoa>
   LCD_displayString(buff); /* Display the string */
    29ac:	ce 01       	movw	r24, r28
    29ae:	01 96       	adiw	r24, 0x01	; 1
    29b0:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_displayString>
}
    29b4:	62 96       	adiw	r28, 0x12	; 18
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	cf 91       	pop	r28
    29c2:	df 91       	pop	r29
    29c4:	08 95       	ret

000029c6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    29c6:	df 93       	push	r29
    29c8:	cf 93       	push	r28
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	0e 94 54 10 	call	0x20a8	; 0x20a8 <LCD_sendCommand>
}
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	08 95       	ret

000029da <Timer_init>:

/* Function to initialize the Timer with the given configurations
 * in a Configuration Structure
 */
void Timer_init(const Timer_Config* s_ConfigData)
{
    29da:	df 93       	push	r29
    29dc:	cf 93       	push	r28
    29de:	00 d0       	rcall	.+0      	; 0x29e0 <Timer_init+0x6>
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	9a 83       	std	Y+2, r25	; 0x02
    29e6:	89 83       	std	Y+1, r24	; 0x01
	if(s_ConfigData->timer_id == TIMER0_ID)
    29e8:	e9 81       	ldd	r30, Y+1	; 0x01
    29ea:	fa 81       	ldd	r31, Y+2	; 0x02
    29ec:	80 81       	ld	r24, Z
    29ee:	88 23       	and	r24, r24
    29f0:	09 f0       	breq	.+2      	; 0x29f4 <Timer_init+0x1a>
    29f2:	53 c0       	rjmp	.+166    	; 0x2a9a <Timer_init+0xc0>
	{
		/* Set FOC0 when working in non-PWM mode
		 * Clear WGM00 as it is always zero in Normal and CTC modes
		 * Clear COM01:00 assuming that OC0 is always disconnected
		 */
		TCCR0 = (1<<FOC0);
    29f4:	e3 e5       	ldi	r30, 0x53	; 83
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 e8       	ldi	r24, 0x80	; 128
    29fa:	80 83       	st	Z, r24
		/* Insert the Prescaler in the first 3 bits of TCCR0 register */
		TCCR0 = (TCCR0 & 0xF8) | (s_ConfigData->timer_prescaler);
    29fc:	a3 e5       	ldi	r26, 0x53	; 83
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	e3 e5       	ldi	r30, 0x53	; 83
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	98 2f       	mov	r25, r24
    2a08:	98 7f       	andi	r25, 0xF8	; 248
    2a0a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a0c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a0e:	82 85       	ldd	r24, Z+10	; 0x0a
    2a10:	89 2b       	or	r24, r25
    2a12:	8c 93       	st	X, r24
		/* Insert the timer mode in WGM01 bit in TCCR0 register */
		TCCR0 = (TCCR0 & 0xF7) | ((s_ConfigData->timer_mode)<<3);
    2a14:	a3 e5       	ldi	r26, 0x53	; 83
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	e3 e5       	ldi	r30, 0x53	; 83
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	28 2f       	mov	r18, r24
    2a20:	27 7f       	andi	r18, 0xF7	; 247
    2a22:	e9 81       	ldd	r30, Y+1	; 0x01
    2a24:	fa 81       	ldd	r31, Y+2	; 0x02
    2a26:	81 85       	ldd	r24, Z+9	; 0x09
    2a28:	88 2f       	mov	r24, r24
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	88 0f       	add	r24, r24
    2a2e:	99 1f       	adc	r25, r25
    2a30:	88 0f       	add	r24, r24
    2a32:	99 1f       	adc	r25, r25
    2a34:	88 0f       	add	r24, r24
    2a36:	99 1f       	adc	r25, r25
    2a38:	82 2b       	or	r24, r18
    2a3a:	8c 93       	st	X, r24
		/* Insert the given initial value in TCNT0 register */
		TCNT0 = s_ConfigData->initial_value;
    2a3c:	22 e5       	ldi	r18, 0x52	; 82
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	e9 81       	ldd	r30, Y+1	; 0x01
    2a42:	fa 81       	ldd	r31, Y+2	; 0x02
    2a44:	81 81       	ldd	r24, Z+1	; 0x01
    2a46:	92 81       	ldd	r25, Z+2	; 0x02
    2a48:	a3 81       	ldd	r26, Z+3	; 0x03
    2a4a:	b4 81       	ldd	r27, Z+4	; 0x04
    2a4c:	f9 01       	movw	r30, r18
    2a4e:	80 83       	st	Z, r24
		/* Insert the given compare value in OCR0 register */
		OCR0 = s_ConfigData->compare_value;
    2a50:	2c e5       	ldi	r18, 0x5C	; 92
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	e9 81       	ldd	r30, Y+1	; 0x01
    2a56:	fa 81       	ldd	r31, Y+2	; 0x02
    2a58:	85 81       	ldd	r24, Z+5	; 0x05
    2a5a:	96 81       	ldd	r25, Z+6	; 0x06
    2a5c:	a7 81       	ldd	r26, Z+7	; 0x07
    2a5e:	b0 85       	ldd	r27, Z+8	; 0x08
    2a60:	f9 01       	movw	r30, r18
    2a62:	80 83       	st	Z, r24
		/* Enable interrupt of the given mode
		 * NORMAL_MODE
		 * COMPARE_MODE
		 */
		if(s_ConfigData->timer_mode == NORMAL_MODE)
    2a64:	e9 81       	ldd	r30, Y+1	; 0x01
    2a66:	fa 81       	ldd	r31, Y+2	; 0x02
    2a68:	81 85       	ldd	r24, Z+9	; 0x09
    2a6a:	88 23       	and	r24, r24
    2a6c:	41 f4       	brne	.+16     	; 0x2a7e <Timer_init+0xa4>
		{
			TIMSK |= (1<<TOIE0);
    2a6e:	a9 e5       	ldi	r26, 0x59	; 89
    2a70:	b0 e0       	ldi	r27, 0x00	; 0
    2a72:	e9 e5       	ldi	r30, 0x59	; 89
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	81 60       	ori	r24, 0x01	; 1
    2a7a:	8c 93       	st	X, r24
    2a7c:	c3 c0       	rjmp	.+390    	; 0x2c04 <Timer_init+0x22a>
		}
		else if(s_ConfigData->timer_mode == COMPARE_MODE)
    2a7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a80:	fa 81       	ldd	r31, Y+2	; 0x02
    2a82:	81 85       	ldd	r24, Z+9	; 0x09
    2a84:	81 30       	cpi	r24, 0x01	; 1
    2a86:	09 f0       	breq	.+2      	; 0x2a8a <Timer_init+0xb0>
    2a88:	bd c0       	rjmp	.+378    	; 0x2c04 <Timer_init+0x22a>
		{
			TIMSK |= (1<<OCIE0);
    2a8a:	a9 e5       	ldi	r26, 0x59	; 89
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	e9 e5       	ldi	r30, 0x59	; 89
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	80 81       	ld	r24, Z
    2a94:	82 60       	ori	r24, 0x02	; 2
    2a96:	8c 93       	st	X, r24
    2a98:	b5 c0       	rjmp	.+362    	; 0x2c04 <Timer_init+0x22a>
		}
	}
	else if(s_ConfigData->timer_id == TIMER1_ID)
    2a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a9e:	80 81       	ld	r24, Z
    2aa0:	81 30       	cpi	r24, 0x01	; 1
    2aa2:	09 f0       	breq	.+2      	; 0x2aa6 <Timer_init+0xcc>
    2aa4:	58 c0       	rjmp	.+176    	; 0x2b56 <Timer_init+0x17c>
	{
		/* Set FOC1A when working in non-PWM mode
		 * Clear WGM11:10 as they are always zero in Normal and CTC modes
		 * Clear COM1A1:1A0:1B1:1B0 assuming that OC1A and OC1B are always disconnected
		 */
		TCCR1A = (1<<FOC1A);
    2aa6:	ef e4       	ldi	r30, 0x4F	; 79
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	88 e0       	ldi	r24, 0x08	; 8
    2aac:	80 83       	st	Z, r24
		/* Clear TCCR1B to disable ICU interrupts */
		TCCR1B = 0;
    2aae:	ee e4       	ldi	r30, 0x4E	; 78
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	10 82       	st	Z, r1
		/* Insert the timer mode in WGM12 bit in TCCR1B register */
		TCCR1B = (TCCR1B & 0xF7) | ((s_ConfigData->timer_mode)<<3);
    2ab4:	ae e4       	ldi	r26, 0x4E	; 78
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	ee e4       	ldi	r30, 0x4E	; 78
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	28 2f       	mov	r18, r24
    2ac0:	27 7f       	andi	r18, 0xF7	; 247
    2ac2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac6:	81 85       	ldd	r24, Z+9	; 0x09
    2ac8:	88 2f       	mov	r24, r24
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	88 0f       	add	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	88 0f       	add	r24, r24
    2ad2:	99 1f       	adc	r25, r25
    2ad4:	88 0f       	add	r24, r24
    2ad6:	99 1f       	adc	r25, r25
    2ad8:	82 2b       	or	r24, r18
    2ada:	8c 93       	st	X, r24
		/* Insert the Prescaler in the first 3 bits of TCCR1B register */
		TCCR1B = (TCCR1B & 0xF8) | (s_ConfigData->timer_prescaler);
    2adc:	ae e4       	ldi	r26, 0x4E	; 78
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	ee e4       	ldi	r30, 0x4E	; 78
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	98 2f       	mov	r25, r24
    2ae8:	98 7f       	andi	r25, 0xF8	; 248
    2aea:	e9 81       	ldd	r30, Y+1	; 0x01
    2aec:	fa 81       	ldd	r31, Y+2	; 0x02
    2aee:	82 85       	ldd	r24, Z+10	; 0x0a
    2af0:	89 2b       	or	r24, r25
    2af2:	8c 93       	st	X, r24
		/* Insert the given initial value in TCNT1 register */
		TCNT1 = s_ConfigData->initial_value;
    2af4:	2c e4       	ldi	r18, 0x4C	; 76
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	e9 81       	ldd	r30, Y+1	; 0x01
    2afa:	fa 81       	ldd	r31, Y+2	; 0x02
    2afc:	81 81       	ldd	r24, Z+1	; 0x01
    2afe:	92 81       	ldd	r25, Z+2	; 0x02
    2b00:	a3 81       	ldd	r26, Z+3	; 0x03
    2b02:	b4 81       	ldd	r27, Z+4	; 0x04
    2b04:	f9 01       	movw	r30, r18
    2b06:	91 83       	std	Z+1, r25	; 0x01
    2b08:	80 83       	st	Z, r24
		/* Insert the given compare value in OCR1A register */
		OCR1A = s_ConfigData->compare_value;
    2b0a:	2a e4       	ldi	r18, 0x4A	; 74
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b10:	fa 81       	ldd	r31, Y+2	; 0x02
    2b12:	85 81       	ldd	r24, Z+5	; 0x05
    2b14:	96 81       	ldd	r25, Z+6	; 0x06
    2b16:	a7 81       	ldd	r26, Z+7	; 0x07
    2b18:	b0 85       	ldd	r27, Z+8	; 0x08
    2b1a:	f9 01       	movw	r30, r18
    2b1c:	91 83       	std	Z+1, r25	; 0x01
    2b1e:	80 83       	st	Z, r24
		/* Enable interrupt of the given mode
		 * NORMAL_MODE
		 * COMPARE_MODE
		 */
		if(s_ConfigData->timer_mode == NORMAL_MODE)
    2b20:	e9 81       	ldd	r30, Y+1	; 0x01
    2b22:	fa 81       	ldd	r31, Y+2	; 0x02
    2b24:	81 85       	ldd	r24, Z+9	; 0x09
    2b26:	88 23       	and	r24, r24
    2b28:	41 f4       	brne	.+16     	; 0x2b3a <Timer_init+0x160>
		{
			TIMSK |= (1<<TOIE1);
    2b2a:	a9 e5       	ldi	r26, 0x59	; 89
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	e9 e5       	ldi	r30, 0x59	; 89
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	84 60       	ori	r24, 0x04	; 4
    2b36:	8c 93       	st	X, r24
    2b38:	65 c0       	rjmp	.+202    	; 0x2c04 <Timer_init+0x22a>
		}
		else if(s_ConfigData->timer_mode == COMPARE_MODE)
    2b3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b3e:	81 85       	ldd	r24, Z+9	; 0x09
    2b40:	81 30       	cpi	r24, 0x01	; 1
    2b42:	09 f0       	breq	.+2      	; 0x2b46 <Timer_init+0x16c>
    2b44:	5f c0       	rjmp	.+190    	; 0x2c04 <Timer_init+0x22a>
		{
			TIMSK |= (1<<OCIE1A);
    2b46:	a9 e5       	ldi	r26, 0x59	; 89
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	e9 e5       	ldi	r30, 0x59	; 89
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	80 61       	ori	r24, 0x10	; 16
    2b52:	8c 93       	st	X, r24
    2b54:	57 c0       	rjmp	.+174    	; 0x2c04 <Timer_init+0x22a>
		}
	}
	else if(s_ConfigData->timer_id == TIMER2_ID)
    2b56:	e9 81       	ldd	r30, Y+1	; 0x01
    2b58:	fa 81       	ldd	r31, Y+2	; 0x02
    2b5a:	80 81       	ld	r24, Z
    2b5c:	82 30       	cpi	r24, 0x02	; 2
    2b5e:	09 f0       	breq	.+2      	; 0x2b62 <Timer_init+0x188>
    2b60:	51 c0       	rjmp	.+162    	; 0x2c04 <Timer_init+0x22a>
	{
		/* Set FOC2 when working in non-PWM mode
		 * Clear WGM20 as it is always zero in Normal and CTC modes
		 * Clear COM21:20 assuming that OC2 is always disconnected
		 */
		TCCR2 = (1<<FOC2);
    2b62:	e5 e4       	ldi	r30, 0x45	; 69
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 e8       	ldi	r24, 0x80	; 128
    2b68:	80 83       	st	Z, r24
		/* Insert the prescaler in the first 3 bits of TCCR2 register */
		TCCR2 = (TCCR2 & 0xF8) | (s_ConfigData->timer_prescaler);
    2b6a:	a5 e4       	ldi	r26, 0x45	; 69
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	e5 e4       	ldi	r30, 0x45	; 69
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	98 2f       	mov	r25, r24
    2b76:	98 7f       	andi	r25, 0xF8	; 248
    2b78:	e9 81       	ldd	r30, Y+1	; 0x01
    2b7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b7c:	82 85       	ldd	r24, Z+10	; 0x0a
    2b7e:	89 2b       	or	r24, r25
    2b80:	8c 93       	st	X, r24
		/* Insert the timer mode in WGM21 bit in TCCR2 register */
		TCCR2 = (TCCR2 & 0xF7) | ((s_ConfigData->timer_mode)<<3);
    2b82:	a5 e4       	ldi	r26, 0x45	; 69
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	e5 e4       	ldi	r30, 0x45	; 69
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	28 2f       	mov	r18, r24
    2b8e:	27 7f       	andi	r18, 0xF7	; 247
    2b90:	e9 81       	ldd	r30, Y+1	; 0x01
    2b92:	fa 81       	ldd	r31, Y+2	; 0x02
    2b94:	81 85       	ldd	r24, Z+9	; 0x09
    2b96:	88 2f       	mov	r24, r24
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	88 0f       	add	r24, r24
    2b9c:	99 1f       	adc	r25, r25
    2b9e:	88 0f       	add	r24, r24
    2ba0:	99 1f       	adc	r25, r25
    2ba2:	88 0f       	add	r24, r24
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	82 2b       	or	r24, r18
    2ba8:	8c 93       	st	X, r24
		/* Insert the given initial value in TCNT2 register */
		TCNT2 = s_ConfigData->initial_value;
    2baa:	24 e4       	ldi	r18, 0x44	; 68
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb0:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb2:	81 81       	ldd	r24, Z+1	; 0x01
    2bb4:	92 81       	ldd	r25, Z+2	; 0x02
    2bb6:	a3 81       	ldd	r26, Z+3	; 0x03
    2bb8:	b4 81       	ldd	r27, Z+4	; 0x04
    2bba:	f9 01       	movw	r30, r18
    2bbc:	80 83       	st	Z, r24
		/* Insert the given compare value in OCR2 register */
		OCR2 = s_ConfigData->compare_value;
    2bbe:	23 e4       	ldi	r18, 0x43	; 67
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc6:	85 81       	ldd	r24, Z+5	; 0x05
    2bc8:	96 81       	ldd	r25, Z+6	; 0x06
    2bca:	a7 81       	ldd	r26, Z+7	; 0x07
    2bcc:	b0 85       	ldd	r27, Z+8	; 0x08
    2bce:	f9 01       	movw	r30, r18
    2bd0:	80 83       	st	Z, r24
		/* Enable interrupt of the given mode
		 * NORMAL_MODE
		 * COMPARE_MODE
		 */
		if(s_ConfigData->timer_mode == NORMAL_MODE)
    2bd2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd6:	81 85       	ldd	r24, Z+9	; 0x09
    2bd8:	88 23       	and	r24, r24
    2bda:	41 f4       	brne	.+16     	; 0x2bec <Timer_init+0x212>
		{
			TIMSK |= (1<<TOIE2);
    2bdc:	a9 e5       	ldi	r26, 0x59	; 89
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	e9 e5       	ldi	r30, 0x59	; 89
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	80 81       	ld	r24, Z
    2be6:	80 64       	ori	r24, 0x40	; 64
    2be8:	8c 93       	st	X, r24
    2bea:	0c c0       	rjmp	.+24     	; 0x2c04 <Timer_init+0x22a>
		}
		else if(s_ConfigData->timer_mode == COMPARE_MODE)
    2bec:	e9 81       	ldd	r30, Y+1	; 0x01
    2bee:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf0:	81 85       	ldd	r24, Z+9	; 0x09
    2bf2:	81 30       	cpi	r24, 0x01	; 1
    2bf4:	39 f4       	brne	.+14     	; 0x2c04 <Timer_init+0x22a>
		{
			TIMSK |= (1<<OCIE2);
    2bf6:	a9 e5       	ldi	r26, 0x59	; 89
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	e9 e5       	ldi	r30, 0x59	; 89
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	80 68       	ori	r24, 0x80	; 128
    2c02:	8c 93       	st	X, r24
		}
	}
}
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	cf 91       	pop	r28
    2c0a:	df 91       	pop	r29
    2c0c:	08 95       	ret

00002c0e <Timer_setCallBack0>:

/* Assign the address of the given callback function to the global variable
 * so that every time an interrupt occurs by Timer0, the callback function is executed
 */
void Timer_setCallBack0(void (*a_ptr)(void))
{
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <Timer_setCallBack0+0x6>
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	9a 83       	std	Y+2, r25	; 0x02
    2c1a:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr0 = a_ptr;
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c20:	90 93 2c 01 	sts	0x012C, r25
    2c24:	80 93 2b 01 	sts	0x012B, r24
}
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	08 95       	ret

00002c32 <Timer_setCallBack1>:

/* Assign the address of the given callback function to the global variable
 * so that every time an interrupt occurs by Timer1, the callback function is executed
 */
void Timer_setCallBack1(void (*a_ptr)(void))
{
    2c32:	df 93       	push	r29
    2c34:	cf 93       	push	r28
    2c36:	00 d0       	rcall	.+0      	; 0x2c38 <Timer_setCallBack1+0x6>
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	9a 83       	std	Y+2, r25	; 0x02
    2c3e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr1 = a_ptr;
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	9a 81       	ldd	r25, Y+2	; 0x02
    2c44:	90 93 2e 01 	sts	0x012E, r25
    2c48:	80 93 2d 01 	sts	0x012D, r24
}
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	08 95       	ret

00002c56 <Timer_setCallBack2>:

/* Assign the address of the given callback function to the global variable
 * so that every time an interrupt occurs by Timer2, the callback function is executed
 */
void Timer_setCallBack2(void (*a_ptr)(void))
{
    2c56:	df 93       	push	r29
    2c58:	cf 93       	push	r28
    2c5a:	00 d0       	rcall	.+0      	; 0x2c5c <Timer_setCallBack2+0x6>
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
    2c60:	9a 83       	std	Y+2, r25	; 0x02
    2c62:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr2 = a_ptr;
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	9a 81       	ldd	r25, Y+2	; 0x02
    2c68:	90 93 30 01 	sts	0x0130, r25
    2c6c:	80 93 2f 01 	sts	0x012F, r24
}
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	08 95       	ret

00002c7a <Timer_deInit>:

/* Function to de-initialize the required timer */
void Timer_deInit(uint8 timer_id)
{
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	0f 92       	push	r0
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
    2c84:	89 83       	std	Y+1, r24	; 0x01
	if(timer_id == TIMER0_ID)
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
    2c88:	88 23       	and	r24, r24
    2c8a:	39 f4       	brne	.+14     	; 0x2c9a <Timer_deInit+0x20>
	{
		TCCR0 = 0;
    2c8c:	e3 e5       	ldi	r30, 0x53	; 83
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	10 82       	st	Z, r1
		TCNT0 = 0;
    2c92:	e2 e5       	ldi	r30, 0x52	; 82
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	10 82       	st	Z, r1
    2c98:	17 c0       	rjmp	.+46     	; 0x2cc8 <Timer_deInit+0x4e>
	}
	else if(timer_id == TIMER1_ID)
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	81 30       	cpi	r24, 0x01	; 1
    2c9e:	59 f4       	brne	.+22     	; 0x2cb6 <Timer_deInit+0x3c>
	{
		TCCR1A = 0;
    2ca0:	ef e4       	ldi	r30, 0x4F	; 79
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	10 82       	st	Z, r1
		TCCR1B = 0;
    2ca6:	ee e4       	ldi	r30, 0x4E	; 78
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	10 82       	st	Z, r1
		TCNT1 = 0;
    2cac:	ec e4       	ldi	r30, 0x4C	; 76
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	11 82       	std	Z+1, r1	; 0x01
    2cb2:	10 82       	st	Z, r1
    2cb4:	09 c0       	rjmp	.+18     	; 0x2cc8 <Timer_deInit+0x4e>
	}
	else if(timer_id == TIMER2_ID)
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	82 30       	cpi	r24, 0x02	; 2
    2cba:	31 f4       	brne	.+12     	; 0x2cc8 <Timer_deInit+0x4e>
	{
		TCCR2 = 0;
    2cbc:	e5 e4       	ldi	r30, 0x45	; 69
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	10 82       	st	Z, r1
		TCNT2 = 0;
    2cc2:	e4 e4       	ldi	r30, 0x44	; 68
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	10 82       	st	Z, r1
	}
}
    2cc8:	0f 90       	pop	r0
    2cca:	cf 91       	pop	r28
    2ccc:	df 91       	pop	r29
    2cce:	08 95       	ret

00002cd0 <__vector_9>:

/* ISR of Timer0 in overflow mode, which is executed every time
 * an overflow occurs
 */
ISR(TIMER0_OVF_vect)
{
    2cd0:	1f 92       	push	r1
    2cd2:	0f 92       	push	r0
    2cd4:	0f b6       	in	r0, 0x3f	; 63
    2cd6:	0f 92       	push	r0
    2cd8:	11 24       	eor	r1, r1
    2cda:	2f 93       	push	r18
    2cdc:	3f 93       	push	r19
    2cde:	4f 93       	push	r20
    2ce0:	5f 93       	push	r21
    2ce2:	6f 93       	push	r22
    2ce4:	7f 93       	push	r23
    2ce6:	8f 93       	push	r24
    2ce8:	9f 93       	push	r25
    2cea:	af 93       	push	r26
    2cec:	bf 93       	push	r27
    2cee:	ef 93       	push	r30
    2cf0:	ff 93       	push	r31
    2cf2:	df 93       	push	r29
    2cf4:	cf 93       	push	r28
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
	/* Don't call the callback function unless the pointer has a value other than null */
	if(g_callBackPtr0 != NULL_PTR)
    2cfa:	80 91 2b 01 	lds	r24, 0x012B
    2cfe:	90 91 2c 01 	lds	r25, 0x012C
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	29 f0       	breq	.+10     	; 0x2d10 <__vector_9+0x40>
	{
		/* call the callback function */
		(*g_callBackPtr0)();
    2d06:	e0 91 2b 01 	lds	r30, 0x012B
    2d0a:	f0 91 2c 01 	lds	r31, 0x012C
    2d0e:	09 95       	icall
	}
}
    2d10:	cf 91       	pop	r28
    2d12:	df 91       	pop	r29
    2d14:	ff 91       	pop	r31
    2d16:	ef 91       	pop	r30
    2d18:	bf 91       	pop	r27
    2d1a:	af 91       	pop	r26
    2d1c:	9f 91       	pop	r25
    2d1e:	8f 91       	pop	r24
    2d20:	7f 91       	pop	r23
    2d22:	6f 91       	pop	r22
    2d24:	5f 91       	pop	r21
    2d26:	4f 91       	pop	r20
    2d28:	3f 91       	pop	r19
    2d2a:	2f 91       	pop	r18
    2d2c:	0f 90       	pop	r0
    2d2e:	0f be       	out	0x3f, r0	; 63
    2d30:	0f 90       	pop	r0
    2d32:	1f 90       	pop	r1
    2d34:	18 95       	reti

00002d36 <__vector_19>:

/* ISR of Timer0 in compare mode, which is executed every time
 * compare match occurs
 */
ISR(TIMER0_COMP_vect)
{
    2d36:	1f 92       	push	r1
    2d38:	0f 92       	push	r0
    2d3a:	0f b6       	in	r0, 0x3f	; 63
    2d3c:	0f 92       	push	r0
    2d3e:	11 24       	eor	r1, r1
    2d40:	2f 93       	push	r18
    2d42:	3f 93       	push	r19
    2d44:	4f 93       	push	r20
    2d46:	5f 93       	push	r21
    2d48:	6f 93       	push	r22
    2d4a:	7f 93       	push	r23
    2d4c:	8f 93       	push	r24
    2d4e:	9f 93       	push	r25
    2d50:	af 93       	push	r26
    2d52:	bf 93       	push	r27
    2d54:	ef 93       	push	r30
    2d56:	ff 93       	push	r31
    2d58:	df 93       	push	r29
    2d5a:	cf 93       	push	r28
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
	/* Don't call the callback function unless the pointer has a value other than null */
	if(g_callBackPtr0 != NULL_PTR)
    2d60:	80 91 2b 01 	lds	r24, 0x012B
    2d64:	90 91 2c 01 	lds	r25, 0x012C
    2d68:	00 97       	sbiw	r24, 0x00	; 0
    2d6a:	29 f0       	breq	.+10     	; 0x2d76 <__vector_19+0x40>
	{
		/* call the callback function */
		(*g_callBackPtr0)();
    2d6c:	e0 91 2b 01 	lds	r30, 0x012B
    2d70:	f0 91 2c 01 	lds	r31, 0x012C
    2d74:	09 95       	icall
	}
}
    2d76:	cf 91       	pop	r28
    2d78:	df 91       	pop	r29
    2d7a:	ff 91       	pop	r31
    2d7c:	ef 91       	pop	r30
    2d7e:	bf 91       	pop	r27
    2d80:	af 91       	pop	r26
    2d82:	9f 91       	pop	r25
    2d84:	8f 91       	pop	r24
    2d86:	7f 91       	pop	r23
    2d88:	6f 91       	pop	r22
    2d8a:	5f 91       	pop	r21
    2d8c:	4f 91       	pop	r20
    2d8e:	3f 91       	pop	r19
    2d90:	2f 91       	pop	r18
    2d92:	0f 90       	pop	r0
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	0f 90       	pop	r0
    2d98:	1f 90       	pop	r1
    2d9a:	18 95       	reti

00002d9c <__vector_8>:

/* ISR of Timer1 in overflow mode, which is executed every time
 * an overflow occurs
 */
ISR(TIMER1_OVF_vect)
{
    2d9c:	1f 92       	push	r1
    2d9e:	0f 92       	push	r0
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	0f 92       	push	r0
    2da4:	11 24       	eor	r1, r1
    2da6:	2f 93       	push	r18
    2da8:	3f 93       	push	r19
    2daa:	4f 93       	push	r20
    2dac:	5f 93       	push	r21
    2dae:	6f 93       	push	r22
    2db0:	7f 93       	push	r23
    2db2:	8f 93       	push	r24
    2db4:	9f 93       	push	r25
    2db6:	af 93       	push	r26
    2db8:	bf 93       	push	r27
    2dba:	ef 93       	push	r30
    2dbc:	ff 93       	push	r31
    2dbe:	df 93       	push	r29
    2dc0:	cf 93       	push	r28
    2dc2:	cd b7       	in	r28, 0x3d	; 61
    2dc4:	de b7       	in	r29, 0x3e	; 62
	/* Don't call the callback function unless the pointer has a value other than null */
	if(g_callBackPtr1 != NULL_PTR)
    2dc6:	80 91 2d 01 	lds	r24, 0x012D
    2dca:	90 91 2e 01 	lds	r25, 0x012E
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	29 f0       	breq	.+10     	; 0x2ddc <__vector_8+0x40>
	{
		/* call the callback function */
		(*g_callBackPtr1)();
    2dd2:	e0 91 2d 01 	lds	r30, 0x012D
    2dd6:	f0 91 2e 01 	lds	r31, 0x012E
    2dda:	09 95       	icall
	}
}
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	ff 91       	pop	r31
    2de2:	ef 91       	pop	r30
    2de4:	bf 91       	pop	r27
    2de6:	af 91       	pop	r26
    2de8:	9f 91       	pop	r25
    2dea:	8f 91       	pop	r24
    2dec:	7f 91       	pop	r23
    2dee:	6f 91       	pop	r22
    2df0:	5f 91       	pop	r21
    2df2:	4f 91       	pop	r20
    2df4:	3f 91       	pop	r19
    2df6:	2f 91       	pop	r18
    2df8:	0f 90       	pop	r0
    2dfa:	0f be       	out	0x3f, r0	; 63
    2dfc:	0f 90       	pop	r0
    2dfe:	1f 90       	pop	r1
    2e00:	18 95       	reti

00002e02 <__vector_6>:

/* ISR of Timer1 in compare mode, which is executed every time
 * compare match occurs
 */
ISR(TIMER1_COMPA_vect)
{
    2e02:	1f 92       	push	r1
    2e04:	0f 92       	push	r0
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	0f 92       	push	r0
    2e0a:	11 24       	eor	r1, r1
    2e0c:	2f 93       	push	r18
    2e0e:	3f 93       	push	r19
    2e10:	4f 93       	push	r20
    2e12:	5f 93       	push	r21
    2e14:	6f 93       	push	r22
    2e16:	7f 93       	push	r23
    2e18:	8f 93       	push	r24
    2e1a:	9f 93       	push	r25
    2e1c:	af 93       	push	r26
    2e1e:	bf 93       	push	r27
    2e20:	ef 93       	push	r30
    2e22:	ff 93       	push	r31
    2e24:	df 93       	push	r29
    2e26:	cf 93       	push	r28
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
	/* Don't call the callback function unless the pointer has a value other than null */
	if(g_callBackPtr1 != NULL_PTR)
    2e2c:	80 91 2d 01 	lds	r24, 0x012D
    2e30:	90 91 2e 01 	lds	r25, 0x012E
    2e34:	00 97       	sbiw	r24, 0x00	; 0
    2e36:	29 f0       	breq	.+10     	; 0x2e42 <__vector_6+0x40>
	{
		/* call the callback function */
		(*g_callBackPtr1)();
    2e38:	e0 91 2d 01 	lds	r30, 0x012D
    2e3c:	f0 91 2e 01 	lds	r31, 0x012E
    2e40:	09 95       	icall
	}
}
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	ff 91       	pop	r31
    2e48:	ef 91       	pop	r30
    2e4a:	bf 91       	pop	r27
    2e4c:	af 91       	pop	r26
    2e4e:	9f 91       	pop	r25
    2e50:	8f 91       	pop	r24
    2e52:	7f 91       	pop	r23
    2e54:	6f 91       	pop	r22
    2e56:	5f 91       	pop	r21
    2e58:	4f 91       	pop	r20
    2e5a:	3f 91       	pop	r19
    2e5c:	2f 91       	pop	r18
    2e5e:	0f 90       	pop	r0
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	0f 90       	pop	r0
    2e64:	1f 90       	pop	r1
    2e66:	18 95       	reti

00002e68 <__vector_4>:

/* ISR of Timer2 in overflow mode, which is executed every time
 * an overflow occurs
 */
ISR(TIMER2_OVF_vect)
{
    2e68:	1f 92       	push	r1
    2e6a:	0f 92       	push	r0
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	0f 92       	push	r0
    2e70:	11 24       	eor	r1, r1
    2e72:	2f 93       	push	r18
    2e74:	3f 93       	push	r19
    2e76:	4f 93       	push	r20
    2e78:	5f 93       	push	r21
    2e7a:	6f 93       	push	r22
    2e7c:	7f 93       	push	r23
    2e7e:	8f 93       	push	r24
    2e80:	9f 93       	push	r25
    2e82:	af 93       	push	r26
    2e84:	bf 93       	push	r27
    2e86:	ef 93       	push	r30
    2e88:	ff 93       	push	r31
    2e8a:	df 93       	push	r29
    2e8c:	cf 93       	push	r28
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
	/* Don't call the callback function unless the pointer has a value other than null */
	if(g_callBackPtr2 != NULL_PTR)
    2e92:	80 91 2f 01 	lds	r24, 0x012F
    2e96:	90 91 30 01 	lds	r25, 0x0130
    2e9a:	00 97       	sbiw	r24, 0x00	; 0
    2e9c:	29 f0       	breq	.+10     	; 0x2ea8 <__vector_4+0x40>
	{
		/* call the callback function */
		(*g_callBackPtr2)();
    2e9e:	e0 91 2f 01 	lds	r30, 0x012F
    2ea2:	f0 91 30 01 	lds	r31, 0x0130
    2ea6:	09 95       	icall
	}
}
    2ea8:	cf 91       	pop	r28
    2eaa:	df 91       	pop	r29
    2eac:	ff 91       	pop	r31
    2eae:	ef 91       	pop	r30
    2eb0:	bf 91       	pop	r27
    2eb2:	af 91       	pop	r26
    2eb4:	9f 91       	pop	r25
    2eb6:	8f 91       	pop	r24
    2eb8:	7f 91       	pop	r23
    2eba:	6f 91       	pop	r22
    2ebc:	5f 91       	pop	r21
    2ebe:	4f 91       	pop	r20
    2ec0:	3f 91       	pop	r19
    2ec2:	2f 91       	pop	r18
    2ec4:	0f 90       	pop	r0
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	0f 90       	pop	r0
    2eca:	1f 90       	pop	r1
    2ecc:	18 95       	reti

00002ece <__vector_3>:

/* ISR of Timer2 in compare mode, which is executed every time
 * compare match occurs
 */
ISR(TIMER2_COMP_vect)
{
    2ece:	1f 92       	push	r1
    2ed0:	0f 92       	push	r0
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	0f 92       	push	r0
    2ed6:	11 24       	eor	r1, r1
    2ed8:	2f 93       	push	r18
    2eda:	3f 93       	push	r19
    2edc:	4f 93       	push	r20
    2ede:	5f 93       	push	r21
    2ee0:	6f 93       	push	r22
    2ee2:	7f 93       	push	r23
    2ee4:	8f 93       	push	r24
    2ee6:	9f 93       	push	r25
    2ee8:	af 93       	push	r26
    2eea:	bf 93       	push	r27
    2eec:	ef 93       	push	r30
    2eee:	ff 93       	push	r31
    2ef0:	df 93       	push	r29
    2ef2:	cf 93       	push	r28
    2ef4:	cd b7       	in	r28, 0x3d	; 61
    2ef6:	de b7       	in	r29, 0x3e	; 62
	/* Don't call the callback function unless the pointer has a value other than null */
	if(g_callBackPtr2 != NULL_PTR)
    2ef8:	80 91 2f 01 	lds	r24, 0x012F
    2efc:	90 91 30 01 	lds	r25, 0x0130
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	29 f0       	breq	.+10     	; 0x2f0e <__vector_3+0x40>
	{
		/* call the callback function */
		(*g_callBackPtr2)();
    2f04:	e0 91 2f 01 	lds	r30, 0x012F
    2f08:	f0 91 30 01 	lds	r31, 0x0130
    2f0c:	09 95       	icall
	}
}
    2f0e:	cf 91       	pop	r28
    2f10:	df 91       	pop	r29
    2f12:	ff 91       	pop	r31
    2f14:	ef 91       	pop	r30
    2f16:	bf 91       	pop	r27
    2f18:	af 91       	pop	r26
    2f1a:	9f 91       	pop	r25
    2f1c:	8f 91       	pop	r24
    2f1e:	7f 91       	pop	r23
    2f20:	6f 91       	pop	r22
    2f22:	5f 91       	pop	r21
    2f24:	4f 91       	pop	r20
    2f26:	3f 91       	pop	r19
    2f28:	2f 91       	pop	r18
    2f2a:	0f 90       	pop	r0
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	0f 90       	pop	r0
    2f30:	1f 90       	pop	r1
    2f32:	18 95       	reti

00002f34 <UART_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

/* Function to initialize the UART */
void UART_init(const UART_Config* s_ConfigData)
{
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	00 d0       	rcall	.+0      	; 0x2f3a <UART_init+0x6>
    2f3a:	00 d0       	rcall	.+0      	; 0x2f3c <UART_init+0x8>
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	9c 83       	std	Y+4, r25	; 0x04
    2f42:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2f44:	1a 82       	std	Y+2, r1	; 0x02
    2f46:	19 82       	std	Y+1, r1	; 0x01
	/* Double-speed mode */
	UCSRA = (1<<U2X);
    2f48:	eb e2       	ldi	r30, 0x2B	; 43
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	82 e0       	ldi	r24, 0x02	; 2
    2f4e:	80 83       	st	Z, r24
	/* Enable Tx and Rx
	 * Disable interrupts
	 */
	UCSRB = (1<<TXEN) | (1<<RXEN);
    2f50:	ea e2       	ldi	r30, 0x2A	; 42
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	88 e1       	ldi	r24, 0x18	; 24
    2f56:	80 83       	st	Z, r24
	/* In case of 9-bit mode the set the UCSZ2 bit in the UCSRB register */
	UCSRB = (UCSRB & 0xFB) | (s_ConfigData->num_bits);
    2f58:	aa e2       	ldi	r26, 0x2A	; 42
    2f5a:	b0 e0       	ldi	r27, 0x00	; 0
    2f5c:	ea e2       	ldi	r30, 0x2A	; 42
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
    2f62:	98 2f       	mov	r25, r24
    2f64:	9b 7f       	andi	r25, 0xFB	; 251
    2f66:	eb 81       	ldd	r30, Y+3	; 0x03
    2f68:	fc 81       	ldd	r31, Y+4	; 0x04
    2f6a:	81 81       	ldd	r24, Z+1	; 0x01
    2f6c:	89 2b       	or	r24, r25
    2f6e:	8c 93       	st	X, r24
	/* Set the URSEL bit when writing in UCSRC register */
	UCSRC = (1<<URSEL);
    2f70:	e0 e4       	ldi	r30, 0x40	; 64
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	80 e8       	ldi	r24, 0x80	; 128
    2f76:	80 83       	st	Z, r24
	 * 6-Bit mode
	 * 7-Bit mode
	 * 8-Bit mode
	 * 9-Bit mode
	 */
	UCSRC = (UCSRC & 0xF9) | ((s_ConfigData->num_bits)<<1);
    2f78:	a0 e4       	ldi	r26, 0x40	; 64
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	e0 e4       	ldi	r30, 0x40	; 64
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	28 2f       	mov	r18, r24
    2f84:	29 7f       	andi	r18, 0xF9	; 249
    2f86:	eb 81       	ldd	r30, Y+3	; 0x03
    2f88:	fc 81       	ldd	r31, Y+4	; 0x04
    2f8a:	81 81       	ldd	r24, Z+1	; 0x01
    2f8c:	88 2f       	mov	r24, r24
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	88 0f       	add	r24, r24
    2f92:	99 1f       	adc	r25, r25
    2f94:	82 2b       	or	r24, r18
    2f96:	8c 93       	st	X, r24
	/* Insert the number of parity bits required
	 * Parity disabled
	 * Even Parity
	 * Odd parity
	 */
	UCSRC = (UCSRC & 0xCF) | ((s_ConfigData->parity_bit)<<4);
    2f98:	a0 e4       	ldi	r26, 0x40	; 64
    2f9a:	b0 e0       	ldi	r27, 0x00	; 0
    2f9c:	e0 e4       	ldi	r30, 0x40	; 64
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	80 81       	ld	r24, Z
    2fa2:	28 2f       	mov	r18, r24
    2fa4:	2f 7c       	andi	r18, 0xCF	; 207
    2fa6:	eb 81       	ldd	r30, Y+3	; 0x03
    2fa8:	fc 81       	ldd	r31, Y+4	; 0x04
    2faa:	82 81       	ldd	r24, Z+2	; 0x02
    2fac:	88 2f       	mov	r24, r24
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	82 95       	swap	r24
    2fb2:	92 95       	swap	r25
    2fb4:	90 7f       	andi	r25, 0xF0	; 240
    2fb6:	98 27       	eor	r25, r24
    2fb8:	80 7f       	andi	r24, 0xF0	; 240
    2fba:	98 27       	eor	r25, r24
    2fbc:	82 2b       	or	r24, r18
    2fbe:	8c 93       	st	X, r24
	/* Insert the number of stop bits required
	 * 1 stop bit
	 * 2 stop bits
	 */
	UCSRC = (UCSRC & 0xF7) | ((s_ConfigData->stop_bits)<<3);
    2fc0:	a0 e4       	ldi	r26, 0x40	; 64
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	e0 e4       	ldi	r30, 0x40	; 64
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	80 81       	ld	r24, Z
    2fca:	28 2f       	mov	r18, r24
    2fcc:	27 7f       	andi	r18, 0xF7	; 247
    2fce:	eb 81       	ldd	r30, Y+3	; 0x03
    2fd0:	fc 81       	ldd	r31, Y+4	; 0x04
    2fd2:	80 81       	ld	r24, Z
    2fd4:	88 2f       	mov	r24, r24
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	88 0f       	add	r24, r24
    2fda:	99 1f       	adc	r25, r25
    2fdc:	88 0f       	add	r24, r24
    2fde:	99 1f       	adc	r25, r25
    2fe0:	88 0f       	add	r24, r24
    2fe2:	99 1f       	adc	r25, r25
    2fe4:	82 2b       	or	r24, r18
    2fe6:	8c 93       	st	X, r24
	/* Calculate UBBR value according to the given baud_rate */
	ubrr_value = (uint16)((F_CPU / (s_ConfigData->baud_rate * 8UL)) - 1);
    2fe8:	eb 81       	ldd	r30, Y+3	; 0x03
    2fea:	fc 81       	ldd	r31, Y+4	; 0x04
    2fec:	83 81       	ldd	r24, Z+3	; 0x03
    2fee:	94 81       	ldd	r25, Z+4	; 0x04
    2ff0:	a5 81       	ldd	r26, Z+5	; 0x05
    2ff2:	b6 81       	ldd	r27, Z+6	; 0x06
    2ff4:	88 0f       	add	r24, r24
    2ff6:	99 1f       	adc	r25, r25
    2ff8:	aa 1f       	adc	r26, r26
    2ffa:	bb 1f       	adc	r27, r27
    2ffc:	88 0f       	add	r24, r24
    2ffe:	99 1f       	adc	r25, r25
    3000:	aa 1f       	adc	r26, r26
    3002:	bb 1f       	adc	r27, r27
    3004:	88 0f       	add	r24, r24
    3006:	99 1f       	adc	r25, r25
    3008:	aa 1f       	adc	r26, r26
    300a:	bb 1f       	adc	r27, r27
    300c:	9c 01       	movw	r18, r24
    300e:	ad 01       	movw	r20, r26
    3010:	80 e0       	ldi	r24, 0x00	; 0
    3012:	92 e1       	ldi	r25, 0x12	; 18
    3014:	aa e7       	ldi	r26, 0x7A	; 122
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	bc 01       	movw	r22, r24
    301a:	cd 01       	movw	r24, r26
    301c:	0e 94 b9 18 	call	0x3172	; 0x3172 <__udivmodsi4>
    3020:	da 01       	movw	r26, r20
    3022:	c9 01       	movw	r24, r18
    3024:	01 97       	sbiw	r24, 0x01	; 1
    3026:	9a 83       	std	Y+2, r25	; 0x02
    3028:	89 83       	std	Y+1, r24	; 0x01
	/* Insert first 8-bits in the UBRRL register and the rest in the UBRRH register */
	UBRRL = ubrr_value;
    302a:	e9 e2       	ldi	r30, 0x29	; 41
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	80 83       	st	Z, r24
	UBRRH = ubrr_value>>8;
    3032:	e0 e4       	ldi	r30, 0x40	; 64
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	9a 81       	ldd	r25, Y+2	; 0x02
    303a:	89 2f       	mov	r24, r25
    303c:	99 27       	eor	r25, r25
    303e:	80 83       	st	Z, r24
}
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	cf 91       	pop	r28
    304a:	df 91       	pop	r29
    304c:	08 95       	ret

0000304e <UART_sendByte>:

/*
 * Function to send a byte to another device
 */
void UART_sendByte(uint8 data)
{
    304e:	df 93       	push	r29
    3050:	cf 93       	push	r28
    3052:	0f 92       	push	r0
    3054:	cd b7       	in	r28, 0x3d	; 61
    3056:	de b7       	in	r29, 0x3e	; 62
    3058:	89 83       	std	Y+1, r24	; 0x01
	/* Wait until the UDR is empty and ready to send a byte */
	while(BIT_IS_CLEAR(UCSRA, UDRE)) {}
    305a:	eb e2       	ldi	r30, 0x2B	; 43
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	80 81       	ld	r24, Z
    3060:	88 2f       	mov	r24, r24
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	80 72       	andi	r24, 0x20	; 32
    3066:	90 70       	andi	r25, 0x00	; 0
    3068:	00 97       	sbiw	r24, 0x00	; 0
    306a:	b9 f3       	breq	.-18     	; 0x305a <UART_sendByte+0xc>
	UDR = data;
    306c:	ec e2       	ldi	r30, 0x2C	; 44
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	80 83       	st	Z, r24
}
    3074:	0f 90       	pop	r0
    3076:	cf 91       	pop	r28
    3078:	df 91       	pop	r29
    307a:	08 95       	ret

0000307c <UART_receiveByte>:

/*
 * Function to receive a byte from another device
 */
uint8 UART_receiveByte(void)
{
    307c:	df 93       	push	r29
    307e:	cf 93       	push	r28
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
	/* Wait until receiving is complete */
	while(BIT_IS_CLEAR(UCSRA, RXC)) {}
    3084:	eb e2       	ldi	r30, 0x2B	; 43
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	80 81       	ld	r24, Z
    308a:	88 23       	and	r24, r24
    308c:	dc f7       	brge	.-10     	; 0x3084 <UART_receiveByte+0x8>
	return UDR;
    308e:	ec e2       	ldi	r30, 0x2C	; 44
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	80 81       	ld	r24, Z
}
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <UART_sendString>:

/*
 * Function to send a string to another device
 */
void UART_sendString(const char *str)
{
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	00 d0       	rcall	.+0      	; 0x30a0 <UART_sendString+0x6>
    30a0:	0f 92       	push	r0
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	9b 83       	std	Y+3, r25	; 0x03
    30a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    30aa:	19 82       	std	Y+1, r1	; 0x01
    30ac:	0e c0       	rjmp	.+28     	; 0x30ca <UART_sendString+0x30>
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	28 2f       	mov	r18, r24
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	8a 81       	ldd	r24, Y+2	; 0x02
    30b6:	9b 81       	ldd	r25, Y+3	; 0x03
    30b8:	fc 01       	movw	r30, r24
    30ba:	e2 0f       	add	r30, r18
    30bc:	f3 1f       	adc	r31, r19
    30be:	80 81       	ld	r24, Z
    30c0:	0e 94 27 18 	call	0x304e	; 0x304e <UART_sendByte>
		i++;
    30c4:	89 81       	ldd	r24, Y+1	; 0x01
    30c6:	8f 5f       	subi	r24, 0xFF	; 255
    30c8:	89 83       	std	Y+1, r24	; 0x01
 * Function to send a string to another device
 */
void UART_sendString(const char *str)
{
	uint8 i = 0;
	while(str[i] != '\0')
    30ca:	89 81       	ldd	r24, Y+1	; 0x01
    30cc:	28 2f       	mov	r18, r24
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	8a 81       	ldd	r24, Y+2	; 0x02
    30d2:	9b 81       	ldd	r25, Y+3	; 0x03
    30d4:	fc 01       	movw	r30, r24
    30d6:	e2 0f       	add	r30, r18
    30d8:	f3 1f       	adc	r31, r19
    30da:	80 81       	ld	r24, Z
    30dc:	88 23       	and	r24, r24
    30de:	39 f7       	brne	.-50     	; 0x30ae <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}
}
    30e0:	0f 90       	pop	r0
    30e2:	0f 90       	pop	r0
    30e4:	0f 90       	pop	r0
    30e6:	cf 91       	pop	r28
    30e8:	df 91       	pop	r29
    30ea:	08 95       	ret

000030ec <UART_receiveString>:

/*
 * Function to receive a string from another device
 */
void UART_receiveString(char *str)
{
    30ec:	0f 93       	push	r16
    30ee:	1f 93       	push	r17
    30f0:	df 93       	push	r29
    30f2:	cf 93       	push	r28
    30f4:	00 d0       	rcall	.+0      	; 0x30f6 <UART_receiveString+0xa>
    30f6:	0f 92       	push	r0
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
    30fc:	9b 83       	std	Y+3, r25	; 0x03
    30fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3100:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the first byte only to be able to check for the special Character
	 * which determines the end of the string which is '@'
	 */
	str[i] = UART_receiveByte();
    3102:	89 81       	ldd	r24, Y+1	; 0x01
    3104:	28 2f       	mov	r18, r24
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	8a 81       	ldd	r24, Y+2	; 0x02
    310a:	9b 81       	ldd	r25, Y+3	; 0x03
    310c:	8c 01       	movw	r16, r24
    310e:	02 0f       	add	r16, r18
    3110:	13 1f       	adc	r17, r19
    3112:	0e 94 3e 18 	call	0x307c	; 0x307c <UART_receiveByte>
    3116:	f8 01       	movw	r30, r16
    3118:	80 83       	st	Z, r24
    311a:	0f c0       	rjmp	.+30     	; 0x313a <UART_receiveString+0x4e>
	/* Receive until '@' is pressed */
	while(str[i] != '@')
	{
		i++;
    311c:	89 81       	ldd	r24, Y+1	; 0x01
    311e:	8f 5f       	subi	r24, 0xFF	; 255
    3120:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_receiveByte();
    3122:	89 81       	ldd	r24, Y+1	; 0x01
    3124:	28 2f       	mov	r18, r24
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	8a 81       	ldd	r24, Y+2	; 0x02
    312a:	9b 81       	ldd	r25, Y+3	; 0x03
    312c:	8c 01       	movw	r16, r24
    312e:	02 0f       	add	r16, r18
    3130:	13 1f       	adc	r17, r19
    3132:	0e 94 3e 18 	call	0x307c	; 0x307c <UART_receiveByte>
    3136:	f8 01       	movw	r30, r16
    3138:	80 83       	st	Z, r24
	/* Receive the first byte only to be able to check for the special Character
	 * which determines the end of the string which is '@'
	 */
	str[i] = UART_receiveByte();
	/* Receive until '@' is pressed */
	while(str[i] != '@')
    313a:	89 81       	ldd	r24, Y+1	; 0x01
    313c:	28 2f       	mov	r18, r24
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	8a 81       	ldd	r24, Y+2	; 0x02
    3142:	9b 81       	ldd	r25, Y+3	; 0x03
    3144:	fc 01       	movw	r30, r24
    3146:	e2 0f       	add	r30, r18
    3148:	f3 1f       	adc	r31, r19
    314a:	80 81       	ld	r24, Z
    314c:	80 34       	cpi	r24, 0x40	; 64
    314e:	31 f7       	brne	.-52     	; 0x311c <UART_receiveString+0x30>
	{
		i++;
		str[i] = UART_receiveByte();
	}
	/* Terminate the string with null terminator to indiciate the end of the string */
	str[i] = '\0';
    3150:	89 81       	ldd	r24, Y+1	; 0x01
    3152:	28 2f       	mov	r18, r24
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	8a 81       	ldd	r24, Y+2	; 0x02
    3158:	9b 81       	ldd	r25, Y+3	; 0x03
    315a:	fc 01       	movw	r30, r24
    315c:	e2 0f       	add	r30, r18
    315e:	f3 1f       	adc	r31, r19
    3160:	10 82       	st	Z, r1
}
    3162:	0f 90       	pop	r0
    3164:	0f 90       	pop	r0
    3166:	0f 90       	pop	r0
    3168:	cf 91       	pop	r28
    316a:	df 91       	pop	r29
    316c:	1f 91       	pop	r17
    316e:	0f 91       	pop	r16
    3170:	08 95       	ret

00003172 <__udivmodsi4>:
    3172:	a1 e2       	ldi	r26, 0x21	; 33
    3174:	1a 2e       	mov	r1, r26
    3176:	aa 1b       	sub	r26, r26
    3178:	bb 1b       	sub	r27, r27
    317a:	fd 01       	movw	r30, r26
    317c:	0d c0       	rjmp	.+26     	; 0x3198 <__udivmodsi4_ep>

0000317e <__udivmodsi4_loop>:
    317e:	aa 1f       	adc	r26, r26
    3180:	bb 1f       	adc	r27, r27
    3182:	ee 1f       	adc	r30, r30
    3184:	ff 1f       	adc	r31, r31
    3186:	a2 17       	cp	r26, r18
    3188:	b3 07       	cpc	r27, r19
    318a:	e4 07       	cpc	r30, r20
    318c:	f5 07       	cpc	r31, r21
    318e:	20 f0       	brcs	.+8      	; 0x3198 <__udivmodsi4_ep>
    3190:	a2 1b       	sub	r26, r18
    3192:	b3 0b       	sbc	r27, r19
    3194:	e4 0b       	sbc	r30, r20
    3196:	f5 0b       	sbc	r31, r21

00003198 <__udivmodsi4_ep>:
    3198:	66 1f       	adc	r22, r22
    319a:	77 1f       	adc	r23, r23
    319c:	88 1f       	adc	r24, r24
    319e:	99 1f       	adc	r25, r25
    31a0:	1a 94       	dec	r1
    31a2:	69 f7       	brne	.-38     	; 0x317e <__udivmodsi4_loop>
    31a4:	60 95       	com	r22
    31a6:	70 95       	com	r23
    31a8:	80 95       	com	r24
    31aa:	90 95       	com	r25
    31ac:	9b 01       	movw	r18, r22
    31ae:	ac 01       	movw	r20, r24
    31b0:	bd 01       	movw	r22, r26
    31b2:	cf 01       	movw	r24, r30
    31b4:	08 95       	ret

000031b6 <__prologue_saves__>:
    31b6:	2f 92       	push	r2
    31b8:	3f 92       	push	r3
    31ba:	4f 92       	push	r4
    31bc:	5f 92       	push	r5
    31be:	6f 92       	push	r6
    31c0:	7f 92       	push	r7
    31c2:	8f 92       	push	r8
    31c4:	9f 92       	push	r9
    31c6:	af 92       	push	r10
    31c8:	bf 92       	push	r11
    31ca:	cf 92       	push	r12
    31cc:	df 92       	push	r13
    31ce:	ef 92       	push	r14
    31d0:	ff 92       	push	r15
    31d2:	0f 93       	push	r16
    31d4:	1f 93       	push	r17
    31d6:	cf 93       	push	r28
    31d8:	df 93       	push	r29
    31da:	cd b7       	in	r28, 0x3d	; 61
    31dc:	de b7       	in	r29, 0x3e	; 62
    31de:	ca 1b       	sub	r28, r26
    31e0:	db 0b       	sbc	r29, r27
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	de bf       	out	0x3e, r29	; 62
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	cd bf       	out	0x3d, r28	; 61
    31ec:	09 94       	ijmp

000031ee <__epilogue_restores__>:
    31ee:	2a 88       	ldd	r2, Y+18	; 0x12
    31f0:	39 88       	ldd	r3, Y+17	; 0x11
    31f2:	48 88       	ldd	r4, Y+16	; 0x10
    31f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    31f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    31f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    31fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    31fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    31fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    3200:	b9 84       	ldd	r11, Y+9	; 0x09
    3202:	c8 84       	ldd	r12, Y+8	; 0x08
    3204:	df 80       	ldd	r13, Y+7	; 0x07
    3206:	ee 80       	ldd	r14, Y+6	; 0x06
    3208:	fd 80       	ldd	r15, Y+5	; 0x05
    320a:	0c 81       	ldd	r16, Y+4	; 0x04
    320c:	1b 81       	ldd	r17, Y+3	; 0x03
    320e:	aa 81       	ldd	r26, Y+2	; 0x02
    3210:	b9 81       	ldd	r27, Y+1	; 0x01
    3212:	ce 0f       	add	r28, r30
    3214:	d1 1d       	adc	r29, r1
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	cd bf       	out	0x3d, r28	; 61
    3220:	ed 01       	movw	r28, r26
    3222:	08 95       	ret

00003224 <itoa>:
    3224:	fb 01       	movw	r30, r22
    3226:	9f 01       	movw	r18, r30
    3228:	e8 94       	clt
    322a:	42 30       	cpi	r20, 0x02	; 2
    322c:	c4 f0       	brlt	.+48     	; 0x325e <itoa+0x3a>
    322e:	45 32       	cpi	r20, 0x25	; 37
    3230:	b4 f4       	brge	.+44     	; 0x325e <itoa+0x3a>
    3232:	4a 30       	cpi	r20, 0x0A	; 10
    3234:	29 f4       	brne	.+10     	; 0x3240 <itoa+0x1c>
    3236:	97 fb       	bst	r25, 7
    3238:	1e f4       	brtc	.+6      	; 0x3240 <itoa+0x1c>
    323a:	90 95       	com	r25
    323c:	81 95       	neg	r24
    323e:	9f 4f       	sbci	r25, 0xFF	; 255
    3240:	64 2f       	mov	r22, r20
    3242:	77 27       	eor	r23, r23
    3244:	0e 94 43 19 	call	0x3286	; 0x3286 <__udivmodhi4>
    3248:	80 5d       	subi	r24, 0xD0	; 208
    324a:	8a 33       	cpi	r24, 0x3A	; 58
    324c:	0c f0       	brlt	.+2      	; 0x3250 <itoa+0x2c>
    324e:	89 5d       	subi	r24, 0xD9	; 217
    3250:	81 93       	st	Z+, r24
    3252:	cb 01       	movw	r24, r22
    3254:	00 97       	sbiw	r24, 0x00	; 0
    3256:	a1 f7       	brne	.-24     	; 0x3240 <itoa+0x1c>
    3258:	16 f4       	brtc	.+4      	; 0x325e <itoa+0x3a>
    325a:	5d e2       	ldi	r21, 0x2D	; 45
    325c:	51 93       	st	Z+, r21
    325e:	10 82       	st	Z, r1
    3260:	c9 01       	movw	r24, r18
    3262:	0c 94 33 19 	jmp	0x3266	; 0x3266 <strrev>

00003266 <strrev>:
    3266:	dc 01       	movw	r26, r24
    3268:	fc 01       	movw	r30, r24
    326a:	67 2f       	mov	r22, r23
    326c:	71 91       	ld	r23, Z+
    326e:	77 23       	and	r23, r23
    3270:	e1 f7       	brne	.-8      	; 0x326a <strrev+0x4>
    3272:	32 97       	sbiw	r30, 0x02	; 2
    3274:	04 c0       	rjmp	.+8      	; 0x327e <strrev+0x18>
    3276:	7c 91       	ld	r23, X
    3278:	6d 93       	st	X+, r22
    327a:	70 83       	st	Z, r23
    327c:	62 91       	ld	r22, -Z
    327e:	ae 17       	cp	r26, r30
    3280:	bf 07       	cpc	r27, r31
    3282:	c8 f3       	brcs	.-14     	; 0x3276 <strrev+0x10>
    3284:	08 95       	ret

00003286 <__udivmodhi4>:
    3286:	aa 1b       	sub	r26, r26
    3288:	bb 1b       	sub	r27, r27
    328a:	51 e1       	ldi	r21, 0x11	; 17
    328c:	07 c0       	rjmp	.+14     	; 0x329c <__udivmodhi4_ep>

0000328e <__udivmodhi4_loop>:
    328e:	aa 1f       	adc	r26, r26
    3290:	bb 1f       	adc	r27, r27
    3292:	a6 17       	cp	r26, r22
    3294:	b7 07       	cpc	r27, r23
    3296:	10 f0       	brcs	.+4      	; 0x329c <__udivmodhi4_ep>
    3298:	a6 1b       	sub	r26, r22
    329a:	b7 0b       	sbc	r27, r23

0000329c <__udivmodhi4_ep>:
    329c:	88 1f       	adc	r24, r24
    329e:	99 1f       	adc	r25, r25
    32a0:	5a 95       	dec	r21
    32a2:	a9 f7       	brne	.-22     	; 0x328e <__udivmodhi4_loop>
    32a4:	80 95       	com	r24
    32a6:	90 95       	com	r25
    32a8:	bc 01       	movw	r22, r24
    32aa:	cd 01       	movw	r24, r26
    32ac:	08 95       	ret

000032ae <_exit>:
    32ae:	f8 94       	cli

000032b0 <__stop_program>:
    32b0:	ff cf       	rjmp	.-2      	; 0x32b0 <__stop_program>
