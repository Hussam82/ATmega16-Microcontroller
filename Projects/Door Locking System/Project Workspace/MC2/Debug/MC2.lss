
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000222c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000222c  000022c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800080  00800080  000022e0  2**0
                  ALLOC
  3 .stab         000023e8  00000000  00000000  000022e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013b7  00000000  00000000  000046c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007978  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008863  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009610  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000099fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a1cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__vector_3>
      10:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__vector_8>
      24:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c9 07 	call	0xf92	; 0xf92 <main>
      8a:	0c 94 14 11 	jmp	0x2228	; 0x2228 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f9 10 	jmp	0x21f2	; 0x21f2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 05 11 	jmp	0x220a	; 0x220a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 05 11 	jmp	0x220a	; 0x220a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f9 10 	jmp	0x21f2	; 0x21f2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 05 11 	jmp	0x220a	; 0x220a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 05 11 	jmp	0x220a	; 0x220a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 05 11 	jmp	0x220a	; 0x220a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ed 10 	jmp	0x21da	; 0x21da <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

/* Function to initialize the Buzzer */
void Buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Setup the Pin as o/p pin */
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	64 e0       	ldi	r22, 0x04	; 4
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 f7 08 	call	0x11ee	; 0x11ee <GPIO_setupPinDirection>
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <Buzzer_on>:

/* Function to turn on the Buzzer */
void Buzzer_on(void)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
	/* Write one to buzzer pin */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	64 e0       	ldi	r22, 0x04	; 4
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <Buzzer_off>:

/* Function to turn off the Buzzer */
void Buzzer_off(void)
{
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
	/* Write zero to the buzzer pin */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	64 e0       	ldi	r22, 0x04	; 4
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <APP_rotateMotor>:
 * Rotate the motor for 15 seconds in Clockwise direction
 * Stop the motor for 3 seconds
 * Rotate the motor for 15 seconds in Anti-clockwise direction
 */
void APP_rotateMotor(void)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
     b96:	80 91 80 00 	lds	r24, 0x0080
     b9a:	8f 5f       	subi	r24, 0xFF	; 255
     b9c:	80 93 80 00 	sts	0x0080, r24
	if(g_ticks == 1)
     ba0:	80 91 80 00 	lds	r24, 0x0080
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	19 f4       	brne	.+6      	; 0xbae <APP_rotateMotor+0x20>
	{
		DcMotor_rotateCW();
     ba8:	0e 94 18 0c 	call	0x1830	; 0x1830 <DcMotor_rotateCW>
     bac:	1b c0       	rjmp	.+54     	; 0xbe4 <APP_rotateMotor+0x56>
	}
	else if(g_ticks == 15)
     bae:	80 91 80 00 	lds	r24, 0x0080
     bb2:	8f 30       	cpi	r24, 0x0F	; 15
     bb4:	19 f4       	brne	.+6      	; 0xbbc <APP_rotateMotor+0x2e>
	{
		DcMotor_stop();
     bb6:	0e 94 3a 0c 	call	0x1874	; 0x1874 <DcMotor_stop>
     bba:	14 c0       	rjmp	.+40     	; 0xbe4 <APP_rotateMotor+0x56>
	}
	else if(g_ticks == 18)
     bbc:	80 91 80 00 	lds	r24, 0x0080
     bc0:	82 31       	cpi	r24, 0x12	; 18
     bc2:	19 f4       	brne	.+6      	; 0xbca <APP_rotateMotor+0x3c>
	{
		DcMotor_rotateACW();
     bc4:	0e 94 29 0c 	call	0x1852	; 0x1852 <DcMotor_rotateACW>
     bc8:	0d c0       	rjmp	.+26     	; 0xbe4 <APP_rotateMotor+0x56>
	}
	else if(g_ticks == 33)
     bca:	80 91 80 00 	lds	r24, 0x0080
     bce:	81 32       	cpi	r24, 0x21	; 33
     bd0:	49 f4       	brne	.+18     	; 0xbe4 <APP_rotateMotor+0x56>
	{
		/* Reset the ticks when done */
		g_ticks = 0;
     bd2:	10 92 80 00 	sts	0x0080, r1
		/* Clear the flag when done */
		term_flag = 0;
     bd6:	10 92 82 00 	sts	0x0082, r1
		DcMotor_stop();
     bda:	0e 94 3a 0c 	call	0x1874	; 0x1874 <DcMotor_stop>
		/* De-initialize the timer when done */
		Timer_deInit(TIMER1_ID);
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <Timer_deInit>
	}
}
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret

00000bea <APP_buzzerTrigger>:
 * The buzzer is turned on for one minute then it
 * is turned off to indicate that the pin has been
 * entered 3 times wrong
 */
void APP_buzzerTrigger(void)
{
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
	g_ticks1++;
     bf2:	80 91 81 00 	lds	r24, 0x0081
     bf6:	8f 5f       	subi	r24, 0xFF	; 255
     bf8:	80 93 81 00 	sts	0x0081, r24
	if(g_ticks1 == 1)
     bfc:	80 91 81 00 	lds	r24, 0x0081
     c00:	81 30       	cpi	r24, 0x01	; 1
     c02:	19 f4       	brne	.+6      	; 0xc0a <APP_buzzerTrigger+0x20>
	{
		Buzzer_on();
     c04:	0e 94 af 05 	call	0xb5e	; 0xb5e <Buzzer_on>
     c08:	0d c0       	rjmp	.+26     	; 0xc24 <APP_buzzerTrigger+0x3a>
	}
	else if(g_ticks1 == 60)
     c0a:	80 91 81 00 	lds	r24, 0x0081
     c0e:	8c 33       	cpi	r24, 0x3C	; 60
     c10:	49 f4       	brne	.+18     	; 0xc24 <APP_buzzerTrigger+0x3a>
	{
		/* Reset the ticks when done */
		g_ticks1 = 0;
     c12:	10 92 81 00 	sts	0x0081, r1
		/* Clear the flag when done */
		term_flag = 0;
     c16:	10 92 82 00 	sts	0x0082, r1
		Buzzer_off();
     c1a:	0e 94 bb 05 	call	0xb76	; 0xb76 <Buzzer_off>
		/* De-initialize the timer when done */
		Timer_deInit(TIMER1_ID);
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <Timer_deInit>
	}
}
     c24:	cf 91       	pop	r28
     c26:	df 91       	pop	r29
     c28:	08 95       	ret

00000c2a <APP_storePin>:

/* Function to store the pin the external EEPROM after
 * taking it from MC1
 */
void APP_storePin(void)
{
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	df 93       	push	r29
     c30:	cf 93       	push	r28
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	64 97       	sbiw	r28, 0x14	; 20
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	/* Array to hold the Pin */
	uint8 pin[5];
	/* Receive the 5-digit PIN */
	UART_sendByte(CONTROL_READY);
     c42:	81 e3       	ldi	r24, 0x31	; 49
     c44:	0e 94 29 10 	call	0x2052	; 0x2052 <UART_sendByte>
	for(i = 0; i < 5; i++)
     c48:	1f 86       	std	Y+15, r1	; 0x0f
     c4a:	0f c0       	rjmp	.+30     	; 0xc6a <APP_storePin+0x40>
	{
		pin[i] = UART_receiveByte();
     c4c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c4e:	08 2f       	mov	r16, r24
     c50:	10 e0       	ldi	r17, 0x00	; 0
     c52:	0e 94 40 10 	call	0x2080	; 0x2080 <UART_receiveByte>
     c56:	28 2f       	mov	r18, r24
     c58:	ce 01       	movw	r24, r28
     c5a:	40 96       	adiw	r24, 0x10	; 16
     c5c:	fc 01       	movw	r30, r24
     c5e:	e0 0f       	add	r30, r16
     c60:	f1 1f       	adc	r31, r17
     c62:	20 83       	st	Z, r18
	uint8 i;
	/* Array to hold the Pin */
	uint8 pin[5];
	/* Receive the 5-digit PIN */
	UART_sendByte(CONTROL_READY);
	for(i = 0; i < 5; i++)
     c64:	8f 85       	ldd	r24, Y+15	; 0x0f
     c66:	8f 5f       	subi	r24, 0xFF	; 255
     c68:	8f 87       	std	Y+15, r24	; 0x0f
     c6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c6c:	85 30       	cpi	r24, 0x05	; 5
     c6e:	70 f3       	brcs	.-36     	; 0xc4c <APP_storePin+0x22>
	{
		pin[i] = UART_receiveByte();
	}

	/* Store the PIN in the EEPROM */
	for(i = 0; i < 5; i++)
     c70:	1f 86       	std	Y+15, r1	; 0x0f
     c72:	85 c0       	rjmp	.+266    	; 0xd7e <APP_storePin+0x154>
	{
		EEPROM_writeByte(i, pin[i]);
     c74:	8f 85       	ldd	r24, Y+15	; 0x0f
     c76:	48 2f       	mov	r20, r24
     c78:	50 e0       	ldi	r21, 0x00	; 0
     c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	ce 01       	movw	r24, r28
     c82:	40 96       	adiw	r24, 0x10	; 16
     c84:	fc 01       	movw	r30, r24
     c86:	e2 0f       	add	r30, r18
     c88:	f3 1f       	adc	r31, r19
     c8a:	20 81       	ld	r18, Z
     c8c:	ca 01       	movw	r24, r20
     c8e:	62 2f       	mov	r22, r18
     c90:	0e 94 56 08 	call	0x10ac	; 0x10ac <EEPROM_writeByte>
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	a0 e2       	ldi	r26, 0x20	; 32
     c9a:	b1 e4       	ldi	r27, 0x41	; 65
     c9c:	8b 87       	std	Y+11, r24	; 0x0b
     c9e:	9c 87       	std	Y+12, r25	; 0x0c
     ca0:	ad 87       	std	Y+13, r26	; 0x0d
     ca2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ca6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
     caa:	9e 85       	ldd	r25, Y+14	; 0x0e
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	4a ef       	ldi	r20, 0xFA	; 250
     cb2:	54 e4       	ldi	r21, 0x44	; 68
     cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb8:	dc 01       	movw	r26, r24
     cba:	cb 01       	movw	r24, r22
     cbc:	8f 83       	std	Y+7, r24	; 0x07
     cbe:	98 87       	std	Y+8, r25	; 0x08
     cc0:	a9 87       	std	Y+9, r26	; 0x09
     cc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cc4:	6f 81       	ldd	r22, Y+7	; 0x07
     cc6:	78 85       	ldd	r23, Y+8	; 0x08
     cc8:	89 85       	ldd	r24, Y+9	; 0x09
     cca:	9a 85       	ldd	r25, Y+10	; 0x0a
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	40 e8       	ldi	r20, 0x80	; 128
     cd2:	5f e3       	ldi	r21, 0x3F	; 63
     cd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cd8:	88 23       	and	r24, r24
     cda:	2c f4       	brge	.+10     	; 0xce6 <APP_storePin+0xbc>
		__ticks = 1;
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	9e 83       	std	Y+6, r25	; 0x06
     ce2:	8d 83       	std	Y+5, r24	; 0x05
     ce4:	3f c0       	rjmp	.+126    	; 0xd64 <APP_storePin+0x13a>
	else if (__tmp > 65535)
     ce6:	6f 81       	ldd	r22, Y+7	; 0x07
     ce8:	78 85       	ldd	r23, Y+8	; 0x08
     cea:	89 85       	ldd	r24, Y+9	; 0x09
     cec:	9a 85       	ldd	r25, Y+10	; 0x0a
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	3f ef       	ldi	r19, 0xFF	; 255
     cf2:	4f e7       	ldi	r20, 0x7F	; 127
     cf4:	57 e4       	ldi	r21, 0x47	; 71
     cf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cfa:	18 16       	cp	r1, r24
     cfc:	4c f5       	brge	.+82     	; 0xd50 <APP_storePin+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
     d00:	7c 85       	ldd	r23, Y+12	; 0x0c
     d02:	8d 85       	ldd	r24, Y+13	; 0x0d
     d04:	9e 85       	ldd	r25, Y+14	; 0x0e
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 e2       	ldi	r20, 0x20	; 32
     d0c:	51 e4       	ldi	r21, 0x41	; 65
     d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	bc 01       	movw	r22, r24
     d18:	cd 01       	movw	r24, r26
     d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	9e 83       	std	Y+6, r25	; 0x06
     d24:	8d 83       	std	Y+5, r24	; 0x05
     d26:	0f c0       	rjmp	.+30     	; 0xd46 <APP_storePin+0x11c>
     d28:	88 ec       	ldi	r24, 0xC8	; 200
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	9c 83       	std	Y+4, r25	; 0x04
     d2e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	9c 81       	ldd	r25, Y+4	; 0x04
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	f1 f7       	brne	.-4      	; 0xd34 <APP_storePin+0x10a>
     d38:	9c 83       	std	Y+4, r25	; 0x04
     d3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3c:	8d 81       	ldd	r24, Y+5	; 0x05
     d3e:	9e 81       	ldd	r25, Y+6	; 0x06
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	9e 83       	std	Y+6, r25	; 0x06
     d44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d46:	8d 81       	ldd	r24, Y+5	; 0x05
     d48:	9e 81       	ldd	r25, Y+6	; 0x06
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	69 f7       	brne	.-38     	; 0xd28 <APP_storePin+0xfe>
     d4e:	14 c0       	rjmp	.+40     	; 0xd78 <APP_storePin+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d50:	6f 81       	ldd	r22, Y+7	; 0x07
     d52:	78 85       	ldd	r23, Y+8	; 0x08
     d54:	89 85       	ldd	r24, Y+9	; 0x09
     d56:	9a 85       	ldd	r25, Y+10	; 0x0a
     d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	9e 83       	std	Y+6, r25	; 0x06
     d62:	8d 83       	std	Y+5, r24	; 0x05
     d64:	8d 81       	ldd	r24, Y+5	; 0x05
     d66:	9e 81       	ldd	r25, Y+6	; 0x06
     d68:	9a 83       	std	Y+2, r25	; 0x02
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	9a 81       	ldd	r25, Y+2	; 0x02
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <APP_storePin+0x146>
     d74:	9a 83       	std	Y+2, r25	; 0x02
     d76:	89 83       	std	Y+1, r24	; 0x01
	{
		pin[i] = UART_receiveByte();
	}

	/* Store the PIN in the EEPROM */
	for(i = 0; i < 5; i++)
     d78:	8f 85       	ldd	r24, Y+15	; 0x0f
     d7a:	8f 5f       	subi	r24, 0xFF	; 255
     d7c:	8f 87       	std	Y+15, r24	; 0x0f
     d7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d80:	85 30       	cpi	r24, 0x05	; 5
     d82:	08 f4       	brcc	.+2      	; 0xd86 <APP_storePin+0x15c>
     d84:	77 cf       	rjmp	.-274    	; 0xc74 <APP_storePin+0x4a>
	{
		EEPROM_writeByte(i, pin[i]);
		_delay_ms(10);
	}
}
     d86:	64 96       	adiw	r28, 0x14	; 20
     d88:	0f b6       	in	r0, 0x3f	; 63
     d8a:	f8 94       	cli
     d8c:	de bf       	out	0x3e, r29	; 62
     d8e:	0f be       	out	0x3f, r0	; 63
     d90:	cd bf       	out	0x3d, r28	; 61
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	08 95       	ret

00000d9c <APP_verifyPin>:
/* Function to verify that the pin is correct to proceed
 * If the user attempted to enter the wrong pin 3 times in
 * a row, it will trigger the buzzer
 */
void APP_verifyPin(uint8* flag)
{
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	6b 97       	sbiw	r28, 0x1b	; 27
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	9b 8f       	std	Y+27, r25	; 0x1b
     db6:	8a 8f       	std	Y+26, r24	; 0x1a
	 * its validity with the stored pin
	 */
	uint8 check_pin[5];
	uint8 i;
	/* Stores the pin in an empty array */
	for(i = 0; i < 5; i++)
     db8:	1f 86       	std	Y+15, r1	; 0x0f
     dba:	84 c0       	rjmp	.+264    	; 0xec4 <APP_verifyPin+0x128>
	{
		EEPROM_readByte(i, &stored_pin[i]);
     dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dbe:	48 2f       	mov	r20, r24
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	8f 85       	ldd	r24, Y+15	; 0x0f
     dc4:	88 2f       	mov	r24, r24
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	9e 01       	movw	r18, r28
     dca:	20 5f       	subi	r18, 0xF0	; 240
     dcc:	3f 4f       	sbci	r19, 0xFF	; 255
     dce:	28 0f       	add	r18, r24
     dd0:	39 1f       	adc	r19, r25
     dd2:	ca 01       	movw	r24, r20
     dd4:	b9 01       	movw	r22, r18
     dd6:	0e 94 97 08 	call	0x112e	; 0x112e <EEPROM_readByte>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	a0 e2       	ldi	r26, 0x20	; 32
     de0:	b1 e4       	ldi	r27, 0x41	; 65
     de2:	8b 87       	std	Y+11, r24	; 0x0b
     de4:	9c 87       	std	Y+12, r25	; 0x0c
     de6:	ad 87       	std	Y+13, r26	; 0x0d
     de8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dea:	6b 85       	ldd	r22, Y+11	; 0x0b
     dec:	7c 85       	ldd	r23, Y+12	; 0x0c
     dee:	8d 85       	ldd	r24, Y+13	; 0x0d
     df0:	9e 85       	ldd	r25, Y+14	; 0x0e
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	4a ef       	ldi	r20, 0xFA	; 250
     df8:	54 e4       	ldi	r21, 0x44	; 68
     dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	8f 83       	std	Y+7, r24	; 0x07
     e04:	98 87       	std	Y+8, r25	; 0x08
     e06:	a9 87       	std	Y+9, r26	; 0x09
     e08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e0a:	6f 81       	ldd	r22, Y+7	; 0x07
     e0c:	78 85       	ldd	r23, Y+8	; 0x08
     e0e:	89 85       	ldd	r24, Y+9	; 0x09
     e10:	9a 85       	ldd	r25, Y+10	; 0x0a
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e8       	ldi	r20, 0x80	; 128
     e18:	5f e3       	ldi	r21, 0x3F	; 63
     e1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e1e:	88 23       	and	r24, r24
     e20:	2c f4       	brge	.+10     	; 0xe2c <APP_verifyPin+0x90>
		__ticks = 1;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	9e 83       	std	Y+6, r25	; 0x06
     e28:	8d 83       	std	Y+5, r24	; 0x05
     e2a:	3f c0       	rjmp	.+126    	; 0xeaa <APP_verifyPin+0x10e>
	else if (__tmp > 65535)
     e2c:	6f 81       	ldd	r22, Y+7	; 0x07
     e2e:	78 85       	ldd	r23, Y+8	; 0x08
     e30:	89 85       	ldd	r24, Y+9	; 0x09
     e32:	9a 85       	ldd	r25, Y+10	; 0x0a
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	3f ef       	ldi	r19, 0xFF	; 255
     e38:	4f e7       	ldi	r20, 0x7F	; 127
     e3a:	57 e4       	ldi	r21, 0x47	; 71
     e3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e40:	18 16       	cp	r1, r24
     e42:	4c f5       	brge	.+82     	; 0xe96 <APP_verifyPin+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e44:	6b 85       	ldd	r22, Y+11	; 0x0b
     e46:	7c 85       	ldd	r23, Y+12	; 0x0c
     e48:	8d 85       	ldd	r24, Y+13	; 0x0d
     e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	40 e2       	ldi	r20, 0x20	; 32
     e52:	51 e4       	ldi	r21, 0x41	; 65
     e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	bc 01       	movw	r22, r24
     e5e:	cd 01       	movw	r24, r26
     e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	9e 83       	std	Y+6, r25	; 0x06
     e6a:	8d 83       	std	Y+5, r24	; 0x05
     e6c:	0f c0       	rjmp	.+30     	; 0xe8c <APP_verifyPin+0xf0>
     e6e:	88 ec       	ldi	r24, 0xC8	; 200
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	9c 83       	std	Y+4, r25	; 0x04
     e74:	8b 83       	std	Y+3, r24	; 0x03
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <APP_verifyPin+0xde>
     e7e:	9c 83       	std	Y+4, r25	; 0x04
     e80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	9e 81       	ldd	r25, Y+6	; 0x06
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e8c:	8d 81       	ldd	r24, Y+5	; 0x05
     e8e:	9e 81       	ldd	r25, Y+6	; 0x06
     e90:	00 97       	sbiw	r24, 0x00	; 0
     e92:	69 f7       	brne	.-38     	; 0xe6e <APP_verifyPin+0xd2>
     e94:	14 c0       	rjmp	.+40     	; 0xebe <APP_verifyPin+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e96:	6f 81       	ldd	r22, Y+7	; 0x07
     e98:	78 85       	ldd	r23, Y+8	; 0x08
     e9a:	89 85       	ldd	r24, Y+9	; 0x09
     e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	9e 83       	std	Y+6, r25	; 0x06
     ea8:	8d 83       	std	Y+5, r24	; 0x05
     eaa:	8d 81       	ldd	r24, Y+5	; 0x05
     eac:	9e 81       	ldd	r25, Y+6	; 0x06
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	9a 81       	ldd	r25, Y+2	; 0x02
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <APP_verifyPin+0x11a>
     eba:	9a 83       	std	Y+2, r25	; 0x02
     ebc:	89 83       	std	Y+1, r24	; 0x01
	 * its validity with the stored pin
	 */
	uint8 check_pin[5];
	uint8 i;
	/* Stores the pin in an empty array */
	for(i = 0; i < 5; i++)
     ebe:	8f 85       	ldd	r24, Y+15	; 0x0f
     ec0:	8f 5f       	subi	r24, 0xFF	; 255
     ec2:	8f 87       	std	Y+15, r24	; 0x0f
     ec4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ec6:	85 30       	cpi	r24, 0x05	; 5
     ec8:	08 f4       	brcc	.+2      	; 0xecc <APP_verifyPin+0x130>
     eca:	78 cf       	rjmp	.-272    	; 0xdbc <APP_verifyPin+0x20>
	 * rotating the motor if not, it will attempt to get
	 * the pin for 2 more times. If the pin is still wrong
	 * Buzzer goes off
	 */
	do{
		count++;
     ecc:	80 91 83 00 	lds	r24, 0x0083
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	80 93 83 00 	sts	0x0083, r24
		if(count == 4)
     ed6:	80 91 83 00 	lds	r24, 0x0083
     eda:	84 30       	cpi	r24, 0x04	; 4
     edc:	61 f4       	brne	.+24     	; 0xef6 <APP_verifyPin+0x15a>
		{
			/* Take the flag when executing the buzzer app */
			term_flag = 1;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	80 93 82 00 	sts	0x0082, r24
			Timer_init(&s_TimerConfigData);
     ee4:	88 e6       	ldi	r24, 0x68	; 104
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 4b 0c 	call	0x1896	; 0x1896 <Timer_init>
			Timer_setCallBack1(APP_buzzerTrigger);
     eec:	85 ef       	ldi	r24, 0xF5	; 245
     eee:	95 e0       	ldi	r25, 0x05	; 5
     ef0:	0e 94 77 0d 	call	0x1aee	; 0x1aee <Timer_setCallBack1>
     ef4:	43 c0       	rjmp	.+134    	; 0xf7c <APP_verifyPin+0x1e0>
			break;
		}
		for(i = 0; i < 5; i++)
     ef6:	1f 86       	std	Y+15, r1	; 0x0f
     ef8:	0f c0       	rjmp	.+30     	; 0xf18 <APP_verifyPin+0x17c>
		{
			check_pin[i] = UART_receiveByte();
     efa:	8f 85       	ldd	r24, Y+15	; 0x0f
     efc:	08 2f       	mov	r16, r24
     efe:	10 e0       	ldi	r17, 0x00	; 0
     f00:	0e 94 40 10 	call	0x2080	; 0x2080 <UART_receiveByte>
     f04:	28 2f       	mov	r18, r24
     f06:	ce 01       	movw	r24, r28
     f08:	45 96       	adiw	r24, 0x15	; 21
     f0a:	fc 01       	movw	r30, r24
     f0c:	e0 0f       	add	r30, r16
     f0e:	f1 1f       	adc	r31, r17
     f10:	20 83       	st	Z, r18
			term_flag = 1;
			Timer_init(&s_TimerConfigData);
			Timer_setCallBack1(APP_buzzerTrigger);
			break;
		}
		for(i = 0; i < 5; i++)
     f12:	8f 85       	ldd	r24, Y+15	; 0x0f
     f14:	8f 5f       	subi	r24, 0xFF	; 255
     f16:	8f 87       	std	Y+15, r24	; 0x0f
     f18:	8f 85       	ldd	r24, Y+15	; 0x0f
     f1a:	85 30       	cpi	r24, 0x05	; 5
     f1c:	70 f3       	brcs	.-36     	; 0xefa <APP_verifyPin+0x15e>
			check_pin[i] = UART_receiveByte();
		}
		/* Check for the received pin from MC1 with the one stored
		 * in the EEPROM
		 */
		for(i = 0; i < 5; i++)
     f1e:	1f 86       	std	Y+15, r1	; 0x0f
     f20:	1f c0       	rjmp	.+62     	; 0xf60 <APP_verifyPin+0x1c4>
		{
			if(check_pin[i] != stored_pin[i])
     f22:	8f 85       	ldd	r24, Y+15	; 0x0f
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	ce 01       	movw	r24, r28
     f2a:	45 96       	adiw	r24, 0x15	; 21
     f2c:	fc 01       	movw	r30, r24
     f2e:	e2 0f       	add	r30, r18
     f30:	f3 1f       	adc	r31, r19
     f32:	40 81       	ld	r20, Z
     f34:	8f 85       	ldd	r24, Y+15	; 0x0f
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	ce 01       	movw	r24, r28
     f3c:	40 96       	adiw	r24, 0x10	; 16
     f3e:	fc 01       	movw	r30, r24
     f40:	e2 0f       	add	r30, r18
     f42:	f3 1f       	adc	r31, r19
     f44:	80 81       	ld	r24, Z
     f46:	48 17       	cp	r20, r24
     f48:	29 f0       	breq	.+10     	; 0xf54 <APP_verifyPin+0x1b8>
			{
				/* Indicate the pin is wrong */
				*flag = 1;
     f4a:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f4c:	fb 8d       	ldd	r31, Y+27	; 0x1b
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	80 83       	st	Z, r24
     f52:	09 c0       	rjmp	.+18     	; 0xf66 <APP_verifyPin+0x1ca>
				break;
			}
			else
			{
				*flag = 0;
     f54:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f56:	fb 8d       	ldd	r31, Y+27	; 0x1b
     f58:	10 82       	st	Z, r1
			check_pin[i] = UART_receiveByte();
		}
		/* Check for the received pin from MC1 with the one stored
		 * in the EEPROM
		 */
		for(i = 0; i < 5; i++)
     f5a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f5c:	8f 5f       	subi	r24, 0xFF	; 255
     f5e:	8f 87       	std	Y+15, r24	; 0x0f
     f60:	8f 85       	ldd	r24, Y+15	; 0x0f
     f62:	85 30       	cpi	r24, 0x05	; 5
     f64:	f0 f2       	brcs	.-68     	; 0xf22 <APP_verifyPin+0x186>
			}
		}
		/* Send the value of the flag to tell MC1 that the PIN is correct
		 * or not to take action depending on that
		 */
		UART_sendByte(*flag);
     f66:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f68:	fb 8d       	ldd	r31, Y+27	; 0x1b
     f6a:	80 81       	ld	r24, Z
     f6c:	0e 94 29 10 	call	0x2052	; 0x2052 <UART_sendByte>
	/* Stay in the do while loop for 3 times only */
	}while(*flag == 1);
     f70:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f72:	fb 8d       	ldd	r31, Y+27	; 0x1b
     f74:	80 81       	ld	r24, Z
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	09 f4       	brne	.+2      	; 0xf7c <APP_verifyPin+0x1e0>
     f7a:	a8 cf       	rjmp	.-176    	; 0xecc <APP_verifyPin+0x130>
}
     f7c:	6b 96       	adiw	r28, 0x1b	; 27
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	08 95       	ret

00000f92 <main>:

/*******************************************************************************
 *                                Main Function                                *
 *******************************************************************************/
int main(void)
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	68 97       	sbiw	r28, 0x18	; 24
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
	/* Enable the I-bit to enable Interrupts */
	SREG |= (1<<7);
     fa6:	af e5       	ldi	r26, 0x5F	; 95
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	ef e5       	ldi	r30, 0x5F	; 95
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 68       	ori	r24, 0x80	; 128
     fb2:	8c 93       	st	X, r24
	 * ONE STOP BIT
	 * EIGHT BIT MODE
	 * NO PARITY
	 * BAUD RATE 9600
	 */
	UART_Config s_UARTConfigData = {ONE_BIT_STOP, EIGHT_BIT_MODE, PARITY_OFF, 9600};
     fb4:	ce 01       	movw	r24, r28
     fb6:	03 96       	adiw	r24, 0x03	; 3
     fb8:	98 8b       	std	Y+16, r25	; 0x10
     fba:	8f 87       	std	Y+15, r24	; 0x0f
     fbc:	e8 e7       	ldi	r30, 0x78	; 120
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	fa 8b       	std	Y+18, r31	; 0x12
     fc2:	e9 8b       	std	Y+17, r30	; 0x11
     fc4:	f7 e0       	ldi	r31, 0x07	; 7
     fc6:	fb 8b       	std	Y+19, r31	; 0x13
     fc8:	e9 89       	ldd	r30, Y+17	; 0x11
     fca:	fa 89       	ldd	r31, Y+18	; 0x12
     fcc:	00 80       	ld	r0, Z
     fce:	89 89       	ldd	r24, Y+17	; 0x11
     fd0:	9a 89       	ldd	r25, Y+18	; 0x12
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	9a 8b       	std	Y+18, r25	; 0x12
     fd6:	89 8b       	std	Y+17, r24	; 0x11
     fd8:	ef 85       	ldd	r30, Y+15	; 0x0f
     fda:	f8 89       	ldd	r31, Y+16	; 0x10
     fdc:	00 82       	st	Z, r0
     fde:	8f 85       	ldd	r24, Y+15	; 0x0f
     fe0:	98 89       	ldd	r25, Y+16	; 0x10
     fe2:	01 96       	adiw	r24, 0x01	; 1
     fe4:	98 8b       	std	Y+16, r25	; 0x10
     fe6:	8f 87       	std	Y+15, r24	; 0x0f
     fe8:	9b 89       	ldd	r25, Y+19	; 0x13
     fea:	91 50       	subi	r25, 0x01	; 1
     fec:	9b 8b       	std	Y+19, r25	; 0x13
     fee:	eb 89       	ldd	r30, Y+19	; 0x13
     ff0:	ee 23       	and	r30, r30
     ff2:	51 f7       	brne	.-44     	; 0xfc8 <main+0x36>
	/* I2C configuration Structure
	 * MC2 address = 0x50
	 * Bit rate 400k kbits/sec
	 */
	TWI_Config s_TWIConfigData = {0x50, BR_400};
     ff4:	ce 01       	movw	r24, r28
     ff6:	0a 96       	adiw	r24, 0x0a	; 10
     ff8:	9d 8b       	std	Y+21, r25	; 0x15
     ffa:	8c 8b       	std	Y+20, r24	; 0x14
     ffc:	e3 e7       	ldi	r30, 0x73	; 115
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	ff 8b       	std	Y+23, r31	; 0x17
    1002:	ee 8b       	std	Y+22, r30	; 0x16
    1004:	f5 e0       	ldi	r31, 0x05	; 5
    1006:	f8 8f       	std	Y+24, r31	; 0x18
    1008:	ee 89       	ldd	r30, Y+22	; 0x16
    100a:	ff 89       	ldd	r31, Y+23	; 0x17
    100c:	00 80       	ld	r0, Z
    100e:	8e 89       	ldd	r24, Y+22	; 0x16
    1010:	9f 89       	ldd	r25, Y+23	; 0x17
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	9f 8b       	std	Y+23, r25	; 0x17
    1016:	8e 8b       	std	Y+22, r24	; 0x16
    1018:	ec 89       	ldd	r30, Y+20	; 0x14
    101a:	fd 89       	ldd	r31, Y+21	; 0x15
    101c:	00 82       	st	Z, r0
    101e:	8c 89       	ldd	r24, Y+20	; 0x14
    1020:	9d 89       	ldd	r25, Y+21	; 0x15
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	9d 8b       	std	Y+21, r25	; 0x15
    1026:	8c 8b       	std	Y+20, r24	; 0x14
    1028:	98 8d       	ldd	r25, Y+24	; 0x18
    102a:	91 50       	subi	r25, 0x01	; 1
    102c:	98 8f       	std	Y+24, r25	; 0x18
    102e:	e8 8d       	ldd	r30, Y+24	; 0x18
    1030:	ee 23       	and	r30, r30
    1032:	51 f7       	brne	.-44     	; 0x1008 <main+0x76>
	/* Initialize the UART driver with the given structure */
	UART_init(&s_UARTConfigData);
    1034:	ce 01       	movw	r24, r28
    1036:	03 96       	adiw	r24, 0x03	; 3
    1038:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <UART_init>
	/* Initialize the I2C driver with the given structure */
	TWI_init(&s_TWIConfigData);
    103c:	ce 01       	movw	r24, r28
    103e:	0a 96       	adiw	r24, 0x0a	; 10
    1040:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <TWI_init>
	/* Initialize the Motor driver */
	DcMotor_init();
    1044:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DcMotor_init>
	/* Initialize the Buzzer driver */
	Buzzer_init();
    1048:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	/* Store the pin in EEPROM after receiving it from MC1 */
	APP_storePin();
    104c:	0e 94 15 06 	call	0xc2a	; 0xc2a <APP_storePin>
	while(1)
	{
		/* Get the required option from MC1 */
		option = UART_receiveByte();
    1050:	0e 94 40 10 	call	0x2080	; 0x2080 <UART_receiveByte>
    1054:	89 83       	std	Y+1, r24	; 0x01
		/* '+' indicates that user wants to Rotate the door */
		if(option == '+')
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	8b 32       	cpi	r24, 0x2B	; 43
    105a:	a9 f4       	brne	.+42     	; 0x1086 <main+0xf4>
		{
			/* Attempt to take the pin from the user and verify it */
			APP_verifyPin(&flag);
    105c:	ce 01       	movw	r24, r28
    105e:	02 96       	adiw	r24, 0x02	; 2
    1060:	0e 94 ce 06 	call	0xd9c	; 0xd9c <APP_verifyPin>
			/* if flag = 0, this means that the entered pin is correct */
			if(flag == 0)
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	88 23       	and	r24, r24
    1068:	e1 f4       	brne	.+56     	; 0x10a2 <main+0x110>
			{
				count = 0;
    106a:	10 92 83 00 	sts	0x0083, r1
				/* Take the flag to rotate the door without interruption */
				term_flag = 1;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	80 93 82 00 	sts	0x0082, r24
				Timer_init(&s_TimerConfigData);
    1074:	88 e6       	ldi	r24, 0x68	; 104
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 4b 0c 	call	0x1896	; 0x1896 <Timer_init>
				Timer_setCallBack1(APP_rotateMotor);
    107c:	87 ec       	ldi	r24, 0xC7	; 199
    107e:	95 e0       	ldi	r25, 0x05	; 5
    1080:	0e 94 77 0d 	call	0x1aee	; 0x1aee <Timer_setCallBack1>
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <main+0x110>
			}
		}
		/* '-' indicates that the user wants to change the pin */
		else if(option == '-')
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	8d 32       	cpi	r24, 0x2D	; 45
    108a:	59 f4       	brne	.+22     	; 0x10a2 <main+0x110>
		{
			/* Attempt to take the pin from the user and verify it */
			APP_verifyPin(&flag);
    108c:	ce 01       	movw	r24, r28
    108e:	02 96       	adiw	r24, 0x02	; 2
    1090:	0e 94 ce 06 	call	0xd9c	; 0xd9c <APP_verifyPin>
			/* flag = 0 means that the user entered the pin correctly */
			if(flag == 0)
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	88 23       	and	r24, r24
    1098:	21 f4       	brne	.+8      	; 0x10a2 <main+0x110>
			{
				count = 0;
    109a:	10 92 83 00 	sts	0x0083, r1
				/* Store the pin after it has been entered correctly */
				APP_storePin();
    109e:	0e 94 15 06 	call	0xc2a	; 0xc2a <APP_storePin>
			}
		}
		/* Do nothing when the door is opening or closing and when the Buzzer goes off */
		while(term_flag == 1) {}
    10a2:	80 91 82 00 	lds	r24, 0x0082
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	e1 f3       	breq	.-8      	; 0x10a2 <main+0x110>
    10aa:	d2 cf       	rjmp	.-92     	; 0x1050 <main+0xbe>

000010ac <EEPROM_writeByte>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

/* Function to write a byte into the external EEPROM memory */
uint8 EEPROM_writeByte(uint16 addr, uint8 data)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <EEPROM_writeByte+0x6>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <EEPROM_writeByte+0x8>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	9a 83       	std	Y+2, r25	; 0x02
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the start bit to begin the transaction */
	TWI_start();
    10be:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <TWI_start>
	/* Check if the start is transmitted or not */
	if(TWI_getStatus() != TWI_START)
    10c2:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TWI_getStatus>
    10c6:	88 30       	cpi	r24, 0x08	; 8
    10c8:	11 f0       	breq	.+4      	; 0x10ce <EEPROM_writeByte+0x22>
		return ERROR;
    10ca:	1c 82       	std	Y+4, r1	; 0x04
    10cc:	28 c0       	rjmp	.+80     	; 0x111e <EEPROM_writeByte+0x72>
	/* Send the device address which is composed of
	 * 1010 then the MSB 3 bits of the addr then
	 * R/W = 0(write)
	 */
	TWI_write((uint8)(((addr & 0x0700)>>7) | 0xA0));
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	9a 81       	ldd	r25, Y+2	; 0x02
    10d2:	80 70       	andi	r24, 0x00	; 0
    10d4:	97 70       	andi	r25, 0x07	; 7
    10d6:	88 0f       	add	r24, r24
    10d8:	89 2f       	mov	r24, r25
    10da:	88 1f       	adc	r24, r24
    10dc:	99 0b       	sbc	r25, r25
    10de:	91 95       	neg	r25
    10e0:	80 6a       	ori	r24, 0xA0	; 160
    10e2:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <TWI_write>
	/* Ensure that the master transmitted the address and the slave
	 * received it successfully and replied with ACK
	 */
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    10e6:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TWI_getStatus>
    10ea:	88 31       	cpi	r24, 0x18	; 24
    10ec:	11 f0       	breq	.+4      	; 0x10f2 <EEPROM_writeByte+0x46>
        return ERROR;
    10ee:	1c 82       	std	Y+4, r1	; 0x04
    10f0:	16 c0       	rjmp	.+44     	; 0x111e <EEPROM_writeByte+0x72>
    /* Send the first 8 bits of addr */
	TWI_write((uint8)addr);
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <TWI_write>
	/* Ensure that the master transmitted the address and the slave
	 * received it successfully and replied with ACK
	 */
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    10f8:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TWI_getStatus>
    10fc:	88 32       	cpi	r24, 0x28	; 40
    10fe:	11 f0       	breq	.+4      	; 0x1104 <EEPROM_writeByte+0x58>
        return ERROR;
    1100:	1c 82       	std	Y+4, r1	; 0x04
    1102:	0d c0       	rjmp	.+26     	; 0x111e <EEPROM_writeByte+0x72>
    /* Send the actual data */
	TWI_write(data);
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <TWI_write>
	/* Ensure that the master transmitted the data and the slave
	 * received it successfully and replied with ACK
	 */
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    110a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TWI_getStatus>
    110e:	88 32       	cpi	r24, 0x28	; 40
    1110:	11 f0       	breq	.+4      	; 0x1116 <EEPROM_writeByte+0x6a>
        return ERROR;
    1112:	1c 82       	std	Y+4, r1	; 0x04
    1114:	04 c0       	rjmp	.+8      	; 0x111e <EEPROM_writeByte+0x72>
    /* Send the stop bit to terminate the transaction */
    TWI_stop();
    1116:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <TWI_stop>
    return SUCCESS;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	8c 83       	std	Y+4, r24	; 0x04
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <EEPROM_readByte>:

/* Function to read a byte from the external EEPROM memory */
uint8 EEPROM_readByte(uint16 addr, uint8* data)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	00 d0       	rcall	.+0      	; 0x1134 <EEPROM_readByte+0x6>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <EEPROM_readByte+0x8>
    1136:	0f 92       	push	r0
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	7c 83       	std	Y+4, r23	; 0x04
    1142:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the start bit to begin the transaction */
	TWI_start();
    1144:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <TWI_start>
	/* Check if the start is transmitted or not */
	if(TWI_getStatus() != TWI_START)
    1148:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TWI_getStatus>
    114c:	88 30       	cpi	r24, 0x08	; 8
    114e:	11 f0       	breq	.+4      	; 0x1154 <EEPROM_readByte+0x26>
		return ERROR;
    1150:	1d 82       	std	Y+5, r1	; 0x05
    1152:	44 c0       	rjmp	.+136    	; 0x11dc <EEPROM_readByte+0xae>
	/* Send the device address which is composed of
	 * 1010 then the MSB 3 bits of the addr then
	 * R/W = 0(write)
	 */
	TWI_write((uint8)(((addr & 0x0700)>>7) | 0xA0));
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	9a 81       	ldd	r25, Y+2	; 0x02
    1158:	80 70       	andi	r24, 0x00	; 0
    115a:	97 70       	andi	r25, 0x07	; 7
    115c:	88 0f       	add	r24, r24
    115e:	89 2f       	mov	r24, r25
    1160:	88 1f       	adc	r24, r24
    1162:	99 0b       	sbc	r25, r25
    1164:	91 95       	neg	r25
    1166:	80 6a       	ori	r24, 0xA0	; 160
    1168:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <TWI_write>
	/* Ensure that the master transmitted the address and the slave
	 * received it successfully and replied with ACK
	 */
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    116c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TWI_getStatus>
    1170:	88 31       	cpi	r24, 0x18	; 24
    1172:	11 f0       	breq	.+4      	; 0x1178 <EEPROM_readByte+0x4a>
        return ERROR;
    1174:	1d 82       	std	Y+5, r1	; 0x05
    1176:	32 c0       	rjmp	.+100    	; 0x11dc <EEPROM_readByte+0xae>
    /* Send the first 8 bits of addr */
	TWI_write((uint8)addr);
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <TWI_write>
	/* Ensure that the master transmitted the address and the slave
	 * received it successfully and replied with ACK
	 */
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    117e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TWI_getStatus>
    1182:	88 32       	cpi	r24, 0x28	; 40
    1184:	11 f0       	breq	.+4      	; 0x118a <EEPROM_readByte+0x5c>
        return ERROR;
    1186:	1d 82       	std	Y+5, r1	; 0x05
    1188:	29 c0       	rjmp	.+82     	; 0x11dc <EEPROM_readByte+0xae>
    /* Send the repeated start */
	TWI_start();
    118a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <TWI_start>
	/* Check if the start is transmitted or not */
	if(TWI_getStatus() != TWI_REP_START)
    118e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TWI_getStatus>
    1192:	80 31       	cpi	r24, 0x10	; 16
    1194:	11 f0       	breq	.+4      	; 0x119a <EEPROM_readByte+0x6c>
		return ERROR;
    1196:	1d 82       	std	Y+5, r1	; 0x05
    1198:	21 c0       	rjmp	.+66     	; 0x11dc <EEPROM_readByte+0xae>
	/* Send the device address which is composed of
	 * 1010 then the MSB 3 bits of the addr then
	 * R/W = 1(write)
	 */
	TWI_write((uint8)(((addr & 0x0700)>>7) | 0xA1));
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	9a 81       	ldd	r25, Y+2	; 0x02
    119e:	80 70       	andi	r24, 0x00	; 0
    11a0:	97 70       	andi	r25, 0x07	; 7
    11a2:	88 0f       	add	r24, r24
    11a4:	89 2f       	mov	r24, r25
    11a6:	88 1f       	adc	r24, r24
    11a8:	99 0b       	sbc	r25, r25
    11aa:	91 95       	neg	r25
    11ac:	81 6a       	ori	r24, 0xA1	; 161
    11ae:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <TWI_write>
	/* Ensure that the master transmitted the address and the slave
	 * received it successfully and replied with ACK
	 */
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    11b2:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TWI_getStatus>
    11b6:	80 34       	cpi	r24, 0x40	; 64
    11b8:	11 f0       	breq	.+4      	; 0x11be <EEPROM_readByte+0x90>
        return ERROR;
    11ba:	1d 82       	std	Y+5, r1	; 0x05
    11bc:	0f c0       	rjmp	.+30     	; 0x11dc <EEPROM_readByte+0xae>
    /* Read the data and send NACK to stop sending  */
    *data = TWI_readWithNack();
    11be:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <TWI_readWithNack>
    11c2:	eb 81       	ldd	r30, Y+3	; 0x03
    11c4:	fc 81       	ldd	r31, Y+4	; 0x04
    11c6:	80 83       	st	Z, r24
    /* Ensure that the master received the data from the
     * slave and replied with NACK successfully
     */
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    11c8:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <TWI_getStatus>
    11cc:	88 35       	cpi	r24, 0x58	; 88
    11ce:	11 f0       	breq	.+4      	; 0x11d4 <EEPROM_readByte+0xa6>
        return ERROR;
    11d0:	1d 82       	std	Y+5, r1	; 0x05
    11d2:	04 c0       	rjmp	.+8      	; 0x11dc <EEPROM_readByte+0xae>
    /* Send the stop bit */
    TWI_stop();
    11d4:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <TWI_stop>
    return SUCCESS;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	8d 83       	std	Y+5, r24	; 0x05
    11dc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <GPIO_setupPinDirection+0x6>
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <GPIO_setupPinDirection+0x8>
    11f6:	0f 92       	push	r0
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	6a 83       	std	Y+2, r22	; 0x02
    1200:	4b 83       	std	Y+3, r20	; 0x03
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	/* Setup the pin direction as required */
	switch(port_num)
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	3d 83       	std	Y+5, r19	; 0x05
    120a:	2c 83       	std	Y+4, r18	; 0x04
    120c:	8c 81       	ldd	r24, Y+4	; 0x04
    120e:	9d 81       	ldd	r25, Y+5	; 0x05
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	91 05       	cpc	r25, r1
    1214:	09 f4       	brne	.+2      	; 0x1218 <GPIO_setupPinDirection+0x2a>
    1216:	43 c0       	rjmp	.+134    	; 0x129e <GPIO_setupPinDirection+0xb0>
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	31 05       	cpc	r19, r1
    1220:	2c f4       	brge	.+10     	; 0x122c <GPIO_setupPinDirection+0x3e>
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	9d 81       	ldd	r25, Y+5	; 0x05
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	71 f0       	breq	.+28     	; 0x1246 <GPIO_setupPinDirection+0x58>
    122a:	bc c0       	rjmp	.+376    	; 0x13a4 <GPIO_setupPinDirection+0x1b6>
    122c:	2c 81       	ldd	r18, Y+4	; 0x04
    122e:	3d 81       	ldd	r19, Y+5	; 0x05
    1230:	22 30       	cpi	r18, 0x02	; 2
    1232:	31 05       	cpc	r19, r1
    1234:	09 f4       	brne	.+2      	; 0x1238 <GPIO_setupPinDirection+0x4a>
    1236:	5f c0       	rjmp	.+190    	; 0x12f6 <GPIO_setupPinDirection+0x108>
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	9d 81       	ldd	r25, Y+5	; 0x05
    123c:	83 30       	cpi	r24, 0x03	; 3
    123e:	91 05       	cpc	r25, r1
    1240:	09 f4       	brne	.+2      	; 0x1244 <GPIO_setupPinDirection+0x56>
    1242:	85 c0       	rjmp	.+266    	; 0x134e <GPIO_setupPinDirection+0x160>
    1244:	af c0       	rjmp	.+350    	; 0x13a4 <GPIO_setupPinDirection+0x1b6>
	{
	case PORTA_ID:
		if(direction == PIN_OUTPUT)
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	a1 f4       	brne	.+40     	; 0x1274 <GPIO_setupPinDirection+0x86>
		{
			SET_BIT(DDRA,pin_num);
    124c:	aa e3       	ldi	r26, 0x3A	; 58
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	ea e3       	ldi	r30, 0x3A	; 58
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <GPIO_setupPinDirection+0x7c>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <GPIO_setupPinDirection+0x78>
    126e:	84 2b       	or	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	98 c0       	rjmp	.+304    	; 0x13a4 <GPIO_setupPinDirection+0x1b6>
		}
		else
		{
			CLEAR_BIT(DDRA,pin_num);
    1274:	aa e3       	ldi	r26, 0x3A	; 58
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	ea e3       	ldi	r30, 0x3A	; 58
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <GPIO_setupPinDirection+0xa4>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <GPIO_setupPinDirection+0xa0>
    1296:	80 95       	com	r24
    1298:	84 23       	and	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	83 c0       	rjmp	.+262    	; 0x13a4 <GPIO_setupPinDirection+0x1b6>
		}
		break;
	case PORTB_ID:
		if(direction == PIN_OUTPUT)
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	a1 f4       	brne	.+40     	; 0x12cc <GPIO_setupPinDirection+0xde>
		{
			SET_BIT(DDRB,pin_num);
    12a4:	a7 e3       	ldi	r26, 0x37	; 55
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e7 e3       	ldi	r30, 0x37	; 55
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <GPIO_setupPinDirection+0xd4>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <GPIO_setupPinDirection+0xd0>
    12c6:	84 2b       	or	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	6c c0       	rjmp	.+216    	; 0x13a4 <GPIO_setupPinDirection+0x1b6>
		}
		else
		{
			CLEAR_BIT(DDRB,pin_num);
    12cc:	a7 e3       	ldi	r26, 0x37	; 55
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e7 e3       	ldi	r30, 0x37	; 55
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <GPIO_setupPinDirection+0xfc>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <GPIO_setupPinDirection+0xf8>
    12ee:	80 95       	com	r24
    12f0:	84 23       	and	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	57 c0       	rjmp	.+174    	; 0x13a4 <GPIO_setupPinDirection+0x1b6>
		}
		break;
	case PORTC_ID:
		if(direction == PIN_OUTPUT)
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	a1 f4       	brne	.+40     	; 0x1324 <GPIO_setupPinDirection+0x136>
		{
			SET_BIT(DDRC,pin_num);
    12fc:	a4 e3       	ldi	r26, 0x34	; 52
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e4 e3       	ldi	r30, 0x34	; 52
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <GPIO_setupPinDirection+0x12c>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <GPIO_setupPinDirection+0x128>
    131e:	84 2b       	or	r24, r20
    1320:	8c 93       	st	X, r24
    1322:	40 c0       	rjmp	.+128    	; 0x13a4 <GPIO_setupPinDirection+0x1b6>
		}
		else
		{
			CLEAR_BIT(DDRC,pin_num);
    1324:	a4 e3       	ldi	r26, 0x34	; 52
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e4 e3       	ldi	r30, 0x34	; 52
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 2e       	mov	r0, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <GPIO_setupPinDirection+0x154>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	0a 94       	dec	r0
    1344:	e2 f7       	brpl	.-8      	; 0x133e <GPIO_setupPinDirection+0x150>
    1346:	80 95       	com	r24
    1348:	84 23       	and	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	2b c0       	rjmp	.+86     	; 0x13a4 <GPIO_setupPinDirection+0x1b6>
		}
		break;
	case PORTD_ID:
		if(direction == PIN_OUTPUT)
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	a1 f4       	brne	.+40     	; 0x137c <GPIO_setupPinDirection+0x18e>
		{
			SET_BIT(DDRD,pin_num);
    1354:	a1 e3       	ldi	r26, 0x31	; 49
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e1 e3       	ldi	r30, 0x31	; 49
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <GPIO_setupPinDirection+0x184>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <GPIO_setupPinDirection+0x180>
    1376:	84 2b       	or	r24, r20
    1378:	8c 93       	st	X, r24
    137a:	14 c0       	rjmp	.+40     	; 0x13a4 <GPIO_setupPinDirection+0x1b6>
		}
		else
		{
			CLEAR_BIT(DDRD,pin_num);
    137c:	a1 e3       	ldi	r26, 0x31	; 49
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e1 e3       	ldi	r30, 0x31	; 49
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 2e       	mov	r0, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <GPIO_setupPinDirection+0x1ac>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 94       	dec	r0
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <GPIO_setupPinDirection+0x1a8>
    139e:	80 95       	com	r24
    13a0:	84 23       	and	r24, r20
    13a2:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <GPIO_writePin+0x6>
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <GPIO_writePin+0x8>
    13bc:	0f 92       	push	r0
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	89 83       	std	Y+1, r24	; 0x01
    13c4:	6a 83       	std	Y+2, r22	; 0x02
    13c6:	4b 83       	std	Y+3, r20	; 0x03

	/* Setup the pin direction as required */
	switch(port_num)
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	3d 83       	std	Y+5, r19	; 0x05
    13d0:	2c 83       	std	Y+4, r18	; 0x04
    13d2:	8c 81       	ldd	r24, Y+4	; 0x04
    13d4:	9d 81       	ldd	r25, Y+5	; 0x05
    13d6:	81 30       	cpi	r24, 0x01	; 1
    13d8:	91 05       	cpc	r25, r1
    13da:	09 f4       	brne	.+2      	; 0x13de <GPIO_writePin+0x2a>
    13dc:	43 c0       	rjmp	.+134    	; 0x1464 <GPIO_writePin+0xb0>
    13de:	2c 81       	ldd	r18, Y+4	; 0x04
    13e0:	3d 81       	ldd	r19, Y+5	; 0x05
    13e2:	22 30       	cpi	r18, 0x02	; 2
    13e4:	31 05       	cpc	r19, r1
    13e6:	2c f4       	brge	.+10     	; 0x13f2 <GPIO_writePin+0x3e>
    13e8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ea:	9d 81       	ldd	r25, Y+5	; 0x05
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	71 f0       	breq	.+28     	; 0x140c <GPIO_writePin+0x58>
    13f0:	bc c0       	rjmp	.+376    	; 0x156a <GPIO_writePin+0x1b6>
    13f2:	2c 81       	ldd	r18, Y+4	; 0x04
    13f4:	3d 81       	ldd	r19, Y+5	; 0x05
    13f6:	22 30       	cpi	r18, 0x02	; 2
    13f8:	31 05       	cpc	r19, r1
    13fa:	09 f4       	brne	.+2      	; 0x13fe <GPIO_writePin+0x4a>
    13fc:	5f c0       	rjmp	.+190    	; 0x14bc <GPIO_writePin+0x108>
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	9d 81       	ldd	r25, Y+5	; 0x05
    1402:	83 30       	cpi	r24, 0x03	; 3
    1404:	91 05       	cpc	r25, r1
    1406:	09 f4       	brne	.+2      	; 0x140a <GPIO_writePin+0x56>
    1408:	85 c0       	rjmp	.+266    	; 0x1514 <GPIO_writePin+0x160>
    140a:	af c0       	rjmp	.+350    	; 0x156a <GPIO_writePin+0x1b6>
	{
	case PORTA_ID:
		if(value == LOGIC_HIGH)
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	a1 f4       	brne	.+40     	; 0x143a <GPIO_writePin+0x86>
		{
			SET_BIT(PORTA,pin_num);
    1412:	ab e3       	ldi	r26, 0x3B	; 59
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	eb e3       	ldi	r30, 0x3B	; 59
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 2e       	mov	r0, r18
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <GPIO_writePin+0x7c>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <GPIO_writePin+0x78>
    1434:	84 2b       	or	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	98 c0       	rjmp	.+304    	; 0x156a <GPIO_writePin+0x1b6>
		}
		else
		{
			CLEAR_BIT(PORTA,pin_num);
    143a:	ab e3       	ldi	r26, 0x3B	; 59
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	eb e3       	ldi	r30, 0x3B	; 59
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <GPIO_writePin+0xa4>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <GPIO_writePin+0xa0>
    145c:	80 95       	com	r24
    145e:	84 23       	and	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	83 c0       	rjmp	.+262    	; 0x156a <GPIO_writePin+0x1b6>
		}
		break;
	case PORTB_ID:
		if(value == LOGIC_HIGH)
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	a1 f4       	brne	.+40     	; 0x1492 <GPIO_writePin+0xde>
		{
			SET_BIT(PORTB,pin_num);
    146a:	a8 e3       	ldi	r26, 0x38	; 56
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e8 e3       	ldi	r30, 0x38	; 56
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 2e       	mov	r0, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <GPIO_writePin+0xd4>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <GPIO_writePin+0xd0>
    148c:	84 2b       	or	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	6c c0       	rjmp	.+216    	; 0x156a <GPIO_writePin+0x1b6>
		}
		else
		{
			CLEAR_BIT(PORTB,pin_num);
    1492:	a8 e3       	ldi	r26, 0x38	; 56
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e8 e3       	ldi	r30, 0x38	; 56
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <GPIO_writePin+0xfc>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <GPIO_writePin+0xf8>
    14b4:	80 95       	com	r24
    14b6:	84 23       	and	r24, r20
    14b8:	8c 93       	st	X, r24
    14ba:	57 c0       	rjmp	.+174    	; 0x156a <GPIO_writePin+0x1b6>
		}
		break;
	case PORTC_ID:
		if(value == LOGIC_HIGH)
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	a1 f4       	brne	.+40     	; 0x14ea <GPIO_writePin+0x136>
		{
			SET_BIT(PORTC,pin_num);
    14c2:	a5 e3       	ldi	r26, 0x35	; 53
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e5 e3       	ldi	r30, 0x35	; 53
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	48 2f       	mov	r20, r24
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 2e       	mov	r0, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <GPIO_writePin+0x12c>
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	0a 94       	dec	r0
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <GPIO_writePin+0x128>
    14e4:	84 2b       	or	r24, r20
    14e6:	8c 93       	st	X, r24
    14e8:	40 c0       	rjmp	.+128    	; 0x156a <GPIO_writePin+0x1b6>
		}
		else
		{
			CLEAR_BIT(PORTC,pin_num);
    14ea:	a5 e3       	ldi	r26, 0x35	; 53
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e5 e3       	ldi	r30, 0x35	; 53
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	48 2f       	mov	r20, r24
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <GPIO_writePin+0x154>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <GPIO_writePin+0x150>
    150c:	80 95       	com	r24
    150e:	84 23       	and	r24, r20
    1510:	8c 93       	st	X, r24
    1512:	2b c0       	rjmp	.+86     	; 0x156a <GPIO_writePin+0x1b6>
		}
		break;
	case PORTD_ID:
		if(value == LOGIC_HIGH)
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	a1 f4       	brne	.+40     	; 0x1542 <GPIO_writePin+0x18e>
		{
			SET_BIT(PORTD,pin_num);
    151a:	a2 e3       	ldi	r26, 0x32	; 50
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e2 e3       	ldi	r30, 0x32	; 50
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <GPIO_writePin+0x184>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <GPIO_writePin+0x180>
    153c:	84 2b       	or	r24, r20
    153e:	8c 93       	st	X, r24
    1540:	14 c0       	rjmp	.+40     	; 0x156a <GPIO_writePin+0x1b6>
		}
		else
		{
			CLEAR_BIT(PORTD,pin_num);
    1542:	a2 e3       	ldi	r26, 0x32	; 50
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e2 e3       	ldi	r30, 0x32	; 50
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <GPIO_writePin+0x1ac>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <GPIO_writePin+0x1a8>
    1564:	80 95       	com	r24
    1566:	84 23       	and	r24, r20
    1568:	8c 93       	st	X, r24
	default:
		break;
	}


}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	00 d0       	rcall	.+0      	; 0x1580 <GPIO_readPin+0x6>
    1580:	00 d0       	rcall	.+0      	; 0x1582 <GPIO_readPin+0x8>
    1582:	0f 92       	push	r0
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	8a 83       	std	Y+2, r24	; 0x02
    158a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 temp;
	/* Setup the pin direction as required */
	switch(port_num)
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	3d 83       	std	Y+5, r19	; 0x05
    1594:	2c 83       	std	Y+4, r18	; 0x04
    1596:	4c 81       	ldd	r20, Y+4	; 0x04
    1598:	5d 81       	ldd	r21, Y+5	; 0x05
    159a:	41 30       	cpi	r20, 0x01	; 1
    159c:	51 05       	cpc	r21, r1
    159e:	41 f1       	breq	.+80     	; 0x15f0 <GPIO_readPin+0x76>
    15a0:	8c 81       	ldd	r24, Y+4	; 0x04
    15a2:	9d 81       	ldd	r25, Y+5	; 0x05
    15a4:	82 30       	cpi	r24, 0x02	; 2
    15a6:	91 05       	cpc	r25, r1
    15a8:	34 f4       	brge	.+12     	; 0x15b6 <GPIO_readPin+0x3c>
    15aa:	2c 81       	ldd	r18, Y+4	; 0x04
    15ac:	3d 81       	ldd	r19, Y+5	; 0x05
    15ae:	21 15       	cp	r18, r1
    15b0:	31 05       	cpc	r19, r1
    15b2:	61 f0       	breq	.+24     	; 0x15cc <GPIO_readPin+0x52>
    15b4:	53 c0       	rjmp	.+166    	; 0x165c <GPIO_readPin+0xe2>
    15b6:	4c 81       	ldd	r20, Y+4	; 0x04
    15b8:	5d 81       	ldd	r21, Y+5	; 0x05
    15ba:	42 30       	cpi	r20, 0x02	; 2
    15bc:	51 05       	cpc	r21, r1
    15be:	51 f1       	breq	.+84     	; 0x1614 <GPIO_readPin+0x9a>
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	9d 81       	ldd	r25, Y+5	; 0x05
    15c4:	83 30       	cpi	r24, 0x03	; 3
    15c6:	91 05       	cpc	r25, r1
    15c8:	b9 f1       	breq	.+110    	; 0x1638 <GPIO_readPin+0xbe>
    15ca:	48 c0       	rjmp	.+144    	; 0x165c <GPIO_readPin+0xe2>
	{
	case PORTA_ID:
		temp = CHECK_BIT(PINA,pin_num);
    15cc:	e9 e3       	ldi	r30, 0x39	; 57
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a9 01       	movw	r20, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <GPIO_readPin+0x6a>
    15e0:	55 95       	asr	r21
    15e2:	47 95       	ror	r20
    15e4:	8a 95       	dec	r24
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <GPIO_readPin+0x66>
    15e8:	ca 01       	movw	r24, r20
    15ea:	81 70       	andi	r24, 0x01	; 1
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	37 c0       	rjmp	.+110    	; 0x165e <GPIO_readPin+0xe4>
		break;
	case PORTB_ID:
		temp = CHECK_BIT(PINB,pin_num);
    15f0:	e6 e3       	ldi	r30, 0x36	; 54
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	88 2f       	mov	r24, r24
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	a9 01       	movw	r20, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <GPIO_readPin+0x8e>
    1604:	55 95       	asr	r21
    1606:	47 95       	ror	r20
    1608:	8a 95       	dec	r24
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <GPIO_readPin+0x8a>
    160c:	ca 01       	movw	r24, r20
    160e:	81 70       	andi	r24, 0x01	; 1
    1610:	89 83       	std	Y+1, r24	; 0x01
    1612:	25 c0       	rjmp	.+74     	; 0x165e <GPIO_readPin+0xe4>
		break;
	case PORTC_ID:
		temp = CHECK_BIT(PINC,pin_num);
    1614:	e3 e3       	ldi	r30, 0x33	; 51
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a9 01       	movw	r20, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <GPIO_readPin+0xb2>
    1628:	55 95       	asr	r21
    162a:	47 95       	ror	r20
    162c:	8a 95       	dec	r24
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <GPIO_readPin+0xae>
    1630:	ca 01       	movw	r24, r20
    1632:	81 70       	andi	r24, 0x01	; 1
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	13 c0       	rjmp	.+38     	; 0x165e <GPIO_readPin+0xe4>
		break;
	case PORTD_ID:
		temp = CHECK_BIT(PIND,pin_num);
    1638:	e0 e3       	ldi	r30, 0x30	; 48
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	a9 01       	movw	r20, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <GPIO_readPin+0xd6>
    164c:	55 95       	asr	r21
    164e:	47 95       	ror	r20
    1650:	8a 95       	dec	r24
    1652:	e2 f7       	brpl	.-8      	; 0x164c <GPIO_readPin+0xd2>
    1654:	ca 01       	movw	r24, r20
    1656:	81 70       	andi	r24, 0x01	; 1
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	01 c0       	rjmp	.+2      	; 0x165e <GPIO_readPin+0xe4>
		break;
	default:
		temp = LOGIC_LOW;
    165c:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return temp;
    165e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <GPIO_setupPortDirection+0x6>
    1676:	00 d0       	rcall	.+0      	; 0x1678 <GPIO_setupPortDirection+0x8>
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	/* Setup the port direction as required */
	switch(port_num)
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	3c 83       	std	Y+4, r19	; 0x04
    1688:	2b 83       	std	Y+3, r18	; 0x03
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9c 81       	ldd	r25, Y+4	; 0x04
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	91 05       	cpc	r25, r1
    1692:	d1 f0       	breq	.+52     	; 0x16c8 <GPIO_setupPortDirection+0x58>
    1694:	2b 81       	ldd	r18, Y+3	; 0x03
    1696:	3c 81       	ldd	r19, Y+4	; 0x04
    1698:	22 30       	cpi	r18, 0x02	; 2
    169a:	31 05       	cpc	r19, r1
    169c:	2c f4       	brge	.+10     	; 0x16a8 <GPIO_setupPortDirection+0x38>
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	9c 81       	ldd	r25, Y+4	; 0x04
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	61 f0       	breq	.+24     	; 0x16be <GPIO_setupPortDirection+0x4e>
    16a6:	1e c0       	rjmp	.+60     	; 0x16e4 <GPIO_setupPortDirection+0x74>
    16a8:	2b 81       	ldd	r18, Y+3	; 0x03
    16aa:	3c 81       	ldd	r19, Y+4	; 0x04
    16ac:	22 30       	cpi	r18, 0x02	; 2
    16ae:	31 05       	cpc	r19, r1
    16b0:	81 f0       	breq	.+32     	; 0x16d2 <GPIO_setupPortDirection+0x62>
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	83 30       	cpi	r24, 0x03	; 3
    16b8:	91 05       	cpc	r25, r1
    16ba:	81 f0       	breq	.+32     	; 0x16dc <GPIO_setupPortDirection+0x6c>
    16bc:	13 c0       	rjmp	.+38     	; 0x16e4 <GPIO_setupPortDirection+0x74>
	{
	case PORTA_ID:
		DDRA = direction;
    16be:	ea e3       	ldi	r30, 0x3A	; 58
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	80 83       	st	Z, r24
    16c6:	0e c0       	rjmp	.+28     	; 0x16e4 <GPIO_setupPortDirection+0x74>
		break;
	case PORTB_ID:
		DDRB = direction;
    16c8:	e7 e3       	ldi	r30, 0x37	; 55
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	80 83       	st	Z, r24
    16d0:	09 c0       	rjmp	.+18     	; 0x16e4 <GPIO_setupPortDirection+0x74>
		break;
	case PORTC_ID:
		DDRC = direction;
    16d2:	e4 e3       	ldi	r30, 0x34	; 52
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	80 83       	st	Z, r24
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <GPIO_setupPortDirection+0x74>
		break;
	case PORTD_ID:
		DDRD = direction;
    16dc:	e1 e3       	ldi	r30, 0x31	; 49
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <GPIO_writePort+0x6>
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <GPIO_writePort+0x8>
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	6a 83       	std	Y+2, r22	; 0x02

	/* Setup the port direction as required */
	switch(port_num)
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	3c 83       	std	Y+4, r19	; 0x04
    170a:	2b 83       	std	Y+3, r18	; 0x03
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	9c 81       	ldd	r25, Y+4	; 0x04
    1710:	81 30       	cpi	r24, 0x01	; 1
    1712:	91 05       	cpc	r25, r1
    1714:	d1 f0       	breq	.+52     	; 0x174a <GPIO_writePort+0x58>
    1716:	2b 81       	ldd	r18, Y+3	; 0x03
    1718:	3c 81       	ldd	r19, Y+4	; 0x04
    171a:	22 30       	cpi	r18, 0x02	; 2
    171c:	31 05       	cpc	r19, r1
    171e:	2c f4       	brge	.+10     	; 0x172a <GPIO_writePort+0x38>
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	9c 81       	ldd	r25, Y+4	; 0x04
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	61 f0       	breq	.+24     	; 0x1740 <GPIO_writePort+0x4e>
    1728:	1e c0       	rjmp	.+60     	; 0x1766 <GPIO_writePort+0x74>
    172a:	2b 81       	ldd	r18, Y+3	; 0x03
    172c:	3c 81       	ldd	r19, Y+4	; 0x04
    172e:	22 30       	cpi	r18, 0x02	; 2
    1730:	31 05       	cpc	r19, r1
    1732:	81 f0       	breq	.+32     	; 0x1754 <GPIO_writePort+0x62>
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	9c 81       	ldd	r25, Y+4	; 0x04
    1738:	83 30       	cpi	r24, 0x03	; 3
    173a:	91 05       	cpc	r25, r1
    173c:	81 f0       	breq	.+32     	; 0x175e <GPIO_writePort+0x6c>
    173e:	13 c0       	rjmp	.+38     	; 0x1766 <GPIO_writePort+0x74>
	{
	case PORTA_ID:
		PORTA = value;
    1740:	eb e3       	ldi	r30, 0x3B	; 59
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	80 83       	st	Z, r24
    1748:	0e c0       	rjmp	.+28     	; 0x1766 <GPIO_writePort+0x74>
		break;
	case PORTB_ID:
		PORTB = value;
    174a:	e8 e3       	ldi	r30, 0x38	; 56
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	80 83       	st	Z, r24
    1752:	09 c0       	rjmp	.+18     	; 0x1766 <GPIO_writePort+0x74>
		break;
	case PORTC_ID:
		PORTC = value;
    1754:	e5 e3       	ldi	r30, 0x35	; 53
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	80 83       	st	Z, r24
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <GPIO_writePort+0x74>
		break;
	case PORTD_ID:
		PORTD = value;
    175e:	e2 e3       	ldi	r30, 0x32	; 50
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	80 83       	st	Z, r24
		break;
	}
}
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	00 d0       	rcall	.+0      	; 0x177a <GPIO_readPort+0x6>
    177a:	00 d0       	rcall	.+0      	; 0x177c <GPIO_readPort+0x8>
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	8a 83       	std	Y+2, r24	; 0x02
	uint8 temp;
	/* Setup the port direction as required */
	switch(port_num)
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	3c 83       	std	Y+4, r19	; 0x04
    178a:	2b 83       	std	Y+3, r18	; 0x03
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	91 05       	cpc	r25, r1
    1794:	d1 f0       	breq	.+52     	; 0x17ca <GPIO_readPort+0x56>
    1796:	2b 81       	ldd	r18, Y+3	; 0x03
    1798:	3c 81       	ldd	r19, Y+4	; 0x04
    179a:	22 30       	cpi	r18, 0x02	; 2
    179c:	31 05       	cpc	r19, r1
    179e:	2c f4       	brge	.+10     	; 0x17aa <GPIO_readPort+0x36>
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	61 f0       	breq	.+24     	; 0x17c0 <GPIO_readPort+0x4c>
    17a8:	1f c0       	rjmp	.+62     	; 0x17e8 <GPIO_readPort+0x74>
    17aa:	2b 81       	ldd	r18, Y+3	; 0x03
    17ac:	3c 81       	ldd	r19, Y+4	; 0x04
    17ae:	22 30       	cpi	r18, 0x02	; 2
    17b0:	31 05       	cpc	r19, r1
    17b2:	81 f0       	breq	.+32     	; 0x17d4 <GPIO_readPort+0x60>
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	9c 81       	ldd	r25, Y+4	; 0x04
    17b8:	83 30       	cpi	r24, 0x03	; 3
    17ba:	91 05       	cpc	r25, r1
    17bc:	81 f0       	breq	.+32     	; 0x17de <GPIO_readPort+0x6a>
    17be:	14 c0       	rjmp	.+40     	; 0x17e8 <GPIO_readPort+0x74>
	{
	case PORTA_ID:
		temp = PINA;
    17c0:	e9 e3       	ldi	r30, 0x39	; 57
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	89 83       	std	Y+1, r24	; 0x01
    17c8:	10 c0       	rjmp	.+32     	; 0x17ea <GPIO_readPort+0x76>
		break;
	case PORTB_ID:
		temp = PINB;
    17ca:	e6 e3       	ldi	r30, 0x36	; 54
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	0b c0       	rjmp	.+22     	; 0x17ea <GPIO_readPort+0x76>
		break;
	case PORTC_ID:
		temp = PINC;
    17d4:	e3 e3       	ldi	r30, 0x33	; 51
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	06 c0       	rjmp	.+12     	; 0x17ea <GPIO_readPort+0x76>
		break;
	case PORTD_ID:
		temp = PIND;
    17de:	e0 e3       	ldi	r30, 0x30	; 48
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	01 c0       	rjmp	.+2      	; 0x17ea <GPIO_readPort+0x76>
		break;
	default:
		temp = 0x0;
    17e8:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return temp;
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <DcMotor_init>:
/*
 * The Function responsible for setup the direction for the two motor pins through the GPIO driver
 * Stop at the DC-Motor at the beginning through the GPIO driver
 */
void DcMotor_init(void)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
	/* Setup pins PB0 and PB1 as o.p pins */
	GPIO_setupPinDirection(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	62 e0       	ldi	r22, 0x02	; 2
    1806:	41 e0       	ldi	r20, 0x01	; 1
    1808:	0e 94 f7 08 	call	0x11ee	; 0x11ee <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	63 e0       	ldi	r22, 0x03	; 3
    1810:	41 e0       	ldi	r20, 0x01	; 1
    1812:	0e 94 f7 08 	call	0x11ee	; 0x11ee <GPIO_setupPinDirection>
	/* Initially the motor is not rotating */
	GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1816:	83 e0       	ldi	r24, 0x03	; 3
    1818:	62 e0       	ldi	r22, 0x02	; 2
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
	GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1820:	83 e0       	ldi	r24, 0x03	; 3
    1822:	63 e0       	ldi	r22, 0x03	; 3
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
}
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <DcMotor_rotateCW>:

/* Function to rotate the motor in Clockwise direction */
void DcMotor_rotateCW(void)
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1838:	83 e0       	ldi	r24, 0x03	; 3
    183a:	62 e0       	ldi	r22, 0x02	; 2
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
	GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    1842:	83 e0       	ldi	r24, 0x03	; 3
    1844:	63 e0       	ldi	r22, 0x03	; 3
    1846:	41 e0       	ldi	r20, 0x01	; 1
    1848:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
}
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <DcMotor_rotateACW>:

/* Function to rotate the motor in Anti-Clockwise direction */
void DcMotor_rotateACW(void)
{
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    185a:	83 e0       	ldi	r24, 0x03	; 3
    185c:	62 e0       	ldi	r22, 0x02	; 2
    185e:	41 e0       	ldi	r20, 0x01	; 1
    1860:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
	GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1864:	83 e0       	ldi	r24, 0x03	; 3
    1866:	63 e0       	ldi	r22, 0x03	; 3
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
}
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	08 95       	ret

00001874 <DcMotor_stop>:

/* Function to stop the motor */
void DcMotor_stop(void)
{
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    187c:	83 e0       	ldi	r24, 0x03	; 3
    187e:	62 e0       	ldi	r22, 0x02	; 2
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
	GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1886:	83 e0       	ldi	r24, 0x03	; 3
    1888:	63 e0       	ldi	r22, 0x03	; 3
    188a:	40 e0       	ldi	r20, 0x00	; 0
    188c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
}
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <Timer_init>:

/* Function to initialize the Timer with the given configurations
 * in a Configuration Structure
 */
void Timer_init(const Timer_Config* s_ConfigData)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	00 d0       	rcall	.+0      	; 0x189c <Timer_init+0x6>
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	9a 83       	std	Y+2, r25	; 0x02
    18a2:	89 83       	std	Y+1, r24	; 0x01
	if(s_ConfigData->timer_id == TIMER0_ID)
    18a4:	e9 81       	ldd	r30, Y+1	; 0x01
    18a6:	fa 81       	ldd	r31, Y+2	; 0x02
    18a8:	80 81       	ld	r24, Z
    18aa:	88 23       	and	r24, r24
    18ac:	09 f0       	breq	.+2      	; 0x18b0 <Timer_init+0x1a>
    18ae:	53 c0       	rjmp	.+166    	; 0x1956 <Timer_init+0xc0>
	{
		/* Set FOC0 when working in non-PWM mode
		 * Clear WGM00 as it is always zero in Normal and CTC modes
		 * Clear COM01:00 assuming that OC0 is always disconnected
		 */
		TCCR0 = (1<<FOC0);
    18b0:	e3 e5       	ldi	r30, 0x53	; 83
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 e8       	ldi	r24, 0x80	; 128
    18b6:	80 83       	st	Z, r24
		/* Insert the Prescaler in the first 3 bits of TCCR0 register */
		TCCR0 = (TCCR0 & 0xF8) | (s_ConfigData->timer_prescaler);
    18b8:	a3 e5       	ldi	r26, 0x53	; 83
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e3 e5       	ldi	r30, 0x53	; 83
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	98 2f       	mov	r25, r24
    18c4:	98 7f       	andi	r25, 0xF8	; 248
    18c6:	e9 81       	ldd	r30, Y+1	; 0x01
    18c8:	fa 81       	ldd	r31, Y+2	; 0x02
    18ca:	82 85       	ldd	r24, Z+10	; 0x0a
    18cc:	89 2b       	or	r24, r25
    18ce:	8c 93       	st	X, r24
		/* Insert the timer mode in WGM01 bit in TCCR0 register */
		TCCR0 = (TCCR0 & 0xF7) | ((s_ConfigData->timer_mode)<<3);
    18d0:	a3 e5       	ldi	r26, 0x53	; 83
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e3 e5       	ldi	r30, 0x53	; 83
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	28 2f       	mov	r18, r24
    18dc:	27 7f       	andi	r18, 0xF7	; 247
    18de:	e9 81       	ldd	r30, Y+1	; 0x01
    18e0:	fa 81       	ldd	r31, Y+2	; 0x02
    18e2:	81 85       	ldd	r24, Z+9	; 0x09
    18e4:	88 2f       	mov	r24, r24
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	82 2b       	or	r24, r18
    18f6:	8c 93       	st	X, r24
		/* Insert the given initial value in TCNT0 register */
		TCNT0 = s_ConfigData->initial_value;
    18f8:	22 e5       	ldi	r18, 0x52	; 82
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	e9 81       	ldd	r30, Y+1	; 0x01
    18fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1900:	81 81       	ldd	r24, Z+1	; 0x01
    1902:	92 81       	ldd	r25, Z+2	; 0x02
    1904:	a3 81       	ldd	r26, Z+3	; 0x03
    1906:	b4 81       	ldd	r27, Z+4	; 0x04
    1908:	f9 01       	movw	r30, r18
    190a:	80 83       	st	Z, r24
		/* Insert the given compare value in OCR0 register */
		OCR0 = s_ConfigData->compare_value;
    190c:	2c e5       	ldi	r18, 0x5C	; 92
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	e9 81       	ldd	r30, Y+1	; 0x01
    1912:	fa 81       	ldd	r31, Y+2	; 0x02
    1914:	85 81       	ldd	r24, Z+5	; 0x05
    1916:	96 81       	ldd	r25, Z+6	; 0x06
    1918:	a7 81       	ldd	r26, Z+7	; 0x07
    191a:	b0 85       	ldd	r27, Z+8	; 0x08
    191c:	f9 01       	movw	r30, r18
    191e:	80 83       	st	Z, r24
		/* Enable interrupt of the given mode
		 * NORMAL_MODE
		 * COMPARE_MODE
		 */
		if(s_ConfigData->timer_mode == NORMAL_MODE)
    1920:	e9 81       	ldd	r30, Y+1	; 0x01
    1922:	fa 81       	ldd	r31, Y+2	; 0x02
    1924:	81 85       	ldd	r24, Z+9	; 0x09
    1926:	88 23       	and	r24, r24
    1928:	41 f4       	brne	.+16     	; 0x193a <Timer_init+0xa4>
		{
			TIMSK |= (1<<TOIE0);
    192a:	a9 e5       	ldi	r26, 0x59	; 89
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e9 e5       	ldi	r30, 0x59	; 89
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	81 60       	ori	r24, 0x01	; 1
    1936:	8c 93       	st	X, r24
    1938:	c3 c0       	rjmp	.+390    	; 0x1ac0 <Timer_init+0x22a>
		}
		else if(s_ConfigData->timer_mode == COMPARE_MODE)
    193a:	e9 81       	ldd	r30, Y+1	; 0x01
    193c:	fa 81       	ldd	r31, Y+2	; 0x02
    193e:	81 85       	ldd	r24, Z+9	; 0x09
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	09 f0       	breq	.+2      	; 0x1946 <Timer_init+0xb0>
    1944:	bd c0       	rjmp	.+378    	; 0x1ac0 <Timer_init+0x22a>
		{
			TIMSK |= (1<<OCIE0);
    1946:	a9 e5       	ldi	r26, 0x59	; 89
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e9 e5       	ldi	r30, 0x59	; 89
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	82 60       	ori	r24, 0x02	; 2
    1952:	8c 93       	st	X, r24
    1954:	b5 c0       	rjmp	.+362    	; 0x1ac0 <Timer_init+0x22a>
		}
	}
	else if(s_ConfigData->timer_id == TIMER1_ID)
    1956:	e9 81       	ldd	r30, Y+1	; 0x01
    1958:	fa 81       	ldd	r31, Y+2	; 0x02
    195a:	80 81       	ld	r24, Z
    195c:	81 30       	cpi	r24, 0x01	; 1
    195e:	09 f0       	breq	.+2      	; 0x1962 <Timer_init+0xcc>
    1960:	58 c0       	rjmp	.+176    	; 0x1a12 <Timer_init+0x17c>
	{
		/* Set FOC1A when working in non-PWM mode
		 * Clear WGM11:10 as they are always zero in Normal and CTC modes
		 * Clear COM1A1:1A0:1B1:1B0 assuming that OC1A and OC1B are always disconnected
		 */
		TCCR1A = (1<<FOC1A);
    1962:	ef e4       	ldi	r30, 0x4F	; 79
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	88 e0       	ldi	r24, 0x08	; 8
    1968:	80 83       	st	Z, r24
		/* Clear TCCR1B to disable ICU interrupts */
		TCCR1B = 0;
    196a:	ee e4       	ldi	r30, 0x4E	; 78
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	10 82       	st	Z, r1
		/* Insert the timer mode in WGM12 bit in TCCR1B register */
		TCCR1B = (TCCR1B & 0xF7) | ((s_ConfigData->timer_mode)<<3);
    1970:	ae e4       	ldi	r26, 0x4E	; 78
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	ee e4       	ldi	r30, 0x4E	; 78
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	28 2f       	mov	r18, r24
    197c:	27 7f       	andi	r18, 0xF7	; 247
    197e:	e9 81       	ldd	r30, Y+1	; 0x01
    1980:	fa 81       	ldd	r31, Y+2	; 0x02
    1982:	81 85       	ldd	r24, Z+9	; 0x09
    1984:	88 2f       	mov	r24, r24
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	82 2b       	or	r24, r18
    1996:	8c 93       	st	X, r24
		/* Insert the Prescaler in the first 3 bits of TCCR1B register */
		TCCR1B = (TCCR1B & 0xF8) | (s_ConfigData->timer_prescaler);
    1998:	ae e4       	ldi	r26, 0x4E	; 78
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	ee e4       	ldi	r30, 0x4E	; 78
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	98 2f       	mov	r25, r24
    19a4:	98 7f       	andi	r25, 0xF8	; 248
    19a6:	e9 81       	ldd	r30, Y+1	; 0x01
    19a8:	fa 81       	ldd	r31, Y+2	; 0x02
    19aa:	82 85       	ldd	r24, Z+10	; 0x0a
    19ac:	89 2b       	or	r24, r25
    19ae:	8c 93       	st	X, r24
		/* Insert the given initial value in TCNT1 register */
		TCNT1 = s_ConfigData->initial_value;
    19b0:	2c e4       	ldi	r18, 0x4C	; 76
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	e9 81       	ldd	r30, Y+1	; 0x01
    19b6:	fa 81       	ldd	r31, Y+2	; 0x02
    19b8:	81 81       	ldd	r24, Z+1	; 0x01
    19ba:	92 81       	ldd	r25, Z+2	; 0x02
    19bc:	a3 81       	ldd	r26, Z+3	; 0x03
    19be:	b4 81       	ldd	r27, Z+4	; 0x04
    19c0:	f9 01       	movw	r30, r18
    19c2:	91 83       	std	Z+1, r25	; 0x01
    19c4:	80 83       	st	Z, r24
		/* Insert the given compare value in OCR1A register */
		OCR1A = s_ConfigData->compare_value;
    19c6:	2a e4       	ldi	r18, 0x4A	; 74
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	e9 81       	ldd	r30, Y+1	; 0x01
    19cc:	fa 81       	ldd	r31, Y+2	; 0x02
    19ce:	85 81       	ldd	r24, Z+5	; 0x05
    19d0:	96 81       	ldd	r25, Z+6	; 0x06
    19d2:	a7 81       	ldd	r26, Z+7	; 0x07
    19d4:	b0 85       	ldd	r27, Z+8	; 0x08
    19d6:	f9 01       	movw	r30, r18
    19d8:	91 83       	std	Z+1, r25	; 0x01
    19da:	80 83       	st	Z, r24
		/* Enable interrupt of the given mode
		 * NORMAL_MODE
		 * COMPARE_MODE
		 */
		if(s_ConfigData->timer_mode == NORMAL_MODE)
    19dc:	e9 81       	ldd	r30, Y+1	; 0x01
    19de:	fa 81       	ldd	r31, Y+2	; 0x02
    19e0:	81 85       	ldd	r24, Z+9	; 0x09
    19e2:	88 23       	and	r24, r24
    19e4:	41 f4       	brne	.+16     	; 0x19f6 <Timer_init+0x160>
		{
			TIMSK |= (1<<TOIE1);
    19e6:	a9 e5       	ldi	r26, 0x59	; 89
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e9 e5       	ldi	r30, 0x59	; 89
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	84 60       	ori	r24, 0x04	; 4
    19f2:	8c 93       	st	X, r24
    19f4:	65 c0       	rjmp	.+202    	; 0x1ac0 <Timer_init+0x22a>
		}
		else if(s_ConfigData->timer_mode == COMPARE_MODE)
    19f6:	e9 81       	ldd	r30, Y+1	; 0x01
    19f8:	fa 81       	ldd	r31, Y+2	; 0x02
    19fa:	81 85       	ldd	r24, Z+9	; 0x09
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <Timer_init+0x16c>
    1a00:	5f c0       	rjmp	.+190    	; 0x1ac0 <Timer_init+0x22a>
		{
			TIMSK |= (1<<OCIE1A);
    1a02:	a9 e5       	ldi	r26, 0x59	; 89
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e9 e5       	ldi	r30, 0x59	; 89
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	80 61       	ori	r24, 0x10	; 16
    1a0e:	8c 93       	st	X, r24
    1a10:	57 c0       	rjmp	.+174    	; 0x1ac0 <Timer_init+0x22a>
		}
	}
	else if(s_ConfigData->timer_id == TIMER2_ID)
    1a12:	e9 81       	ldd	r30, Y+1	; 0x01
    1a14:	fa 81       	ldd	r31, Y+2	; 0x02
    1a16:	80 81       	ld	r24, Z
    1a18:	82 30       	cpi	r24, 0x02	; 2
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <Timer_init+0x188>
    1a1c:	51 c0       	rjmp	.+162    	; 0x1ac0 <Timer_init+0x22a>
	{
		/* Set FOC2 when working in non-PWM mode
		 * Clear WGM20 as it is always zero in Normal and CTC modes
		 * Clear COM21:20 assuming that OC2 is always disconnected
		 */
		TCCR2 = (1<<FOC2);
    1a1e:	e5 e4       	ldi	r30, 0x45	; 69
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 e8       	ldi	r24, 0x80	; 128
    1a24:	80 83       	st	Z, r24
		/* Insert the prescaler in the first 3 bits of TCCR2 register */
		TCCR2 = (TCCR2 & 0xF8) | (s_ConfigData->timer_prescaler);
    1a26:	a5 e4       	ldi	r26, 0x45	; 69
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e5 e4       	ldi	r30, 0x45	; 69
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	98 2f       	mov	r25, r24
    1a32:	98 7f       	andi	r25, 0xF8	; 248
    1a34:	e9 81       	ldd	r30, Y+1	; 0x01
    1a36:	fa 81       	ldd	r31, Y+2	; 0x02
    1a38:	82 85       	ldd	r24, Z+10	; 0x0a
    1a3a:	89 2b       	or	r24, r25
    1a3c:	8c 93       	st	X, r24
		/* Insert the timer mode in WGM21 bit in TCCR2 register */
		TCCR2 = (TCCR2 & 0xF7) | ((s_ConfigData->timer_mode)<<3);
    1a3e:	a5 e4       	ldi	r26, 0x45	; 69
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e5 e4       	ldi	r30, 0x45	; 69
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	28 2f       	mov	r18, r24
    1a4a:	27 7f       	andi	r18, 0xF7	; 247
    1a4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a50:	81 85       	ldd	r24, Z+9	; 0x09
    1a52:	88 2f       	mov	r24, r24
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	82 2b       	or	r24, r18
    1a64:	8c 93       	st	X, r24
		/* Insert the given initial value in TCNT2 register */
		TCNT2 = s_ConfigData->initial_value;
    1a66:	24 e4       	ldi	r18, 0x44	; 68
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a6e:	81 81       	ldd	r24, Z+1	; 0x01
    1a70:	92 81       	ldd	r25, Z+2	; 0x02
    1a72:	a3 81       	ldd	r26, Z+3	; 0x03
    1a74:	b4 81       	ldd	r27, Z+4	; 0x04
    1a76:	f9 01       	movw	r30, r18
    1a78:	80 83       	st	Z, r24
		/* Insert the given compare value in OCR2 register */
		OCR2 = s_ConfigData->compare_value;
    1a7a:	23 e4       	ldi	r18, 0x43	; 67
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a80:	fa 81       	ldd	r31, Y+2	; 0x02
    1a82:	85 81       	ldd	r24, Z+5	; 0x05
    1a84:	96 81       	ldd	r25, Z+6	; 0x06
    1a86:	a7 81       	ldd	r26, Z+7	; 0x07
    1a88:	b0 85       	ldd	r27, Z+8	; 0x08
    1a8a:	f9 01       	movw	r30, r18
    1a8c:	80 83       	st	Z, r24
		/* Enable interrupt of the given mode
		 * NORMAL_MODE
		 * COMPARE_MODE
		 */
		if(s_ConfigData->timer_mode == NORMAL_MODE)
    1a8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a90:	fa 81       	ldd	r31, Y+2	; 0x02
    1a92:	81 85       	ldd	r24, Z+9	; 0x09
    1a94:	88 23       	and	r24, r24
    1a96:	41 f4       	brne	.+16     	; 0x1aa8 <Timer_init+0x212>
		{
			TIMSK |= (1<<TOIE2);
    1a98:	a9 e5       	ldi	r26, 0x59	; 89
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e9 e5       	ldi	r30, 0x59	; 89
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	80 64       	ori	r24, 0x40	; 64
    1aa4:	8c 93       	st	X, r24
    1aa6:	0c c0       	rjmp	.+24     	; 0x1ac0 <Timer_init+0x22a>
		}
		else if(s_ConfigData->timer_mode == COMPARE_MODE)
    1aa8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aaa:	fa 81       	ldd	r31, Y+2	; 0x02
    1aac:	81 85       	ldd	r24, Z+9	; 0x09
    1aae:	81 30       	cpi	r24, 0x01	; 1
    1ab0:	39 f4       	brne	.+14     	; 0x1ac0 <Timer_init+0x22a>
		{
			TIMSK |= (1<<OCIE2);
    1ab2:	a9 e5       	ldi	r26, 0x59	; 89
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e9 e5       	ldi	r30, 0x59	; 89
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	80 68       	ori	r24, 0x80	; 128
    1abe:	8c 93       	st	X, r24
		}
	}
}
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <Timer_setCallBack0>:

/* Assign the address of the given callback function to the global variable
 * so that every time an interrupt occurs by Timer0, the callback function is executed
 */
void Timer_setCallBack0(void (*a_ptr)(void))
{
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <Timer_setCallBack0+0x6>
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	9a 83       	std	Y+2, r25	; 0x02
    1ad6:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr0 = a_ptr;
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	9a 81       	ldd	r25, Y+2	; 0x02
    1adc:	90 93 85 00 	sts	0x0085, r25
    1ae0:	80 93 84 00 	sts	0x0084, r24
}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	08 95       	ret

00001aee <Timer_setCallBack1>:

/* Assign the address of the given callback function to the global variable
 * so that every time an interrupt occurs by Timer1, the callback function is executed
 */
void Timer_setCallBack1(void (*a_ptr)(void))
{
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <Timer_setCallBack1+0x6>
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	9a 83       	std	Y+2, r25	; 0x02
    1afa:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr1 = a_ptr;
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	9a 81       	ldd	r25, Y+2	; 0x02
    1b00:	90 93 87 00 	sts	0x0087, r25
    1b04:	80 93 86 00 	sts	0x0086, r24
}
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <Timer_setCallBack2>:

/* Assign the address of the given callback function to the global variable
 * so that every time an interrupt occurs by Timer2, the callback function is executed
 */
void Timer_setCallBack2(void (*a_ptr)(void))
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <Timer_setCallBack2+0x6>
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr2 = a_ptr;
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	9a 81       	ldd	r25, Y+2	; 0x02
    1b24:	90 93 89 00 	sts	0x0089, r25
    1b28:	80 93 88 00 	sts	0x0088, r24
}
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <Timer_deInit>:

/* Function to de-initialize the required timer */
void Timer_deInit(uint8 timer_id)
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	0f 92       	push	r0
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	89 83       	std	Y+1, r24	; 0x01
	if(timer_id == TIMER0_ID)
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	88 23       	and	r24, r24
    1b46:	39 f4       	brne	.+14     	; 0x1b56 <Timer_deInit+0x20>
	{
		TCCR0 = 0;
    1b48:	e3 e5       	ldi	r30, 0x53	; 83
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	10 82       	st	Z, r1
		TCNT0 = 0;
    1b4e:	e2 e5       	ldi	r30, 0x52	; 82
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	10 82       	st	Z, r1
    1b54:	17 c0       	rjmp	.+46     	; 0x1b84 <Timer_deInit+0x4e>
	}
	else if(timer_id == TIMER1_ID)
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	81 30       	cpi	r24, 0x01	; 1
    1b5a:	59 f4       	brne	.+22     	; 0x1b72 <Timer_deInit+0x3c>
	{
		TCCR1A = 0;
    1b5c:	ef e4       	ldi	r30, 0x4F	; 79
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	10 82       	st	Z, r1
		TCCR1B = 0;
    1b62:	ee e4       	ldi	r30, 0x4E	; 78
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	10 82       	st	Z, r1
		TCNT1 = 0;
    1b68:	ec e4       	ldi	r30, 0x4C	; 76
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	11 82       	std	Z+1, r1	; 0x01
    1b6e:	10 82       	st	Z, r1
    1b70:	09 c0       	rjmp	.+18     	; 0x1b84 <Timer_deInit+0x4e>
	}
	else if(timer_id == TIMER2_ID)
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	82 30       	cpi	r24, 0x02	; 2
    1b76:	31 f4       	brne	.+12     	; 0x1b84 <Timer_deInit+0x4e>
	{
		TCCR2 = 0;
    1b78:	e5 e4       	ldi	r30, 0x45	; 69
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	10 82       	st	Z, r1
		TCNT2 = 0;
    1b7e:	e4 e4       	ldi	r30, 0x44	; 68
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	10 82       	st	Z, r1
	}
}
    1b84:	0f 90       	pop	r0
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret

00001b8c <__vector_9>:

/* ISR of Timer0 in overflow mode, which is executed every time
 * an overflow occurs
 */
ISR(TIMER0_OVF_vect)
{
    1b8c:	1f 92       	push	r1
    1b8e:	0f 92       	push	r0
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	0f 92       	push	r0
    1b94:	11 24       	eor	r1, r1
    1b96:	2f 93       	push	r18
    1b98:	3f 93       	push	r19
    1b9a:	4f 93       	push	r20
    1b9c:	5f 93       	push	r21
    1b9e:	6f 93       	push	r22
    1ba0:	7f 93       	push	r23
    1ba2:	8f 93       	push	r24
    1ba4:	9f 93       	push	r25
    1ba6:	af 93       	push	r26
    1ba8:	bf 93       	push	r27
    1baa:	ef 93       	push	r30
    1bac:	ff 93       	push	r31
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
	/* Don't call the callback function unless the pointer has a value other than null */
	if(g_callBackPtr0 != NULL_PTR)
    1bb6:	80 91 84 00 	lds	r24, 0x0084
    1bba:	90 91 85 00 	lds	r25, 0x0085
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	29 f0       	breq	.+10     	; 0x1bcc <__vector_9+0x40>
	{
		/* call the callback function */
		(*g_callBackPtr0)();
    1bc2:	e0 91 84 00 	lds	r30, 0x0084
    1bc6:	f0 91 85 00 	lds	r31, 0x0085
    1bca:	09 95       	icall
	}
}
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	ff 91       	pop	r31
    1bd2:	ef 91       	pop	r30
    1bd4:	bf 91       	pop	r27
    1bd6:	af 91       	pop	r26
    1bd8:	9f 91       	pop	r25
    1bda:	8f 91       	pop	r24
    1bdc:	7f 91       	pop	r23
    1bde:	6f 91       	pop	r22
    1be0:	5f 91       	pop	r21
    1be2:	4f 91       	pop	r20
    1be4:	3f 91       	pop	r19
    1be6:	2f 91       	pop	r18
    1be8:	0f 90       	pop	r0
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	0f 90       	pop	r0
    1bee:	1f 90       	pop	r1
    1bf0:	18 95       	reti

00001bf2 <__vector_19>:

/* ISR of Timer0 in compare mode, which is executed every time
 * compare match occurs
 */
ISR(TIMER0_COMP_vect)
{
    1bf2:	1f 92       	push	r1
    1bf4:	0f 92       	push	r0
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	0f 92       	push	r0
    1bfa:	11 24       	eor	r1, r1
    1bfc:	2f 93       	push	r18
    1bfe:	3f 93       	push	r19
    1c00:	4f 93       	push	r20
    1c02:	5f 93       	push	r21
    1c04:	6f 93       	push	r22
    1c06:	7f 93       	push	r23
    1c08:	8f 93       	push	r24
    1c0a:	9f 93       	push	r25
    1c0c:	af 93       	push	r26
    1c0e:	bf 93       	push	r27
    1c10:	ef 93       	push	r30
    1c12:	ff 93       	push	r31
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
	/* Don't call the callback function unless the pointer has a value other than null */
	if(g_callBackPtr0 != NULL_PTR)
    1c1c:	80 91 84 00 	lds	r24, 0x0084
    1c20:	90 91 85 00 	lds	r25, 0x0085
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	29 f0       	breq	.+10     	; 0x1c32 <__vector_19+0x40>
	{
		/* call the callback function */
		(*g_callBackPtr0)();
    1c28:	e0 91 84 00 	lds	r30, 0x0084
    1c2c:	f0 91 85 00 	lds	r31, 0x0085
    1c30:	09 95       	icall
	}
}
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	ff 91       	pop	r31
    1c38:	ef 91       	pop	r30
    1c3a:	bf 91       	pop	r27
    1c3c:	af 91       	pop	r26
    1c3e:	9f 91       	pop	r25
    1c40:	8f 91       	pop	r24
    1c42:	7f 91       	pop	r23
    1c44:	6f 91       	pop	r22
    1c46:	5f 91       	pop	r21
    1c48:	4f 91       	pop	r20
    1c4a:	3f 91       	pop	r19
    1c4c:	2f 91       	pop	r18
    1c4e:	0f 90       	pop	r0
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	0f 90       	pop	r0
    1c54:	1f 90       	pop	r1
    1c56:	18 95       	reti

00001c58 <__vector_8>:

/* ISR of Timer1 in overflow mode, which is executed every time
 * an overflow occurs
 */
ISR(TIMER1_OVF_vect)
{
    1c58:	1f 92       	push	r1
    1c5a:	0f 92       	push	r0
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	0f 92       	push	r0
    1c60:	11 24       	eor	r1, r1
    1c62:	2f 93       	push	r18
    1c64:	3f 93       	push	r19
    1c66:	4f 93       	push	r20
    1c68:	5f 93       	push	r21
    1c6a:	6f 93       	push	r22
    1c6c:	7f 93       	push	r23
    1c6e:	8f 93       	push	r24
    1c70:	9f 93       	push	r25
    1c72:	af 93       	push	r26
    1c74:	bf 93       	push	r27
    1c76:	ef 93       	push	r30
    1c78:	ff 93       	push	r31
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
	/* Don't call the callback function unless the pointer has a value other than null */
	if(g_callBackPtr1 != NULL_PTR)
    1c82:	80 91 86 00 	lds	r24, 0x0086
    1c86:	90 91 87 00 	lds	r25, 0x0087
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	29 f0       	breq	.+10     	; 0x1c98 <__vector_8+0x40>
	{
		/* call the callback function */
		(*g_callBackPtr1)();
    1c8e:	e0 91 86 00 	lds	r30, 0x0086
    1c92:	f0 91 87 00 	lds	r31, 0x0087
    1c96:	09 95       	icall
	}
}
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	ff 91       	pop	r31
    1c9e:	ef 91       	pop	r30
    1ca0:	bf 91       	pop	r27
    1ca2:	af 91       	pop	r26
    1ca4:	9f 91       	pop	r25
    1ca6:	8f 91       	pop	r24
    1ca8:	7f 91       	pop	r23
    1caa:	6f 91       	pop	r22
    1cac:	5f 91       	pop	r21
    1cae:	4f 91       	pop	r20
    1cb0:	3f 91       	pop	r19
    1cb2:	2f 91       	pop	r18
    1cb4:	0f 90       	pop	r0
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	0f 90       	pop	r0
    1cba:	1f 90       	pop	r1
    1cbc:	18 95       	reti

00001cbe <__vector_6>:

/* ISR of Timer1 in compare mode, which is executed every time
 * compare match occurs
 */
ISR(TIMER1_COMPA_vect)
{
    1cbe:	1f 92       	push	r1
    1cc0:	0f 92       	push	r0
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	0f 92       	push	r0
    1cc6:	11 24       	eor	r1, r1
    1cc8:	2f 93       	push	r18
    1cca:	3f 93       	push	r19
    1ccc:	4f 93       	push	r20
    1cce:	5f 93       	push	r21
    1cd0:	6f 93       	push	r22
    1cd2:	7f 93       	push	r23
    1cd4:	8f 93       	push	r24
    1cd6:	9f 93       	push	r25
    1cd8:	af 93       	push	r26
    1cda:	bf 93       	push	r27
    1cdc:	ef 93       	push	r30
    1cde:	ff 93       	push	r31
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
	/* Don't call the callback function unless the pointer has a value other than null */
	if(g_callBackPtr1 != NULL_PTR)
    1ce8:	80 91 86 00 	lds	r24, 0x0086
    1cec:	90 91 87 00 	lds	r25, 0x0087
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	29 f0       	breq	.+10     	; 0x1cfe <__vector_6+0x40>
	{
		/* call the callback function */
		(*g_callBackPtr1)();
    1cf4:	e0 91 86 00 	lds	r30, 0x0086
    1cf8:	f0 91 87 00 	lds	r31, 0x0087
    1cfc:	09 95       	icall
	}
}
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	ff 91       	pop	r31
    1d04:	ef 91       	pop	r30
    1d06:	bf 91       	pop	r27
    1d08:	af 91       	pop	r26
    1d0a:	9f 91       	pop	r25
    1d0c:	8f 91       	pop	r24
    1d0e:	7f 91       	pop	r23
    1d10:	6f 91       	pop	r22
    1d12:	5f 91       	pop	r21
    1d14:	4f 91       	pop	r20
    1d16:	3f 91       	pop	r19
    1d18:	2f 91       	pop	r18
    1d1a:	0f 90       	pop	r0
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	0f 90       	pop	r0
    1d20:	1f 90       	pop	r1
    1d22:	18 95       	reti

00001d24 <__vector_4>:

/* ISR of Timer2 in overflow mode, which is executed every time
 * an overflow occurs
 */
ISR(TIMER2_OVF_vect)
{
    1d24:	1f 92       	push	r1
    1d26:	0f 92       	push	r0
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	0f 92       	push	r0
    1d2c:	11 24       	eor	r1, r1
    1d2e:	2f 93       	push	r18
    1d30:	3f 93       	push	r19
    1d32:	4f 93       	push	r20
    1d34:	5f 93       	push	r21
    1d36:	6f 93       	push	r22
    1d38:	7f 93       	push	r23
    1d3a:	8f 93       	push	r24
    1d3c:	9f 93       	push	r25
    1d3e:	af 93       	push	r26
    1d40:	bf 93       	push	r27
    1d42:	ef 93       	push	r30
    1d44:	ff 93       	push	r31
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
	/* Don't call the callback function unless the pointer has a value other than null */
	if(g_callBackPtr2 != NULL_PTR)
    1d4e:	80 91 88 00 	lds	r24, 0x0088
    1d52:	90 91 89 00 	lds	r25, 0x0089
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	29 f0       	breq	.+10     	; 0x1d64 <__vector_4+0x40>
	{
		/* call the callback function */
		(*g_callBackPtr2)();
    1d5a:	e0 91 88 00 	lds	r30, 0x0088
    1d5e:	f0 91 89 00 	lds	r31, 0x0089
    1d62:	09 95       	icall
	}
}
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	ff 91       	pop	r31
    1d6a:	ef 91       	pop	r30
    1d6c:	bf 91       	pop	r27
    1d6e:	af 91       	pop	r26
    1d70:	9f 91       	pop	r25
    1d72:	8f 91       	pop	r24
    1d74:	7f 91       	pop	r23
    1d76:	6f 91       	pop	r22
    1d78:	5f 91       	pop	r21
    1d7a:	4f 91       	pop	r20
    1d7c:	3f 91       	pop	r19
    1d7e:	2f 91       	pop	r18
    1d80:	0f 90       	pop	r0
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	0f 90       	pop	r0
    1d86:	1f 90       	pop	r1
    1d88:	18 95       	reti

00001d8a <__vector_3>:

/* ISR of Timer2 in compare mode, which is executed every time
 * compare match occurs
 */
ISR(TIMER2_COMP_vect)
{
    1d8a:	1f 92       	push	r1
    1d8c:	0f 92       	push	r0
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	0f 92       	push	r0
    1d92:	11 24       	eor	r1, r1
    1d94:	2f 93       	push	r18
    1d96:	3f 93       	push	r19
    1d98:	4f 93       	push	r20
    1d9a:	5f 93       	push	r21
    1d9c:	6f 93       	push	r22
    1d9e:	7f 93       	push	r23
    1da0:	8f 93       	push	r24
    1da2:	9f 93       	push	r25
    1da4:	af 93       	push	r26
    1da6:	bf 93       	push	r27
    1da8:	ef 93       	push	r30
    1daa:	ff 93       	push	r31
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
	/* Don't call the callback function unless the pointer has a value other than null */
	if(g_callBackPtr2 != NULL_PTR)
    1db4:	80 91 88 00 	lds	r24, 0x0088
    1db8:	90 91 89 00 	lds	r25, 0x0089
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	29 f0       	breq	.+10     	; 0x1dca <__vector_3+0x40>
	{
		/* call the callback function */
		(*g_callBackPtr2)();
    1dc0:	e0 91 88 00 	lds	r30, 0x0088
    1dc4:	f0 91 89 00 	lds	r31, 0x0089
    1dc8:	09 95       	icall
	}
}
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	ff 91       	pop	r31
    1dd0:	ef 91       	pop	r30
    1dd2:	bf 91       	pop	r27
    1dd4:	af 91       	pop	r26
    1dd6:	9f 91       	pop	r25
    1dd8:	8f 91       	pop	r24
    1dda:	7f 91       	pop	r23
    1ddc:	6f 91       	pop	r22
    1dde:	5f 91       	pop	r21
    1de0:	4f 91       	pop	r20
    1de2:	3f 91       	pop	r19
    1de4:	2f 91       	pop	r18
    1de6:	0f 90       	pop	r0
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	0f 90       	pop	r0
    1dec:	1f 90       	pop	r1
    1dee:	18 95       	reti

00001df0 <TWI_init>:

/*
 * Function to initialize the I2C(TWI) module with the given configurations
 */
void TWI_init(const TWI_Config* s_ConfigData)
{
    1df0:	0f 93       	push	r16
    1df2:	1f 93       	push	r17
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	00 d0       	rcall	.+0      	; 0x1dfa <TWI_init+0xa>
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	9a 83       	std	Y+2, r25	; 0x02
    1e00:	89 83       	std	Y+1, r24	; 0x01
	 * TWSTO = 0 Disable stop bit
	 * TWWC = 0 Write collision flag is disabled
	 * TWEN = 1 Enable the TWI module
	 * TWIE = 0 Disable interrupt enable of TWI
	 */
	TWCR = (1<<TWEN);
    1e02:	e6 e5       	ldi	r30, 0x56	; 86
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	84 e0       	ldi	r24, 0x04	; 4
    1e08:	80 83       	st	Z, r24
	/*
	 * TWPS1:0 = 0 (Prescaler bits)
	 * TWS7:3 = 0 (Status bits)
	 */
	TWSR = 0x00;
    1e0a:	e1 e2       	ldi	r30, 0x21	; 33
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	10 82       	st	Z, r1
	 * This is the equation to determine the required TWBR
	 * register value to obtain the required Bitrate as given
	 * in the structure but we are assuming that Prescaler is
	 * one and F_CPU = 8MHz
	 */
	TWBR = (uint8)(F_CPU / (2 * s_ConfigData->BIT_RATE)) - 8;
    1e10:	00 e2       	ldi	r16, 0x20	; 32
    1e12:	10 e0       	ldi	r17, 0x00	; 0
    1e14:	e9 81       	ldd	r30, Y+1	; 0x01
    1e16:	fa 81       	ldd	r31, Y+2	; 0x02
    1e18:	81 81       	ldd	r24, Z+1	; 0x01
    1e1a:	92 81       	ldd	r25, Z+2	; 0x02
    1e1c:	a3 81       	ldd	r26, Z+3	; 0x03
    1e1e:	b4 81       	ldd	r27, Z+4	; 0x04
    1e20:	9c 01       	movw	r18, r24
    1e22:	ad 01       	movw	r20, r26
    1e24:	22 0f       	add	r18, r18
    1e26:	33 1f       	adc	r19, r19
    1e28:	44 1f       	adc	r20, r20
    1e2a:	55 1f       	adc	r21, r21
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	92 e1       	ldi	r25, 0x12	; 18
    1e30:	aa e7       	ldi	r26, 0x7A	; 122
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	0e 94 bb 10 	call	0x2176	; 0x2176 <__udivmodsi4>
    1e3c:	da 01       	movw	r26, r20
    1e3e:	c9 01       	movw	r24, r18
    1e40:	88 50       	subi	r24, 0x08	; 8
    1e42:	f8 01       	movw	r30, r16
    1e44:	80 83       	st	Z, r24
	/* The 7-BIT address of the device to be able to communicate with
	 *  the last bit TWGCE = 0 to disable the General Call Recognition
	 */
	TWAR = ((s_ConfigData->ADDRESS)<<1) | 0xFE;
    1e46:	a2 e2       	ldi	r26, 0x22	; 34
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e4e:	80 81       	ld	r24, Z
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	8e 6f       	ori	r24, 0xFE	; 254
    1e5a:	8c 93       	st	X, r24
}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	1f 91       	pop	r17
    1e66:	0f 91       	pop	r16
    1e68:	08 95       	ret

00001e6a <TWI_start>:

/* Function to send the start bit to start the
 * transmission
 */
void TWI_start(void)
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
	/* Clear the TWINT flag before the entering of every function
	 * Send the start bit by writing 1 to TWSTA
	 * Enable the TWI every time we enter a function
	 */
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1e72:	e6 e5       	ldi	r30, 0x56	; 86
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	84 ea       	ldi	r24, 0xA4	; 164
    1e78:	80 83       	st	Z, r24
	/* Wait until the start bit is transmitted (TWINT = 1)*/
	while(BIT_IS_CLEAR(TWCR, TWINT)) {}
    1e7a:	e6 e5       	ldi	r30, 0x56	; 86
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	88 23       	and	r24, r24
    1e82:	dc f7       	brge	.-10     	; 0x1e7a <TWI_start+0x10>
}
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <TWI_stop>:

/* Function to send the stop bit to stop the
 * transmission
 */
void TWI_stop(void)
{
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
	/* Clear the TWINT flag before the entering of every function
	 * Send the stop bit by writing 1 to TWSTO
	 * Enable the TWI every time we enter a function
	 */
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
    1e92:	e6 e5       	ldi	r30, 0x56	; 86
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	84 e9       	ldi	r24, 0x94	; 148
    1e98:	80 83       	st	Z, r24
	/* No need to use polling for TWINT flag as the stop bit
	 * means that the master has ended the entire transaction
	 */
}
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <TWI_write>:

/* Function to write data to the I2C bus */
void TWI_write(uint8 data)
{
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	0f 92       	push	r0
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    1eaa:	89 83       	std	Y+1, r24	; 0x01
	/* Put the data to be written in the TWDR register */
	TWDR = data;
    1eac:	e3 e2       	ldi	r30, 0x23	; 35
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	80 83       	st	Z, r24
	/* Clear the TWINT flag and enable the TWI module
	 * every time we enter a function
	 */
	TWCR = (1<<TWINT) | (1<<TWEN);
    1eb4:	e6 e5       	ldi	r30, 0x56	; 86
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	84 e8       	ldi	r24, 0x84	; 132
    1eba:	80 83       	st	Z, r24
	/* Wait until the data is transmitted (TWINT = 1) */
	while(BIT_IS_CLEAR(TWCR, TWINT)) {}
    1ebc:	e6 e5       	ldi	r30, 0x56	; 86
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	88 23       	and	r24, r24
    1ec4:	dc f7       	brge	.-10     	; 0x1ebc <TWI_write+0x1c>
}
    1ec6:	0f 90       	pop	r0
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <TWI_readWithAck>:

/* Function to read the data replying with ACK to
 * continue sending more bytes
 */
uint8 TWI_readWithAck(void)
{
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
	/* Clear the TWINT flag and enable the TWI module
	 * every time we enter a function
	 * TWEA = 1 to read the data with ACK
	 */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1ed6:	e6 e5       	ldi	r30, 0x56	; 86
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	84 ec       	ldi	r24, 0xC4	; 196
    1edc:	80 83       	st	Z, r24
	/* Wait until the data is received (TWINT = 1) */
	while(BIT_IS_CLEAR(TWCR, TWINT)) {}
    1ede:	e6 e5       	ldi	r30, 0x56	; 86
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	88 23       	and	r24, r24
    1ee6:	dc f7       	brge	.-10     	; 0x1ede <TWI_readWithAck+0x10>
	return TWDR;
    1ee8:	e3 e2       	ldi	r30, 0x23	; 35
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
}
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <TWI_readWithNack>:

/* Function to read the data replying with NACK to
 * stop sending more bytes
 */
uint8 TWI_readWithNack(void)
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
	/* Clear the TWINT flag and enable the TWI module
	 * every time we enter a function
	 * TWEA = 0 to read the data with NACK
	 */
	TWCR = (1<<TWINT) | (1<<TWEN);
    1efc:	e6 e5       	ldi	r30, 0x56	; 86
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	84 e8       	ldi	r24, 0x84	; 132
    1f02:	80 83       	st	Z, r24
	/* Wait until the data is received (TWINT = 1) */
	while(BIT_IS_CLEAR(TWCR, TWINT)) {}
    1f04:	e6 e5       	ldi	r30, 0x56	; 86
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	88 23       	and	r24, r24
    1f0c:	dc f7       	brge	.-10     	; 0x1f04 <TWI_readWithNack+0x10>
	return TWDR;
    1f0e:	e3 e2       	ldi	r30, 0x23	; 35
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
}
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <TWI_getStatus>:

/* Function to read the 5 bits in the TWSR which determines
 * the status of the Frame
 */
uint8 TWI_getStatus(void)
{
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	0f 92       	push	r0
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* We need the last 5 bits only TWS7:3
	 * so masked the register with 0b11111000
	 */
	status = (TWSR & 0xF8);
    1f24:	e1 e2       	ldi	r30, 0x21	; 33
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	88 7f       	andi	r24, 0xF8	; 248
    1f2c:	89 83       	std	Y+1, r24	; 0x01
	return status;
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f30:	0f 90       	pop	r0
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <UART_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

/* Function to initialize the UART */
void UART_init(const UART_Config* s_ConfigData)
{
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <UART_init+0x6>
    1f3e:	00 d0       	rcall	.+0      	; 0x1f40 <UART_init+0x8>
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	9c 83       	std	Y+4, r25	; 0x04
    1f46:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1f48:	1a 82       	std	Y+2, r1	; 0x02
    1f4a:	19 82       	std	Y+1, r1	; 0x01
	/* Double-speed mode */
	UCSRA = (1<<U2X);
    1f4c:	eb e2       	ldi	r30, 0x2B	; 43
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	82 e0       	ldi	r24, 0x02	; 2
    1f52:	80 83       	st	Z, r24
	/* Enable Tx and Rx
	 * Disable interrupts
	 */
	UCSRB = (1<<TXEN) | (1<<RXEN);
    1f54:	ea e2       	ldi	r30, 0x2A	; 42
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	88 e1       	ldi	r24, 0x18	; 24
    1f5a:	80 83       	st	Z, r24
	/* In case of 9-bit mode the set the UCSZ2 bit in the UCSRB register */
	UCSRB = (UCSRB & 0xFB) | (s_ConfigData->num_bits);
    1f5c:	aa e2       	ldi	r26, 0x2A	; 42
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	ea e2       	ldi	r30, 0x2A	; 42
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	98 2f       	mov	r25, r24
    1f68:	9b 7f       	andi	r25, 0xFB	; 251
    1f6a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f6c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f6e:	81 81       	ldd	r24, Z+1	; 0x01
    1f70:	89 2b       	or	r24, r25
    1f72:	8c 93       	st	X, r24
	/* Set the URSEL bit when writing in UCSRC register */
	UCSRC = (1<<URSEL);
    1f74:	e0 e4       	ldi	r30, 0x40	; 64
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 e8       	ldi	r24, 0x80	; 128
    1f7a:	80 83       	st	Z, r24
	 * 6-Bit mode
	 * 7-Bit mode
	 * 8-Bit mode
	 * 9-Bit mode
	 */
	UCSRC = (UCSRC & 0xF9) | ((s_ConfigData->num_bits)<<1);
    1f7c:	a0 e4       	ldi	r26, 0x40	; 64
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e0 e4       	ldi	r30, 0x40	; 64
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	28 2f       	mov	r18, r24
    1f88:	29 7f       	andi	r18, 0xF9	; 249
    1f8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f8e:	81 81       	ldd	r24, Z+1	; 0x01
    1f90:	88 2f       	mov	r24, r24
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	82 2b       	or	r24, r18
    1f9a:	8c 93       	st	X, r24
	/* Insert the number of parity bits required
	 * Parity disabled
	 * Even Parity
	 * Odd parity
	 */
	UCSRC = (UCSRC & 0xCF) | ((s_ConfigData->parity_bit)<<4);
    1f9c:	a0 e4       	ldi	r26, 0x40	; 64
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e0 e4       	ldi	r30, 0x40	; 64
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	2f 7c       	andi	r18, 0xCF	; 207
    1faa:	eb 81       	ldd	r30, Y+3	; 0x03
    1fac:	fc 81       	ldd	r31, Y+4	; 0x04
    1fae:	82 81       	ldd	r24, Z+2	; 0x02
    1fb0:	88 2f       	mov	r24, r24
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	82 95       	swap	r24
    1fb6:	92 95       	swap	r25
    1fb8:	90 7f       	andi	r25, 0xF0	; 240
    1fba:	98 27       	eor	r25, r24
    1fbc:	80 7f       	andi	r24, 0xF0	; 240
    1fbe:	98 27       	eor	r25, r24
    1fc0:	82 2b       	or	r24, r18
    1fc2:	8c 93       	st	X, r24
	/* Insert the number of stop bits required
	 * 1 stop bit
	 * 2 stop bits
	 */
	UCSRC = (UCSRC & 0xF7) | ((s_ConfigData->stop_bits)<<3);
    1fc4:	a0 e4       	ldi	r26, 0x40	; 64
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e0 e4       	ldi	r30, 0x40	; 64
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	28 2f       	mov	r18, r24
    1fd0:	27 7f       	andi	r18, 0xF7	; 247
    1fd2:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd4:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd6:	80 81       	ld	r24, Z
    1fd8:	88 2f       	mov	r24, r24
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	82 2b       	or	r24, r18
    1fea:	8c 93       	st	X, r24
	/* Calculate UBBR value according to the given baud_rate */
	ubrr_value = (uint16)((F_CPU / (s_ConfigData->baud_rate * 8UL)) - 1);
    1fec:	eb 81       	ldd	r30, Y+3	; 0x03
    1fee:	fc 81       	ldd	r31, Y+4	; 0x04
    1ff0:	83 81       	ldd	r24, Z+3	; 0x03
    1ff2:	94 81       	ldd	r25, Z+4	; 0x04
    1ff4:	a5 81       	ldd	r26, Z+5	; 0x05
    1ff6:	b6 81       	ldd	r27, Z+6	; 0x06
    1ff8:	88 0f       	add	r24, r24
    1ffa:	99 1f       	adc	r25, r25
    1ffc:	aa 1f       	adc	r26, r26
    1ffe:	bb 1f       	adc	r27, r27
    2000:	88 0f       	add	r24, r24
    2002:	99 1f       	adc	r25, r25
    2004:	aa 1f       	adc	r26, r26
    2006:	bb 1f       	adc	r27, r27
    2008:	88 0f       	add	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	aa 1f       	adc	r26, r26
    200e:	bb 1f       	adc	r27, r27
    2010:	9c 01       	movw	r18, r24
    2012:	ad 01       	movw	r20, r26
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	92 e1       	ldi	r25, 0x12	; 18
    2018:	aa e7       	ldi	r26, 0x7A	; 122
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	bc 01       	movw	r22, r24
    201e:	cd 01       	movw	r24, r26
    2020:	0e 94 bb 10 	call	0x2176	; 0x2176 <__udivmodsi4>
    2024:	da 01       	movw	r26, r20
    2026:	c9 01       	movw	r24, r18
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	9a 83       	std	Y+2, r25	; 0x02
    202c:	89 83       	std	Y+1, r24	; 0x01
	/* Insert first 8-bits in the UBRRL register and the rest in the UBRRH register */
	UBRRL = ubrr_value;
    202e:	e9 e2       	ldi	r30, 0x29	; 41
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	80 83       	st	Z, r24
	UBRRH = ubrr_value>>8;
    2036:	e0 e4       	ldi	r30, 0x40	; 64
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	9a 81       	ldd	r25, Y+2	; 0x02
    203e:	89 2f       	mov	r24, r25
    2040:	99 27       	eor	r25, r25
    2042:	80 83       	st	Z, r24
}
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <UART_sendByte>:

/*
 * Function to send a byte to another device
 */
void UART_sendByte(uint8 data)
{
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	0f 92       	push	r0
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	89 83       	std	Y+1, r24	; 0x01
	/* Wait until the UDR is empty and ready to send a byte */
	while(BIT_IS_CLEAR(UCSRA, UDRE)) {}
    205e:	eb e2       	ldi	r30, 0x2B	; 43
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	88 2f       	mov	r24, r24
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	80 72       	andi	r24, 0x20	; 32
    206a:	90 70       	andi	r25, 0x00	; 0
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	b9 f3       	breq	.-18     	; 0x205e <UART_sendByte+0xc>
	UDR = data;
    2070:	ec e2       	ldi	r30, 0x2C	; 44
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	80 83       	st	Z, r24
}
    2078:	0f 90       	pop	r0
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <UART_receiveByte>:

/*
 * Function to receive a byte from another device
 */
uint8 UART_receiveByte(void)
{
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
	/* Wait until receiving is complete */
	while(BIT_IS_CLEAR(UCSRA, RXC)) {}
    2088:	eb e2       	ldi	r30, 0x2B	; 43
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	88 23       	and	r24, r24
    2090:	dc f7       	brge	.-10     	; 0x2088 <UART_receiveByte+0x8>
	return UDR;
    2092:	ec e2       	ldi	r30, 0x2C	; 44
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
}
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	08 95       	ret

0000209e <UART_sendString>:

/*
 * Function to send a string to another device
 */
void UART_sendString(const char *str)
{
    209e:	df 93       	push	r29
    20a0:	cf 93       	push	r28
    20a2:	00 d0       	rcall	.+0      	; 0x20a4 <UART_sendString+0x6>
    20a4:	0f 92       	push	r0
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62
    20aa:	9b 83       	std	Y+3, r25	; 0x03
    20ac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    20ae:	19 82       	std	Y+1, r1	; 0x01
    20b0:	0e c0       	rjmp	.+28     	; 0x20ce <UART_sendString+0x30>
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	9b 81       	ldd	r25, Y+3	; 0x03
    20bc:	fc 01       	movw	r30, r24
    20be:	e2 0f       	add	r30, r18
    20c0:	f3 1f       	adc	r31, r19
    20c2:	80 81       	ld	r24, Z
    20c4:	0e 94 29 10 	call	0x2052	; 0x2052 <UART_sendByte>
		i++;
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	8f 5f       	subi	r24, 0xFF	; 255
    20cc:	89 83       	std	Y+1, r24	; 0x01
 * Function to send a string to another device
 */
void UART_sendString(const char *str)
{
	uint8 i = 0;
	while(str[i] != '\0')
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	9b 81       	ldd	r25, Y+3	; 0x03
    20d8:	fc 01       	movw	r30, r24
    20da:	e2 0f       	add	r30, r18
    20dc:	f3 1f       	adc	r31, r19
    20de:	80 81       	ld	r24, Z
    20e0:	88 23       	and	r24, r24
    20e2:	39 f7       	brne	.-50     	; 0x20b2 <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}
}
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <UART_receiveString>:

/*
 * Function to receive a string from another device
 */
void UART_receiveString(char *str)
{
    20f0:	0f 93       	push	r16
    20f2:	1f 93       	push	r17
    20f4:	df 93       	push	r29
    20f6:	cf 93       	push	r28
    20f8:	00 d0       	rcall	.+0      	; 0x20fa <UART_receiveString+0xa>
    20fa:	0f 92       	push	r0
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	9b 83       	std	Y+3, r25	; 0x03
    2102:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2104:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the first byte only to be able to check for the special Character
	 * which determines the end of the string which is '@'
	 */
	str[i] = UART_receiveByte();
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	28 2f       	mov	r18, r24
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	8a 81       	ldd	r24, Y+2	; 0x02
    210e:	9b 81       	ldd	r25, Y+3	; 0x03
    2110:	8c 01       	movw	r16, r24
    2112:	02 0f       	add	r16, r18
    2114:	13 1f       	adc	r17, r19
    2116:	0e 94 40 10 	call	0x2080	; 0x2080 <UART_receiveByte>
    211a:	f8 01       	movw	r30, r16
    211c:	80 83       	st	Z, r24
    211e:	0f c0       	rjmp	.+30     	; 0x213e <UART_receiveString+0x4e>
	/* Receive until '@' is pressed */
	while(str[i] != '@')
	{
		i++;
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	8f 5f       	subi	r24, 0xFF	; 255
    2124:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_receiveByte();
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	9b 81       	ldd	r25, Y+3	; 0x03
    2130:	8c 01       	movw	r16, r24
    2132:	02 0f       	add	r16, r18
    2134:	13 1f       	adc	r17, r19
    2136:	0e 94 40 10 	call	0x2080	; 0x2080 <UART_receiveByte>
    213a:	f8 01       	movw	r30, r16
    213c:	80 83       	st	Z, r24
	/* Receive the first byte only to be able to check for the special Character
	 * which determines the end of the string which is '@'
	 */
	str[i] = UART_receiveByte();
	/* Receive until '@' is pressed */
	while(str[i] != '@')
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	9b 81       	ldd	r25, Y+3	; 0x03
    2148:	fc 01       	movw	r30, r24
    214a:	e2 0f       	add	r30, r18
    214c:	f3 1f       	adc	r31, r19
    214e:	80 81       	ld	r24, Z
    2150:	80 34       	cpi	r24, 0x40	; 64
    2152:	31 f7       	brne	.-52     	; 0x2120 <UART_receiveString+0x30>
	{
		i++;
		str[i] = UART_receiveByte();
	}
	/* Terminate the string with null terminator to indiciate the end of the string */
	str[i] = '\0';
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	8a 81       	ldd	r24, Y+2	; 0x02
    215c:	9b 81       	ldd	r25, Y+3	; 0x03
    215e:	fc 01       	movw	r30, r24
    2160:	e2 0f       	add	r30, r18
    2162:	f3 1f       	adc	r31, r19
    2164:	10 82       	st	Z, r1
}
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	1f 91       	pop	r17
    2172:	0f 91       	pop	r16
    2174:	08 95       	ret

00002176 <__udivmodsi4>:
    2176:	a1 e2       	ldi	r26, 0x21	; 33
    2178:	1a 2e       	mov	r1, r26
    217a:	aa 1b       	sub	r26, r26
    217c:	bb 1b       	sub	r27, r27
    217e:	fd 01       	movw	r30, r26
    2180:	0d c0       	rjmp	.+26     	; 0x219c <__udivmodsi4_ep>

00002182 <__udivmodsi4_loop>:
    2182:	aa 1f       	adc	r26, r26
    2184:	bb 1f       	adc	r27, r27
    2186:	ee 1f       	adc	r30, r30
    2188:	ff 1f       	adc	r31, r31
    218a:	a2 17       	cp	r26, r18
    218c:	b3 07       	cpc	r27, r19
    218e:	e4 07       	cpc	r30, r20
    2190:	f5 07       	cpc	r31, r21
    2192:	20 f0       	brcs	.+8      	; 0x219c <__udivmodsi4_ep>
    2194:	a2 1b       	sub	r26, r18
    2196:	b3 0b       	sbc	r27, r19
    2198:	e4 0b       	sbc	r30, r20
    219a:	f5 0b       	sbc	r31, r21

0000219c <__udivmodsi4_ep>:
    219c:	66 1f       	adc	r22, r22
    219e:	77 1f       	adc	r23, r23
    21a0:	88 1f       	adc	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	1a 94       	dec	r1
    21a6:	69 f7       	brne	.-38     	; 0x2182 <__udivmodsi4_loop>
    21a8:	60 95       	com	r22
    21aa:	70 95       	com	r23
    21ac:	80 95       	com	r24
    21ae:	90 95       	com	r25
    21b0:	9b 01       	movw	r18, r22
    21b2:	ac 01       	movw	r20, r24
    21b4:	bd 01       	movw	r22, r26
    21b6:	cf 01       	movw	r24, r30
    21b8:	08 95       	ret

000021ba <__prologue_saves__>:
    21ba:	2f 92       	push	r2
    21bc:	3f 92       	push	r3
    21be:	4f 92       	push	r4
    21c0:	5f 92       	push	r5
    21c2:	6f 92       	push	r6
    21c4:	7f 92       	push	r7
    21c6:	8f 92       	push	r8
    21c8:	9f 92       	push	r9
    21ca:	af 92       	push	r10
    21cc:	bf 92       	push	r11
    21ce:	cf 92       	push	r12
    21d0:	df 92       	push	r13
    21d2:	ef 92       	push	r14
    21d4:	ff 92       	push	r15
    21d6:	0f 93       	push	r16
    21d8:	1f 93       	push	r17
    21da:	cf 93       	push	r28
    21dc:	df 93       	push	r29
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	ca 1b       	sub	r28, r26
    21e4:	db 0b       	sbc	r29, r27
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
    21f0:	09 94       	ijmp

000021f2 <__epilogue_restores__>:
    21f2:	2a 88       	ldd	r2, Y+18	; 0x12
    21f4:	39 88       	ldd	r3, Y+17	; 0x11
    21f6:	48 88       	ldd	r4, Y+16	; 0x10
    21f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    21fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    21fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    21fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2200:	9b 84       	ldd	r9, Y+11	; 0x0b
    2202:	aa 84       	ldd	r10, Y+10	; 0x0a
    2204:	b9 84       	ldd	r11, Y+9	; 0x09
    2206:	c8 84       	ldd	r12, Y+8	; 0x08
    2208:	df 80       	ldd	r13, Y+7	; 0x07
    220a:	ee 80       	ldd	r14, Y+6	; 0x06
    220c:	fd 80       	ldd	r15, Y+5	; 0x05
    220e:	0c 81       	ldd	r16, Y+4	; 0x04
    2210:	1b 81       	ldd	r17, Y+3	; 0x03
    2212:	aa 81       	ldd	r26, Y+2	; 0x02
    2214:	b9 81       	ldd	r27, Y+1	; 0x01
    2216:	ce 0f       	add	r28, r30
    2218:	d1 1d       	adc	r29, r1
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	ed 01       	movw	r28, r26
    2226:	08 95       	ret

00002228 <_exit>:
    2228:	f8 94       	cli

0000222a <__stop_program>:
    222a:	ff cf       	rjmp	.-2      	; 0x222a <__stop_program>
